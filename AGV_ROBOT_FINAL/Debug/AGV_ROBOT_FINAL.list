
AGV_ROBOT_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000104e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000968  08010670  08010670  00020670  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010fd8  08010fd8  000301f4  2**0
                  CONTENTS
  4 .ARM          00000008  08010fd8  08010fd8  00020fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010fe0  08010fe0  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08010fe0  08010fe0  00020fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010fe8  08010fe8  00020fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08010fec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001174  200001f8  080111e0  000301f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000136c  080111e0  0003136c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e35a  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000319c  00000000  00000000  0004e57e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  00051720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d8  00000000  00000000  000528c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023e45  00000000  00000000  000539a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000146be  00000000  00000000  000777e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4666  00000000  00000000  0008bea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00160509  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006280  00000000  00000000  0016055c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010658 	.word	0x08010658

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	08010658 	.word	0x08010658

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <HAL_TIM_IC_CaptureCallback>:
int cnt4 = 0;

uint8_t thong_ke_ir1 = 0;
uint8_t thong_ke_ir2 = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]

	if(htim->Instance == htim2.Instance){
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4b8a      	ldr	r3, [pc, #552]	; (8001224 <HAL_TIM_IC_CaptureCallback+0x238>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	f040 808e 	bne.w	800111e <HAL_TIM_IC_CaptureCallback+0x132>
		if (Is_First_Captured_1 == 0) // if the first value is not captured
 8001002:	4b89      	ldr	r3, [pc, #548]	; (8001228 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2b00      	cmp	r3, #0
 800100a:	d116      	bne.n	800103a <HAL_TIM_IC_CaptureCallback+0x4e>
		{
			IC_Val1 = __HAL_TIM_GetCounter(&htim2);
 800100c:	4b85      	ldr	r3, [pc, #532]	; (8001224 <HAL_TIM_IC_CaptureCallback+0x238>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001012:	4a86      	ldr	r2, [pc, #536]	; (800122c <HAL_TIM_IC_CaptureCallback+0x240>)
 8001014:	6013      	str	r3, [r2, #0]
			Is_First_Captured_1 = 1;  // set the first captured as true
 8001016:	4b84      	ldr	r3, [pc, #528]	; (8001228 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001018:	2201      	movs	r2, #1
 800101a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800101c:	4b81      	ldr	r3, [pc, #516]	; (8001224 <HAL_TIM_IC_CaptureCallback+0x238>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	6a1a      	ldr	r2, [r3, #32]
 8001022:	4b80      	ldr	r3, [pc, #512]	; (8001224 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f022 020a 	bic.w	r2, r2, #10
 800102a:	621a      	str	r2, [r3, #32]
 800102c:	4b7d      	ldr	r3, [pc, #500]	; (8001224 <HAL_TIM_IC_CaptureCallback+0x238>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	4b7c      	ldr	r3, [pc, #496]	; (8001224 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	6a12      	ldr	r2, [r2, #32]
 8001036:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SetCounter(&htim5,0);
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim5, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
		}
	}

}
 8001038:	e0ee      	b.n	8001218 <HAL_TIM_IC_CaptureCallback+0x22c>
		else if (Is_First_Captured_1 == 1)   // if the first is already captured
 800103a:	4b7b      	ldr	r3, [pc, #492]	; (8001228 <HAL_TIM_IC_CaptureCallback+0x23c>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2b01      	cmp	r3, #1
 8001042:	f040 80e9 	bne.w	8001218 <HAL_TIM_IC_CaptureCallback+0x22c>
			IC_Val2 = __HAL_TIM_GetCounter(&htim2);
 8001046:	4b77      	ldr	r3, [pc, #476]	; (8001224 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104c:	4a78      	ldr	r2, [pc, #480]	; (8001230 <HAL_TIM_IC_CaptureCallback+0x244>)
 800104e:	6013      	str	r3, [r2, #0]
			Difference_1 = IC_Val2-IC_Val1;
 8001050:	4b77      	ldr	r3, [pc, #476]	; (8001230 <HAL_TIM_IC_CaptureCallback+0x244>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4b75      	ldr	r3, [pc, #468]	; (800122c <HAL_TIM_IC_CaptureCallback+0x240>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	4a76      	ldr	r2, [pc, #472]	; (8001234 <HAL_TIM_IC_CaptureCallback+0x248>)
 800105c:	6013      	str	r3, [r2, #0]
			if(Difference_1 > __BELOW_LIMIT_IR_LEFT_T__ && Difference_1 < __ABOVE_LIMIT_IR_LEFT_T__){
 800105e:	4b75      	ldr	r3, [pc, #468]	; (8001234 <HAL_TIM_IC_CaptureCallback+0x248>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f241 1294 	movw	r2, #4500	; 0x1194
 8001066:	4293      	cmp	r3, r2
 8001068:	d90e      	bls.n	8001088 <HAL_TIM_IC_CaptureCallback+0x9c>
 800106a:	4b72      	ldr	r3, [pc, #456]	; (8001234 <HAL_TIM_IC_CaptureCallback+0x248>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f241 527b 	movw	r2, #5499	; 0x157b
 8001072:	4293      	cmp	r3, r2
 8001074:	d808      	bhi.n	8001088 <HAL_TIM_IC_CaptureCallback+0x9c>
				data_ir1[i1++] = 1;
 8001076:	4b70      	ldr	r3, [pc, #448]	; (8001238 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	1c5a      	adds	r2, r3, #1
 800107c:	496e      	ldr	r1, [pc, #440]	; (8001238 <HAL_TIM_IC_CaptureCallback+0x24c>)
 800107e:	600a      	str	r2, [r1, #0]
 8001080:	4a6e      	ldr	r2, [pc, #440]	; (800123c <HAL_TIM_IC_CaptureCallback+0x250>)
 8001082:	2101      	movs	r1, #1
 8001084:	54d1      	strb	r1, [r2, r3]
 8001086:	e028      	b.n	80010da <HAL_TIM_IC_CaptureCallback+0xee>
			}else if(Difference_1 >= __BELOW_LIMIT_IR_RIGHT_T__ && Difference_1 <= __ABOVE_LIMIT_IR_RIGHT_T__){
 8001088:	4b6a      	ldr	r3, [pc, #424]	; (8001234 <HAL_TIM_IC_CaptureCallback+0x248>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f242 521b 	movw	r2, #9499	; 0x251b
 8001090:	4293      	cmp	r3, r2
 8001092:	d90e      	bls.n	80010b2 <HAL_TIM_IC_CaptureCallback+0xc6>
 8001094:	4b67      	ldr	r3, [pc, #412]	; (8001234 <HAL_TIM_IC_CaptureCallback+0x248>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f642 1204 	movw	r2, #10500	; 0x2904
 800109c:	4293      	cmp	r3, r2
 800109e:	d808      	bhi.n	80010b2 <HAL_TIM_IC_CaptureCallback+0xc6>
				data_ir1[i1++] = 2;
 80010a0:	4b65      	ldr	r3, [pc, #404]	; (8001238 <HAL_TIM_IC_CaptureCallback+0x24c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	1c5a      	adds	r2, r3, #1
 80010a6:	4964      	ldr	r1, [pc, #400]	; (8001238 <HAL_TIM_IC_CaptureCallback+0x24c>)
 80010a8:	600a      	str	r2, [r1, #0]
 80010aa:	4a64      	ldr	r2, [pc, #400]	; (800123c <HAL_TIM_IC_CaptureCallback+0x250>)
 80010ac:	2102      	movs	r1, #2
 80010ae:	54d1      	strb	r1, [r2, r3]
 80010b0:	e013      	b.n	80010da <HAL_TIM_IC_CaptureCallback+0xee>
			}else if(Difference_1 >= 14500 && Difference_1 <= 15500){
 80010b2:	4b60      	ldr	r3, [pc, #384]	; (8001234 <HAL_TIM_IC_CaptureCallback+0x248>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f643 02a3 	movw	r2, #14499	; 0x38a3
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d90d      	bls.n	80010da <HAL_TIM_IC_CaptureCallback+0xee>
 80010be:	4b5d      	ldr	r3, [pc, #372]	; (8001234 <HAL_TIM_IC_CaptureCallback+0x248>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f643 428c 	movw	r2, #15500	; 0x3c8c
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d807      	bhi.n	80010da <HAL_TIM_IC_CaptureCallback+0xee>
				data_ir1[i1++] = 3;
 80010ca:	4b5b      	ldr	r3, [pc, #364]	; (8001238 <HAL_TIM_IC_CaptureCallback+0x24c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	1c5a      	adds	r2, r3, #1
 80010d0:	4959      	ldr	r1, [pc, #356]	; (8001238 <HAL_TIM_IC_CaptureCallback+0x24c>)
 80010d2:	600a      	str	r2, [r1, #0]
 80010d4:	4a59      	ldr	r2, [pc, #356]	; (800123c <HAL_TIM_IC_CaptureCallback+0x250>)
 80010d6:	2103      	movs	r1, #3
 80010d8:	54d1      	strb	r1, [r2, r3]
			if(i1 == 10){
 80010da:	4b57      	ldr	r3, [pc, #348]	; (8001238 <HAL_TIM_IC_CaptureCallback+0x24c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2b0a      	cmp	r3, #10
 80010e0:	d105      	bne.n	80010ee <HAL_TIM_IC_CaptureCallback+0x102>
				i1 = 0;
 80010e2:	4b55      	ldr	r3, [pc, #340]	; (8001238 <HAL_TIM_IC_CaptureCallback+0x24c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
				thong_ke_ir1 = 1;
 80010e8:	4b55      	ldr	r3, [pc, #340]	; (8001240 <HAL_TIM_IC_CaptureCallback+0x254>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	701a      	strb	r2, [r3, #0]
			Is_First_Captured_1 = 0; // set it back to false
 80010ee:	4b4e      	ldr	r3, [pc, #312]	; (8001228 <HAL_TIM_IC_CaptureCallback+0x23c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SetCounter(&htim2,0);
 80010f4:	4b4b      	ldr	r3, [pc, #300]	; (8001224 <HAL_TIM_IC_CaptureCallback+0x238>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2200      	movs	r2, #0
 80010fa:	625a      	str	r2, [r3, #36]	; 0x24
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80010fc:	4b49      	ldr	r3, [pc, #292]	; (8001224 <HAL_TIM_IC_CaptureCallback+0x238>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6a1a      	ldr	r2, [r3, #32]
 8001102:	4b48      	ldr	r3, [pc, #288]	; (8001224 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f022 020a 	bic.w	r2, r2, #10
 800110a:	621a      	str	r2, [r3, #32]
 800110c:	4b45      	ldr	r3, [pc, #276]	; (8001224 <HAL_TIM_IC_CaptureCallback+0x238>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	6a1a      	ldr	r2, [r3, #32]
 8001112:	4b44      	ldr	r3, [pc, #272]	; (8001224 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f042 0202 	orr.w	r2, r2, #2
 800111a:	621a      	str	r2, [r3, #32]
}
 800111c:	e07c      	b.n	8001218 <HAL_TIM_IC_CaptureCallback+0x22c>
	else if(htim->Instance == htim5.Instance){
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	4b48      	ldr	r3, [pc, #288]	; (8001244 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	429a      	cmp	r2, r3
 8001128:	d176      	bne.n	8001218 <HAL_TIM_IC_CaptureCallback+0x22c>
		if (Is_First_Captured_2 == 0) // if the first value is not captured
 800112a:	4b47      	ldr	r3, [pc, #284]	; (8001248 <HAL_TIM_IC_CaptureCallback+0x25c>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	b2db      	uxtb	r3, r3
 8001130:	2b00      	cmp	r3, #0
 8001132:	d116      	bne.n	8001162 <HAL_TIM_IC_CaptureCallback+0x176>
			IC_Val3 = __HAL_TIM_GetCounter(&htim5);
 8001134:	4b43      	ldr	r3, [pc, #268]	; (8001244 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113a:	4a44      	ldr	r2, [pc, #272]	; (800124c <HAL_TIM_IC_CaptureCallback+0x260>)
 800113c:	6013      	str	r3, [r2, #0]
			Is_First_Captured_2 = 1;  // set the first captured as true
 800113e:	4b42      	ldr	r3, [pc, #264]	; (8001248 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001140:	2201      	movs	r2, #1
 8001142:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim5, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001144:	4b3f      	ldr	r3, [pc, #252]	; (8001244 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	6a1a      	ldr	r2, [r3, #32]
 800114a:	4b3e      	ldr	r3, [pc, #248]	; (8001244 <HAL_TIM_IC_CaptureCallback+0x258>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f022 020a 	bic.w	r2, r2, #10
 8001152:	621a      	str	r2, [r3, #32]
 8001154:	4b3b      	ldr	r3, [pc, #236]	; (8001244 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4b3a      	ldr	r3, [pc, #232]	; (8001244 <HAL_TIM_IC_CaptureCallback+0x258>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	6a12      	ldr	r2, [r2, #32]
 800115e:	621a      	str	r2, [r3, #32]
}
 8001160:	e05a      	b.n	8001218 <HAL_TIM_IC_CaptureCallback+0x22c>
		else if (Is_First_Captured_2 == 1)   // if the first is already captured
 8001162:	4b39      	ldr	r3, [pc, #228]	; (8001248 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	b2db      	uxtb	r3, r3
 8001168:	2b01      	cmp	r3, #1
 800116a:	d155      	bne.n	8001218 <HAL_TIM_IC_CaptureCallback+0x22c>
			IC_Val4 = __HAL_TIM_GetCounter(&htim5);
 800116c:	4b35      	ldr	r3, [pc, #212]	; (8001244 <HAL_TIM_IC_CaptureCallback+0x258>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001172:	4a37      	ldr	r2, [pc, #220]	; (8001250 <HAL_TIM_IC_CaptureCallback+0x264>)
 8001174:	6013      	str	r3, [r2, #0]
			Difference_2 = IC_Val4-IC_Val3;
 8001176:	4b36      	ldr	r3, [pc, #216]	; (8001250 <HAL_TIM_IC_CaptureCallback+0x264>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	4b34      	ldr	r3, [pc, #208]	; (800124c <HAL_TIM_IC_CaptureCallback+0x260>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	4a34      	ldr	r2, [pc, #208]	; (8001254 <HAL_TIM_IC_CaptureCallback+0x268>)
 8001182:	6013      	str	r3, [r2, #0]
			if(Difference_2 > __BELOW_LIMIT_IR_LEFT_T__ && Difference_2 < __ABOVE_LIMIT_IR_LEFT_T__){
 8001184:	4b33      	ldr	r3, [pc, #204]	; (8001254 <HAL_TIM_IC_CaptureCallback+0x268>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f241 1294 	movw	r2, #4500	; 0x1194
 800118c:	4293      	cmp	r3, r2
 800118e:	d90e      	bls.n	80011ae <HAL_TIM_IC_CaptureCallback+0x1c2>
 8001190:	4b30      	ldr	r3, [pc, #192]	; (8001254 <HAL_TIM_IC_CaptureCallback+0x268>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f241 527b 	movw	r2, #5499	; 0x157b
 8001198:	4293      	cmp	r3, r2
 800119a:	d808      	bhi.n	80011ae <HAL_TIM_IC_CaptureCallback+0x1c2>
				data_ir2[i2++] = 1;
 800119c:	4b2e      	ldr	r3, [pc, #184]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x26c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	1c5a      	adds	r2, r3, #1
 80011a2:	492d      	ldr	r1, [pc, #180]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80011a4:	600a      	str	r2, [r1, #0]
 80011a6:	4a2d      	ldr	r2, [pc, #180]	; (800125c <HAL_TIM_IC_CaptureCallback+0x270>)
 80011a8:	2101      	movs	r1, #1
 80011aa:	54d1      	strb	r1, [r2, r3]
 80011ac:	e013      	b.n	80011d6 <HAL_TIM_IC_CaptureCallback+0x1ea>
			}else if(Difference_2 >= __BELOW_LIMIT_IR_RIGHT_T__ && Difference_2 <= __ABOVE_LIMIT_IR_RIGHT_T__){
 80011ae:	4b29      	ldr	r3, [pc, #164]	; (8001254 <HAL_TIM_IC_CaptureCallback+0x268>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f242 521b 	movw	r2, #9499	; 0x251b
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d90d      	bls.n	80011d6 <HAL_TIM_IC_CaptureCallback+0x1ea>
 80011ba:	4b26      	ldr	r3, [pc, #152]	; (8001254 <HAL_TIM_IC_CaptureCallback+0x268>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f642 1204 	movw	r2, #10500	; 0x2904
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d807      	bhi.n	80011d6 <HAL_TIM_IC_CaptureCallback+0x1ea>
				data_ir2[i2++] = 2;
 80011c6:	4b24      	ldr	r3, [pc, #144]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	1c5a      	adds	r2, r3, #1
 80011cc:	4922      	ldr	r1, [pc, #136]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80011ce:	600a      	str	r2, [r1, #0]
 80011d0:	4a22      	ldr	r2, [pc, #136]	; (800125c <HAL_TIM_IC_CaptureCallback+0x270>)
 80011d2:	2102      	movs	r1, #2
 80011d4:	54d1      	strb	r1, [r2, r3]
			if(i2 == 10){
 80011d6:	4b20      	ldr	r3, [pc, #128]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2b0a      	cmp	r3, #10
 80011dc:	d105      	bne.n	80011ea <HAL_TIM_IC_CaptureCallback+0x1fe>
				i2 = 0;
 80011de:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
				thong_ke_ir2 = 1;
 80011e4:	4b1e      	ldr	r3, [pc, #120]	; (8001260 <HAL_TIM_IC_CaptureCallback+0x274>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	701a      	strb	r2, [r3, #0]
			Is_First_Captured_2 = 0; // set it back to false
 80011ea:	4b17      	ldr	r3, [pc, #92]	; (8001248 <HAL_TIM_IC_CaptureCallback+0x25c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SetCounter(&htim5,0);
 80011f0:	4b14      	ldr	r3, [pc, #80]	; (8001244 <HAL_TIM_IC_CaptureCallback+0x258>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2200      	movs	r2, #0
 80011f6:	625a      	str	r2, [r3, #36]	; 0x24
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim5, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <HAL_TIM_IC_CaptureCallback+0x258>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	6a1a      	ldr	r2, [r3, #32]
 80011fe:	4b11      	ldr	r3, [pc, #68]	; (8001244 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f022 020a 	bic.w	r2, r2, #10
 8001206:	621a      	str	r2, [r3, #32]
 8001208:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <HAL_TIM_IC_CaptureCallback+0x258>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	6a1a      	ldr	r2, [r3, #32]
 800120e:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f042 0202 	orr.w	r2, r2, #2
 8001216:	621a      	str	r2, [r3, #32]
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	200012cc 	.word	0x200012cc
 8001228:	20000214 	.word	0x20000214
 800122c:	2000021c 	.word	0x2000021c
 8001230:	20000220 	.word	0x20000220
 8001234:	20000218 	.word	0x20000218
 8001238:	20000224 	.word	0x20000224
 800123c:	20000f0c 	.word	0x20000f0c
 8001240:	20000248 	.word	0x20000248
 8001244:	200010c0 	.word	0x200010c0
 8001248:	20000228 	.word	0x20000228
 800124c:	20000230 	.word	0x20000230
 8001250:	20000234 	.word	0x20000234
 8001254:	2000022c 	.word	0x2000022c
 8001258:	20000238 	.word	0x20000238
 800125c:	20000f70 	.word	0x20000f70
 8001260:	20000249 	.word	0x20000249

08001264 <check_ir_signal>:

void check_ir_signal(void){
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
	if(thong_ke_ir1 == 1){
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <check_ir_signal+0x20>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d106      	bne.n	800127e <check_ir_signal+0x1a>
		check_ir1(data_ir1, 10);
 8001270:	210a      	movs	r1, #10
 8001272:	4805      	ldr	r0, [pc, #20]	; (8001288 <check_ir_signal+0x24>)
 8001274:	f000 f80a 	bl	800128c <check_ir1>
		thong_ke_ir1 = 0;
 8001278:	4b02      	ldr	r3, [pc, #8]	; (8001284 <check_ir_signal+0x20>)
 800127a:	2200      	movs	r2, #0
 800127c:	701a      	strb	r2, [r3, #0]
	}

}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000248 	.word	0x20000248
 8001288:	20000f0c 	.word	0x20000f0c

0800128c <check_ir1>:
uint8_t right1 = 0;
uint8_t right2 = 0;

uint8_t flag = 0;

void check_ir1(char *p,int len){
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
    for(int i = 0; i<len;i++){
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	e019      	b.n	80012d0 <check_ir1+0x44>
        if(*(p+i) == 1){
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	4413      	add	r3, r2
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d105      	bne.n	80012b4 <check_ir1+0x28>
            cnt1++;
 80012a8:	4b38      	ldr	r3, [pc, #224]	; (800138c <check_ir1+0x100>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	3301      	adds	r3, #1
 80012ae:	4a37      	ldr	r2, [pc, #220]	; (800138c <check_ir1+0x100>)
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	e00a      	b.n	80012ca <check_ir1+0x3e>
        }
        else if(*(p+i) == 2){
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	4413      	add	r3, r2
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d104      	bne.n	80012ca <check_ir1+0x3e>
            cnt2++;
 80012c0:	4b33      	ldr	r3, [pc, #204]	; (8001390 <check_ir1+0x104>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	3301      	adds	r3, #1
 80012c6:	4a32      	ldr	r2, [pc, #200]	; (8001390 <check_ir1+0x104>)
 80012c8:	6013      	str	r3, [r2, #0]
    for(int i = 0; i<len;i++){
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	3301      	adds	r3, #1
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fa      	ldr	r2, [r7, #12]
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	dbe1      	blt.n	800129c <check_ir1+0x10>
        }
    }

    //printf("%d %d\n",cnt1,cnt2);
    if(cnt3 == 0){
 80012d8:	4b2e      	ldr	r3, [pc, #184]	; (8001394 <check_ir1+0x108>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d138      	bne.n	8001352 <check_ir1+0xc6>
        if(cnt1 > cnt2){
 80012e0:	4b2a      	ldr	r3, [pc, #168]	; (800138c <check_ir1+0x100>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	4b2a      	ldr	r3, [pc, #168]	; (8001390 <check_ir1+0x104>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	dd0c      	ble.n	8001306 <check_ir1+0x7a>
        	g_vel_angular_right = -0.5;
 80012ec:	492a      	ldr	r1, [pc, #168]	; (8001398 <check_ir1+0x10c>)
 80012ee:	f04f 0200 	mov.w	r2, #0
 80012f2:	4b2a      	ldr	r3, [pc, #168]	; (800139c <check_ir1+0x110>)
 80012f4:	e9c1 2300 	strd	r2, r3, [r1]
        	g_vel_angular_left = 0.5;
 80012f8:	4929      	ldr	r1, [pc, #164]	; (80013a0 <check_ir1+0x114>)
 80012fa:	f04f 0200 	mov.w	r2, #0
 80012fe:	4b29      	ldr	r3, [pc, #164]	; (80013a4 <check_ir1+0x118>)
 8001300:	e9c1 2300 	strd	r2, r3, [r1]
 8001304:	e035      	b.n	8001372 <check_ir1+0xe6>
                //printf("left1\n");
        }else if(cnt2 > cnt1){
 8001306:	4b22      	ldr	r3, [pc, #136]	; (8001390 <check_ir1+0x104>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	4b20      	ldr	r3, [pc, #128]	; (800138c <check_ir1+0x100>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	429a      	cmp	r2, r3
 8001310:	dd0c      	ble.n	800132c <check_ir1+0xa0>
        	g_vel_angular_right = 0.5;
 8001312:	4921      	ldr	r1, [pc, #132]	; (8001398 <check_ir1+0x10c>)
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	4b22      	ldr	r3, [pc, #136]	; (80013a4 <check_ir1+0x118>)
 800131a:	e9c1 2300 	strd	r2, r3, [r1]
        	g_vel_angular_left = -0.5;
 800131e:	4920      	ldr	r1, [pc, #128]	; (80013a0 <check_ir1+0x114>)
 8001320:	f04f 0200 	mov.w	r2, #0
 8001324:	4b1d      	ldr	r3, [pc, #116]	; (800139c <check_ir1+0x110>)
 8001326:	e9c1 2300 	strd	r2, r3, [r1]
 800132a:	e022      	b.n	8001372 <check_ir1+0xe6>
                //printf("right1\n");
        }else if(cnt1 == cnt2){
 800132c:	4b17      	ldr	r3, [pc, #92]	; (800138c <check_ir1+0x100>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b17      	ldr	r3, [pc, #92]	; (8001390 <check_ir1+0x104>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	429a      	cmp	r2, r3
 8001336:	d11c      	bne.n	8001372 <check_ir1+0xe6>
        	g_vel_angular_right = 0.5;
 8001338:	4917      	ldr	r1, [pc, #92]	; (8001398 <check_ir1+0x10c>)
 800133a:	f04f 0200 	mov.w	r2, #0
 800133e:	4b19      	ldr	r3, [pc, #100]	; (80013a4 <check_ir1+0x118>)
 8001340:	e9c1 2300 	strd	r2, r3, [r1]
        	g_vel_angular_left = 0.5;
 8001344:	4916      	ldr	r1, [pc, #88]	; (80013a0 <check_ir1+0x114>)
 8001346:	f04f 0200 	mov.w	r2, #0
 800134a:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <check_ir1+0x118>)
 800134c:	e9c1 2300 	strd	r2, r3, [r1]
 8001350:	e00f      	b.n	8001372 <check_ir1+0xe6>
        		//printf("center\n");
        }
    }else if(cnt3 != 0){
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <check_ir1+0x108>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d00b      	beq.n	8001372 <check_ir1+0xe6>
    	g_vel_angular_right = 0.5;
 800135a:	490f      	ldr	r1, [pc, #60]	; (8001398 <check_ir1+0x10c>)
 800135c:	f04f 0200 	mov.w	r2, #0
 8001360:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <check_ir1+0x118>)
 8001362:	e9c1 2300 	strd	r2, r3, [r1]
    	g_vel_angular_left = 0.5;
 8001366:	490e      	ldr	r1, [pc, #56]	; (80013a0 <check_ir1+0x114>)
 8001368:	f04f 0200 	mov.w	r2, #0
 800136c:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <check_ir1+0x118>)
 800136e:	e9c1 2300 	strd	r2, r3, [r1]
    }


    cnt1 = 0;
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <check_ir1+0x100>)
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
    cnt2 = 0;
 8001378:	4b05      	ldr	r3, [pc, #20]	; (8001390 <check_ir1+0x104>)
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]

}
 800137e:	bf00      	nop
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	2000023c 	.word	0x2000023c
 8001390:	20000240 	.word	0x20000240
 8001394:	20000244 	.word	0x20000244
 8001398:	20000280 	.word	0x20000280
 800139c:	bfe00000 	.word	0xbfe00000
 80013a0:	20000278 	.word	0x20000278
 80013a4:	3fe00000 	.word	0x3fe00000

080013a8 <HAL_TIM_PeriodElapsedCallback>:
    cnt3 = 0;
    cnt4 = 0;

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim3.Instance){
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <HAL_TIM_PeriodElapsedCallback+0x44>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d111      	bne.n	80013e0 <HAL_TIM_PeriodElapsedCallback+0x38>
		if(thong_ke_ir1 == 0){
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d10d      	bne.n	80013e0 <HAL_TIM_PeriodElapsedCallback+0x38>
			g_vel_angular_left = 0;
 80013c4:	490b      	ldr	r1, [pc, #44]	; (80013f4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80013c6:	f04f 0200 	mov.w	r2, #0
 80013ca:	f04f 0300 	mov.w	r3, #0
 80013ce:	e9c1 2300 	strd	r2, r3, [r1]
			g_vel_angular_right = 0;
 80013d2:	4909      	ldr	r1, [pc, #36]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80013d4:	f04f 0200 	mov.w	r2, #0
 80013d8:	f04f 0300 	mov.w	r3, #0
 80013dc:	e9c1 2300 	strd	r2, r3, [r1]
		}
	}

}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	20001108 	.word	0x20001108
 80013f0:	20000248 	.word	0x20000248
 80013f4:	20000278 	.word	0x20000278
 80013f8:	20000280 	.word	0x20000280

080013fc <__io_putchar>:
#ifdef __GNUC__

#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

PUTCHAR_PROTOTYPE
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3 ,(uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001404:	1d39      	adds	r1, r7, #4
 8001406:	f04f 33ff 	mov.w	r3, #4294967295
 800140a:	2201      	movs	r2, #1
 800140c:	4803      	ldr	r0, [pc, #12]	; (800141c <__io_putchar+0x20>)
 800140e:	f009 f9b8 	bl	800a782 <HAL_UART_Transmit>
    return ch;
 8001412:	687b      	ldr	r3, [r7, #4]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	2000107c 	.word	0x2000107c

08001420 <DC1_thuan>:
{
		return (int)c-48;
}

void DC1_thuan(int speed)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,speed);
 8001428:	4b09      	ldr	r3, [pc, #36]	; (8001450 <DC1_thuan+0x30>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET);
 8001430:	2201      	movs	r2, #1
 8001432:	2140      	movs	r1, #64	; 0x40
 8001434:	4807      	ldr	r0, [pc, #28]	; (8001454 <DC1_thuan+0x34>)
 8001436:	f007 f89d 	bl	8008574 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001440:	4805      	ldr	r0, [pc, #20]	; (8001458 <DC1_thuan+0x38>)
 8001442:	f007 f897 	bl	8008574 <HAL_GPIO_WritePin>
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	2000123c 	.word	0x2000123c
 8001454:	40020000 	.word	0x40020000
 8001458:	40020800 	.word	0x40020800

0800145c <DC1_nghich>:

void DC1_nghich(int speed)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,speed);
 8001464:	4b09      	ldr	r3, [pc, #36]	; (800148c <DC1_nghich+0x30>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 800146c:	2200      	movs	r2, #0
 800146e:	2140      	movs	r1, #64	; 0x40
 8001470:	4807      	ldr	r0, [pc, #28]	; (8001490 <DC1_nghich+0x34>)
 8001472:	f007 f87f 	bl	8008574 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,GPIO_PIN_SET);
 8001476:	2201      	movs	r2, #1
 8001478:	f44f 7100 	mov.w	r1, #512	; 0x200
 800147c:	4805      	ldr	r0, [pc, #20]	; (8001494 <DC1_nghich+0x38>)
 800147e:	f007 f879 	bl	8008574 <HAL_GPIO_WritePin>
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	2000123c 	.word	0x2000123c
 8001490:	40020000 	.word	0x40020000
 8001494:	40020800 	.word	0x40020800

08001498 <DC2_nghich>:

void DC2_nghich(int speed)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,speed);
 80014a0:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <DC2_nghich+0x30>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,GPIO_PIN_SET);
 80014a8:	2201      	movs	r2, #1
 80014aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014ae:	4807      	ldr	r0, [pc, #28]	; (80014cc <DC2_nghich+0x34>)
 80014b0:	f007 f860 	bl	8008574 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_12,GPIO_PIN_RESET);
 80014b4:	2200      	movs	r2, #0
 80014b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014ba:	4804      	ldr	r0, [pc, #16]	; (80014cc <DC2_nghich+0x34>)
 80014bc:	f007 f85a 	bl	8008574 <HAL_GPIO_WritePin>
}
 80014c0:	bf00      	nop
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	2000123c 	.word	0x2000123c
 80014cc:	40021000 	.word	0x40021000

080014d0 <DC2_thuan>:
void DC2_thuan(int speed)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,speed);
 80014d8:	4b09      	ldr	r3, [pc, #36]	; (8001500 <DC2_thuan+0x30>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,GPIO_PIN_RESET);
 80014e0:	2200      	movs	r2, #0
 80014e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014e6:	4807      	ldr	r0, [pc, #28]	; (8001504 <DC2_thuan+0x34>)
 80014e8:	f007 f844 	bl	8008574 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_12,GPIO_PIN_SET);
 80014ec:	2201      	movs	r2, #1
 80014ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014f2:	4804      	ldr	r0, [pc, #16]	; (8001504 <DC2_thuan+0x34>)
 80014f4:	f007 f83e 	bl	8008574 <HAL_GPIO_WritePin>
}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	2000123c 	.word	0x2000123c
 8001504:	40021000 	.word	0x40021000

08001508 <lui>:

void lui()
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
	DC1_nghich(PWM1);
 800150c:	4b05      	ldr	r3, [pc, #20]	; (8001524 <lui+0x1c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ffa3 	bl	800145c <DC1_nghich>
	DC2_nghich(PWM2);
 8001516:	4b04      	ldr	r3, [pc, #16]	; (8001528 <lui+0x20>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff ffbc 	bl	8001498 <DC2_nghich>
}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20000ef8 	.word	0x20000ef8
 8001528:	20000efc 	.word	0x20000efc

0800152c <tien>:

void tien()
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
	DC1_thuan(PWM1);
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <tien+0x1c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff ff73 	bl	8001420 <DC1_thuan>
	DC2_thuan(PWM2);
 800153a:	4b04      	ldr	r3, [pc, #16]	; (800154c <tien+0x20>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff ffc6 	bl	80014d0 <DC2_thuan>
}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000ef8 	.word	0x20000ef8
 800154c:	20000efc 	.word	0x20000efc

08001550 <Xoay_Trai>:

void Xoay_Trai(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
	DC1_thuan(PWM1);
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <Xoay_Trai+0x1c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff ff61 	bl	8001420 <DC1_thuan>
	DC2_nghich(PWM2);
 800155e:	4b04      	ldr	r3, [pc, #16]	; (8001570 <Xoay_Trai+0x20>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff ff98 	bl	8001498 <DC2_nghich>
}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000ef8 	.word	0x20000ef8
 8001570:	20000efc 	.word	0x20000efc

08001574 <Xoay_Phai>:

void Xoay_Phai(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
	DC1_nghich(PWM1);
 8001578:	4b05      	ldr	r3, [pc, #20]	; (8001590 <Xoay_Phai+0x1c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff6d 	bl	800145c <DC1_nghich>
	DC2_thuan(PWM2);
 8001582:	4b04      	ldr	r3, [pc, #16]	; (8001594 <Xoay_Phai+0x20>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff ffa2 	bl	80014d0 <DC2_thuan>
}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000ef8 	.word	0x20000ef8
 8001594:	20000efc 	.word	0x20000efc

08001598 <dung>:


void dung()
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
	PWM1 = 0;
 800159c:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <dung+0x44>)
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
	PWM2 = 0;
 80015a2:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <dung+0x48>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,GPIO_PIN_SET);
 80015a8:	2201      	movs	r2, #1
 80015aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015ae:	480d      	ldr	r0, [pc, #52]	; (80015e4 <dung+0x4c>)
 80015b0:	f006 ffe0 	bl	8008574 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_12,GPIO_PIN_SET);
 80015b4:	2201      	movs	r2, #1
 80015b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015ba:	480a      	ldr	r0, [pc, #40]	; (80015e4 <dung+0x4c>)
 80015bc:	f006 ffda 	bl	8008574 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET);
 80015c0:	2201      	movs	r2, #1
 80015c2:	2140      	movs	r1, #64	; 0x40
 80015c4:	4808      	ldr	r0, [pc, #32]	; (80015e8 <dung+0x50>)
 80015c6:	f006 ffd5 	bl	8008574 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,GPIO_PIN_SET);
 80015ca:	2201      	movs	r2, #1
 80015cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015d0:	4806      	ldr	r0, [pc, #24]	; (80015ec <dung+0x54>)
 80015d2:	f006 ffcf 	bl	8008574 <HAL_GPIO_WritePin>
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000ef8 	.word	0x20000ef8
 80015e0:	20000efc 	.word	0x20000efc
 80015e4:	40021000 	.word	0x40021000
 80015e8:	40020000 	.word	0x40020000
 80015ec:	40020800 	.word	0x40020800

080015f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015f4:	f006 f884 	bl	8007700 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015f8:	f000 f844 	bl	8001684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015fc:	f000 fc0c 	bl	8001e18 <MX_GPIO_Init>
  MX_DMA_Init();
 8001600:	f000 fbe2 	bl	8001dc8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001604:	f000 fb8c 	bl	8001d20 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001608:	f000 f8a6 	bl	8001758 <MX_TIM1_Init>
  MX_TIM9_Init();
 800160c:	f000 fb24 	bl	8001c58 <MX_TIM9_Init>
  MX_USART3_UART_Init();
 8001610:	f000 fbb0 	bl	8001d74 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001614:	f000 f9bc 	bl	8001990 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001618:	f000 fa08 	bl	8001a2c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800161c:	f000 fb56 	bl	8001ccc <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001620:	f000 f946 	bl	80018b0 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001624:	f000 fa72 	bl	8001b0c <MX_TIM5_Init>
  MX_TIM6_Init();
 8001628:	f000 fae0 	bl	8001bec <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  	//pwm dieu khien dong co
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 800162c:	2104      	movs	r1, #4
 800162e:	480f      	ldr	r0, [pc, #60]	; (800166c <main+0x7c>)
 8001630:	f007 fda8 	bl	8009184 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8001634:	2108      	movs	r1, #8
 8001636:	480d      	ldr	r0, [pc, #52]	; (800166c <main+0x7c>)
 8001638:	f007 fda4 	bl	8009184 <HAL_TIM_PWM_Start>
	//ngat tinh toan pid
	HAL_TIM_Base_Start_IT(&htim9);
 800163c:	480c      	ldr	r0, [pc, #48]	; (8001670 <main+0x80>)
 800163e:	f007 fcd7 	bl	8008ff0 <HAL_TIM_Base_Start_IT>
	//doc tin hieu ir
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001642:	2100      	movs	r1, #0
 8001644:	480b      	ldr	r0, [pc, #44]	; (8001674 <main+0x84>)
 8001646:	f007 febf 	bl	80093c8 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 800164a:	2100      	movs	r1, #0
 800164c:	480a      	ldr	r0, [pc, #40]	; (8001678 <main+0x88>)
 800164e:	f007 febb 	bl	80093c8 <HAL_TIM_IC_Start_IT>
	//tao delay us
	HAL_TIM_Base_Start(&htim6);
 8001652:	480a      	ldr	r0, [pc, #40]	; (800167c <main+0x8c>)
 8001654:	f007 fc64 	bl	8008f20 <HAL_TIM_Base_Start>
	//reset ir data
	HAL_TIM_Base_Start_IT(&htim3);
 8001658:	4809      	ldr	r0, [pc, #36]	; (8001680 <main+0x90>)
 800165a:	f007 fcc9 	bl	8008ff0 <HAL_TIM_Base_Start_IT>
	setup();
 800165e:	f004 f845 	bl	80056ec <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  check_ir_signal();
 8001662:	f7ff fdff 	bl	8001264 <check_ir_signal>
	  loop();
 8001666:	f004 f86b 	bl	8005740 <loop>
	  check_ir_signal();
 800166a:	e7fa      	b.n	8001662 <main+0x72>
 800166c:	2000123c 	.word	0x2000123c
 8001670:	20001284 	.word	0x20001284
 8001674:	200012cc 	.word	0x200012cc
 8001678:	200010c0 	.word	0x200010c0
 800167c:	200011f4 	.word	0x200011f4
 8001680:	20001108 	.word	0x20001108

08001684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b094      	sub	sp, #80	; 0x50
 8001688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800168a:	f107 0320 	add.w	r3, r7, #32
 800168e:	2230      	movs	r2, #48	; 0x30
 8001690:	2100      	movs	r1, #0
 8001692:	4618      	mov	r0, r3
 8001694:	f00a fb5c 	bl	800bd50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001698:	f107 030c 	add.w	r3, r7, #12
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a8:	2300      	movs	r3, #0
 80016aa:	60bb      	str	r3, [r7, #8]
 80016ac:	4b28      	ldr	r3, [pc, #160]	; (8001750 <SystemClock_Config+0xcc>)
 80016ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b0:	4a27      	ldr	r2, [pc, #156]	; (8001750 <SystemClock_Config+0xcc>)
 80016b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b6:	6413      	str	r3, [r2, #64]	; 0x40
 80016b8:	4b25      	ldr	r3, [pc, #148]	; (8001750 <SystemClock_Config+0xcc>)
 80016ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016c4:	2300      	movs	r3, #0
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	4b22      	ldr	r3, [pc, #136]	; (8001754 <SystemClock_Config+0xd0>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a21      	ldr	r2, [pc, #132]	; (8001754 <SystemClock_Config+0xd0>)
 80016ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d2:	6013      	str	r3, [r2, #0]
 80016d4:	4b1f      	ldr	r3, [pc, #124]	; (8001754 <SystemClock_Config+0xd0>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016dc:	607b      	str	r3, [r7, #4]
 80016de:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016e0:	2302      	movs	r3, #2
 80016e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016e4:	2301      	movs	r3, #1
 80016e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016e8:	2310      	movs	r3, #16
 80016ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ec:	2302      	movs	r3, #2
 80016ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016f0:	2300      	movs	r3, #0
 80016f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016f4:	2308      	movs	r3, #8
 80016f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016f8:	23a8      	movs	r3, #168	; 0xa8
 80016fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016fc:	2302      	movs	r3, #2
 80016fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001700:	2304      	movs	r3, #4
 8001702:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001704:	f107 0320 	add.w	r3, r7, #32
 8001708:	4618      	mov	r0, r3
 800170a:	f006 ff71 	bl	80085f0 <HAL_RCC_OscConfig>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001714:	f000 fc54 	bl	8001fc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001718:	230f      	movs	r3, #15
 800171a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800171c:	2302      	movs	r3, #2
 800171e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001724:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001728:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800172a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800172e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001730:	f107 030c 	add.w	r3, r7, #12
 8001734:	2105      	movs	r1, #5
 8001736:	4618      	mov	r0, r3
 8001738:	f007 f9d2 	bl	8008ae0 <HAL_RCC_ClockConfig>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001742:	f000 fc3d 	bl	8001fc0 <Error_Handler>
  }
}
 8001746:	bf00      	nop
 8001748:	3750      	adds	r7, #80	; 0x50
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40023800 	.word	0x40023800
 8001754:	40007000 	.word	0x40007000

08001758 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b096      	sub	sp, #88	; 0x58
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800175e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	609a      	str	r2, [r3, #8]
 800176a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800176c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001776:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
 8001782:	60da      	str	r2, [r3, #12]
 8001784:	611a      	str	r2, [r3, #16]
 8001786:	615a      	str	r2, [r3, #20]
 8001788:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	2220      	movs	r2, #32
 800178e:	2100      	movs	r1, #0
 8001790:	4618      	mov	r0, r3
 8001792:	f00a fadd 	bl	800bd50 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001796:	4b44      	ldr	r3, [pc, #272]	; (80018a8 <MX_TIM1_Init+0x150>)
 8001798:	4a44      	ldr	r2, [pc, #272]	; (80018ac <MX_TIM1_Init+0x154>)
 800179a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 21-1;
 800179c:	4b42      	ldr	r3, [pc, #264]	; (80018a8 <MX_TIM1_Init+0x150>)
 800179e:	2214      	movs	r2, #20
 80017a0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a2:	4b41      	ldr	r3, [pc, #260]	; (80018a8 <MX_TIM1_Init+0x150>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 400-1;
 80017a8:	4b3f      	ldr	r3, [pc, #252]	; (80018a8 <MX_TIM1_Init+0x150>)
 80017aa:	f240 128f 	movw	r2, #399	; 0x18f
 80017ae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b0:	4b3d      	ldr	r3, [pc, #244]	; (80018a8 <MX_TIM1_Init+0x150>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017b6:	4b3c      	ldr	r3, [pc, #240]	; (80018a8 <MX_TIM1_Init+0x150>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017bc:	4b3a      	ldr	r3, [pc, #232]	; (80018a8 <MX_TIM1_Init+0x150>)
 80017be:	2200      	movs	r2, #0
 80017c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017c2:	4839      	ldr	r0, [pc, #228]	; (80018a8 <MX_TIM1_Init+0x150>)
 80017c4:	f007 fb5c 	bl	8008e80 <HAL_TIM_Base_Init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80017ce:	f000 fbf7 	bl	8001fc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017dc:	4619      	mov	r1, r3
 80017de:	4832      	ldr	r0, [pc, #200]	; (80018a8 <MX_TIM1_Init+0x150>)
 80017e0:	f008 f980 	bl	8009ae4 <HAL_TIM_ConfigClockSource>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80017ea:	f000 fbe9 	bl	8001fc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017ee:	482e      	ldr	r0, [pc, #184]	; (80018a8 <MX_TIM1_Init+0x150>)
 80017f0:	f007 fc6e 	bl	80090d0 <HAL_TIM_PWM_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80017fa:	f000 fbe1 	bl	8001fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017fe:	2300      	movs	r3, #0
 8001800:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001802:	2300      	movs	r3, #0
 8001804:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001806:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800180a:	4619      	mov	r1, r3
 800180c:	4826      	ldr	r0, [pc, #152]	; (80018a8 <MX_TIM1_Init+0x150>)
 800180e:	f008 fe89 	bl	800a524 <HAL_TIMEx_MasterConfigSynchronization>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001818:	f000 fbd2 	bl	8001fc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800181c:	2360      	movs	r3, #96	; 0x60
 800181e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001820:	2300      	movs	r3, #0
 8001822:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001824:	2300      	movs	r3, #0
 8001826:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001828:	2300      	movs	r3, #0
 800182a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800182c:	2300      	movs	r3, #0
 800182e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001830:	2300      	movs	r3, #0
 8001832:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001834:	2300      	movs	r3, #0
 8001836:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800183c:	2204      	movs	r2, #4
 800183e:	4619      	mov	r1, r3
 8001840:	4819      	ldr	r0, [pc, #100]	; (80018a8 <MX_TIM1_Init+0x150>)
 8001842:	f008 f88d 	bl	8009960 <HAL_TIM_PWM_ConfigChannel>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800184c:	f000 fbb8 	bl	8001fc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001854:	2208      	movs	r2, #8
 8001856:	4619      	mov	r1, r3
 8001858:	4813      	ldr	r0, [pc, #76]	; (80018a8 <MX_TIM1_Init+0x150>)
 800185a:	f008 f881 	bl	8009960 <HAL_TIM_PWM_ConfigChannel>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001864:	f000 fbac 	bl	8001fc0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001868:	2300      	movs	r3, #0
 800186a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800186c:	2300      	movs	r3, #0
 800186e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001870:	2300      	movs	r3, #0
 8001872:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800187c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001880:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001882:	2300      	movs	r3, #0
 8001884:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001886:	1d3b      	adds	r3, r7, #4
 8001888:	4619      	mov	r1, r3
 800188a:	4807      	ldr	r0, [pc, #28]	; (80018a8 <MX_TIM1_Init+0x150>)
 800188c:	f008 fec6 	bl	800a61c <HAL_TIMEx_ConfigBreakDeadTime>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001896:	f000 fb93 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800189a:	4803      	ldr	r0, [pc, #12]	; (80018a8 <MX_TIM1_Init+0x150>)
 800189c:	f005 f946 	bl	8006b2c <HAL_TIM_MspPostInit>

}
 80018a0:	bf00      	nop
 80018a2:	3758      	adds	r7, #88	; 0x58
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	2000123c 	.word	0x2000123c
 80018ac:	40010000 	.word	0x40010000

080018b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08a      	sub	sp, #40	; 0x28
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018b6:	f107 0318 	add.w	r3, r7, #24
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	605a      	str	r2, [r3, #4]
 80018c0:	609a      	str	r2, [r3, #8]
 80018c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c4:	f107 0310 	add.w	r3, r7, #16
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80018ce:	463b      	mov	r3, r7
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018da:	4b2c      	ldr	r3, [pc, #176]	; (800198c <MX_TIM2_Init+0xdc>)
 80018dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80018e2:	4b2a      	ldr	r3, [pc, #168]	; (800198c <MX_TIM2_Init+0xdc>)
 80018e4:	2253      	movs	r2, #83	; 0x53
 80018e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e8:	4b28      	ldr	r3, [pc, #160]	; (800198c <MX_TIM2_Init+0xdc>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80018ee:	4b27      	ldr	r3, [pc, #156]	; (800198c <MX_TIM2_Init+0xdc>)
 80018f0:	f04f 32ff 	mov.w	r2, #4294967295
 80018f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f6:	4b25      	ldr	r3, [pc, #148]	; (800198c <MX_TIM2_Init+0xdc>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018fc:	4b23      	ldr	r3, [pc, #140]	; (800198c <MX_TIM2_Init+0xdc>)
 80018fe:	2200      	movs	r2, #0
 8001900:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001902:	4822      	ldr	r0, [pc, #136]	; (800198c <MX_TIM2_Init+0xdc>)
 8001904:	f007 fabc 	bl	8008e80 <HAL_TIM_Base_Init>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800190e:	f000 fb57 	bl	8001fc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001912:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001916:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001918:	f107 0318 	add.w	r3, r7, #24
 800191c:	4619      	mov	r1, r3
 800191e:	481b      	ldr	r0, [pc, #108]	; (800198c <MX_TIM2_Init+0xdc>)
 8001920:	f008 f8e0 	bl	8009ae4 <HAL_TIM_ConfigClockSource>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800192a:	f000 fb49 	bl	8001fc0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800192e:	4817      	ldr	r0, [pc, #92]	; (800198c <MX_TIM2_Init+0xdc>)
 8001930:	f007 fcf0 	bl	8009314 <HAL_TIM_IC_Init>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800193a:	f000 fb41 	bl	8001fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001946:	f107 0310 	add.w	r3, r7, #16
 800194a:	4619      	mov	r1, r3
 800194c:	480f      	ldr	r0, [pc, #60]	; (800198c <MX_TIM2_Init+0xdc>)
 800194e:	f008 fde9 	bl	800a524 <HAL_TIMEx_MasterConfigSynchronization>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001958:	f000 fb32 	bl	8001fc0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800195c:	2302      	movs	r3, #2
 800195e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001960:	2301      	movs	r3, #1
 8001962:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001964:	2300      	movs	r3, #0
 8001966:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800196c:	463b      	mov	r3, r7
 800196e:	2200      	movs	r2, #0
 8001970:	4619      	mov	r1, r3
 8001972:	4806      	ldr	r0, [pc, #24]	; (800198c <MX_TIM2_Init+0xdc>)
 8001974:	f007 ff58 	bl	8009828 <HAL_TIM_IC_ConfigChannel>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800197e:	f000 fb1f 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001982:	bf00      	nop
 8001984:	3728      	adds	r7, #40	; 0x28
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	200012cc 	.word	0x200012cc

08001990 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001996:	f107 0308 	add.w	r3, r7, #8
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	605a      	str	r2, [r3, #4]
 80019a0:	609a      	str	r2, [r3, #8]
 80019a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a4:	463b      	mov	r3, r7
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019ac:	4b1d      	ldr	r3, [pc, #116]	; (8001a24 <MX_TIM3_Init+0x94>)
 80019ae:	4a1e      	ldr	r2, [pc, #120]	; (8001a28 <MX_TIM3_Init+0x98>)
 80019b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 80019b2:	4b1c      	ldr	r3, [pc, #112]	; (8001a24 <MX_TIM3_Init+0x94>)
 80019b4:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80019b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ba:	4b1a      	ldr	r3, [pc, #104]	; (8001a24 <MX_TIM3_Init+0x94>)
 80019bc:	2200      	movs	r2, #0
 80019be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 30000-1;
 80019c0:	4b18      	ldr	r3, [pc, #96]	; (8001a24 <MX_TIM3_Init+0x94>)
 80019c2:	f247 522f 	movw	r2, #29999	; 0x752f
 80019c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c8:	4b16      	ldr	r3, [pc, #88]	; (8001a24 <MX_TIM3_Init+0x94>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ce:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <MX_TIM3_Init+0x94>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019d4:	4813      	ldr	r0, [pc, #76]	; (8001a24 <MX_TIM3_Init+0x94>)
 80019d6:	f007 fa53 	bl	8008e80 <HAL_TIM_Base_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80019e0:	f000 faee 	bl	8001fc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019ea:	f107 0308 	add.w	r3, r7, #8
 80019ee:	4619      	mov	r1, r3
 80019f0:	480c      	ldr	r0, [pc, #48]	; (8001a24 <MX_TIM3_Init+0x94>)
 80019f2:	f008 f877 	bl	8009ae4 <HAL_TIM_ConfigClockSource>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80019fc:	f000 fae0 	bl	8001fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a00:	2300      	movs	r3, #0
 8001a02:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a04:	2300      	movs	r3, #0
 8001a06:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a08:	463b      	mov	r3, r7
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4805      	ldr	r0, [pc, #20]	; (8001a24 <MX_TIM3_Init+0x94>)
 8001a0e:	f008 fd89 	bl	800a524 <HAL_TIMEx_MasterConfigSynchronization>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001a18:	f000 fad2 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a1c:	bf00      	nop
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20001108 	.word	0x20001108
 8001a28:	40000400 	.word	0x40000400

08001a2c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	; 0x28
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a32:	f107 0318 	add.w	r3, r7, #24
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	609a      	str	r2, [r3, #8]
 8001a3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a40:	f107 0310 	add.w	r3, r7, #16
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a4a:	463b      	mov	r3, r7
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a56:	4b2b      	ldr	r3, [pc, #172]	; (8001b04 <MX_TIM4_Init+0xd8>)
 8001a58:	4a2b      	ldr	r2, [pc, #172]	; (8001b08 <MX_TIM4_Init+0xdc>)
 8001a5a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 8001a5c:	4b29      	ldr	r3, [pc, #164]	; (8001b04 <MX_TIM4_Init+0xd8>)
 8001a5e:	2253      	movs	r2, #83	; 0x53
 8001a60:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a62:	4b28      	ldr	r3, [pc, #160]	; (8001b04 <MX_TIM4_Init+0xd8>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001a68:	4b26      	ldr	r3, [pc, #152]	; (8001b04 <MX_TIM4_Init+0xd8>)
 8001a6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a6e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a70:	4b24      	ldr	r3, [pc, #144]	; (8001b04 <MX_TIM4_Init+0xd8>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a76:	4b23      	ldr	r3, [pc, #140]	; (8001b04 <MX_TIM4_Init+0xd8>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a7c:	4821      	ldr	r0, [pc, #132]	; (8001b04 <MX_TIM4_Init+0xd8>)
 8001a7e:	f007 f9ff 	bl	8008e80 <HAL_TIM_Base_Init>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8001a88:	f000 fa9a 	bl	8001fc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a90:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a92:	f107 0318 	add.w	r3, r7, #24
 8001a96:	4619      	mov	r1, r3
 8001a98:	481a      	ldr	r0, [pc, #104]	; (8001b04 <MX_TIM4_Init+0xd8>)
 8001a9a:	f008 f823 	bl	8009ae4 <HAL_TIM_ConfigClockSource>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001aa4:	f000 fa8c 	bl	8001fc0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001aa8:	4816      	ldr	r0, [pc, #88]	; (8001b04 <MX_TIM4_Init+0xd8>)
 8001aaa:	f007 fc33 	bl	8009314 <HAL_TIM_IC_Init>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001ab4:	f000 fa84 	bl	8001fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ac0:	f107 0310 	add.w	r3, r7, #16
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	480f      	ldr	r0, [pc, #60]	; (8001b04 <MX_TIM4_Init+0xd8>)
 8001ac8:	f008 fd2c 	bl	800a524 <HAL_TIMEx_MasterConfigSynchronization>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8001ad2:	f000 fa75 	bl	8001fc0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001ad6:	230a      	movs	r3, #10
 8001ad8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001ada:	2301      	movs	r3, #1
 8001adc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001ae6:	463b      	mov	r3, r7
 8001ae8:	2200      	movs	r2, #0
 8001aea:	4619      	mov	r1, r3
 8001aec:	4805      	ldr	r0, [pc, #20]	; (8001b04 <MX_TIM4_Init+0xd8>)
 8001aee:	f007 fe9b 	bl	8009828 <HAL_TIM_IC_ConfigChannel>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8001af8:	f000 fa62 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001afc:	bf00      	nop
 8001afe:	3728      	adds	r7, #40	; 0x28
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20001034 	.word	0x20001034
 8001b08:	40000800 	.word	0x40000800

08001b0c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08a      	sub	sp, #40	; 0x28
 8001b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b12:	f107 0318 	add.w	r3, r7, #24
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	605a      	str	r2, [r3, #4]
 8001b1c:	609a      	str	r2, [r3, #8]
 8001b1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b20:	f107 0310 	add.w	r3, r7, #16
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b2a:	463b      	mov	r3, r7
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001b36:	4b2b      	ldr	r3, [pc, #172]	; (8001be4 <MX_TIM5_Init+0xd8>)
 8001b38:	4a2b      	ldr	r2, [pc, #172]	; (8001be8 <MX_TIM5_Init+0xdc>)
 8001b3a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 8001b3c:	4b29      	ldr	r3, [pc, #164]	; (8001be4 <MX_TIM5_Init+0xd8>)
 8001b3e:	2253      	movs	r2, #83	; 0x53
 8001b40:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b42:	4b28      	ldr	r3, [pc, #160]	; (8001be4 <MX_TIM5_Init+0xd8>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001b48:	4b26      	ldr	r3, [pc, #152]	; (8001be4 <MX_TIM5_Init+0xd8>)
 8001b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b4e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b50:	4b24      	ldr	r3, [pc, #144]	; (8001be4 <MX_TIM5_Init+0xd8>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b56:	4b23      	ldr	r3, [pc, #140]	; (8001be4 <MX_TIM5_Init+0xd8>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001b5c:	4821      	ldr	r0, [pc, #132]	; (8001be4 <MX_TIM5_Init+0xd8>)
 8001b5e:	f007 f98f 	bl	8008e80 <HAL_TIM_Base_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 8001b68:	f000 fa2a 	bl	8001fc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b70:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001b72:	f107 0318 	add.w	r3, r7, #24
 8001b76:	4619      	mov	r1, r3
 8001b78:	481a      	ldr	r0, [pc, #104]	; (8001be4 <MX_TIM5_Init+0xd8>)
 8001b7a:	f007 ffb3 	bl	8009ae4 <HAL_TIM_ConfigClockSource>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001b84:	f000 fa1c 	bl	8001fc0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8001b88:	4816      	ldr	r0, [pc, #88]	; (8001be4 <MX_TIM5_Init+0xd8>)
 8001b8a:	f007 fbc3 	bl	8009314 <HAL_TIM_IC_Init>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001b94:	f000 fa14 	bl	8001fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ba0:	f107 0310 	add.w	r3, r7, #16
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	480f      	ldr	r0, [pc, #60]	; (8001be4 <MX_TIM5_Init+0xd8>)
 8001ba8:	f008 fcbc 	bl	800a524 <HAL_TIMEx_MasterConfigSynchronization>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 8001bb2:	f000 fa05 	bl	8001fc0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001bc6:	463b      	mov	r3, r7
 8001bc8:	2200      	movs	r2, #0
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4805      	ldr	r0, [pc, #20]	; (8001be4 <MX_TIM5_Init+0xd8>)
 8001bce:	f007 fe2b 	bl	8009828 <HAL_TIM_IC_ConfigChannel>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 8001bd8:	f000 f9f2 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001bdc:	bf00      	nop
 8001bde:	3728      	adds	r7, #40	; 0x28
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	200010c0 	.word	0x200010c0
 8001be8:	40000c00 	.word	0x40000c00

08001bec <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf2:	463b      	mov	r3, r7
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001bfa:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <MX_TIM6_Init+0x64>)
 8001bfc:	4a15      	ldr	r2, [pc, #84]	; (8001c54 <MX_TIM6_Init+0x68>)
 8001bfe:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8001c00:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <MX_TIM6_Init+0x64>)
 8001c02:	2253      	movs	r2, #83	; 0x53
 8001c04:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c06:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <MX_TIM6_Init+0x64>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001c0c:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <MX_TIM6_Init+0x64>)
 8001c0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c12:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c14:	4b0e      	ldr	r3, [pc, #56]	; (8001c50 <MX_TIM6_Init+0x64>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c1a:	480d      	ldr	r0, [pc, #52]	; (8001c50 <MX_TIM6_Init+0x64>)
 8001c1c:	f007 f930 	bl	8008e80 <HAL_TIM_Base_Init>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001c26:	f000 f9cb 	bl	8001fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c32:	463b      	mov	r3, r7
 8001c34:	4619      	mov	r1, r3
 8001c36:	4806      	ldr	r0, [pc, #24]	; (8001c50 <MX_TIM6_Init+0x64>)
 8001c38:	f008 fc74 	bl	800a524 <HAL_TIMEx_MasterConfigSynchronization>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001c42:	f000 f9bd 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	200011f4 	.word	0x200011f4
 8001c54:	40001000 	.word	0x40001000

08001c58 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c5e:	463b      	mov	r3, r7
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001c6a:	4b16      	ldr	r3, [pc, #88]	; (8001cc4 <MX_TIM9_Init+0x6c>)
 8001c6c:	4a16      	ldr	r2, [pc, #88]	; (8001cc8 <MX_TIM9_Init+0x70>)
 8001c6e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 8400-1;
 8001c70:	4b14      	ldr	r3, [pc, #80]	; (8001cc4 <MX_TIM9_Init+0x6c>)
 8001c72:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001c76:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c78:	4b12      	ldr	r3, [pc, #72]	; (8001cc4 <MX_TIM9_Init+0x6c>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 100-1;
 8001c7e:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <MX_TIM9_Init+0x6c>)
 8001c80:	2263      	movs	r2, #99	; 0x63
 8001c82:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c84:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <MX_TIM9_Init+0x6c>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <MX_TIM9_Init+0x6c>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001c90:	480c      	ldr	r0, [pc, #48]	; (8001cc4 <MX_TIM9_Init+0x6c>)
 8001c92:	f007 f8f5 	bl	8008e80 <HAL_TIM_Base_Init>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8001c9c:	f000 f990 	bl	8001fc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ca0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ca4:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001ca6:	463b      	mov	r3, r7
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4806      	ldr	r0, [pc, #24]	; (8001cc4 <MX_TIM9_Init+0x6c>)
 8001cac:	f007 ff1a 	bl	8009ae4 <HAL_TIM_ConfigClockSource>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8001cb6:	f000 f983 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001cba:	bf00      	nop
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20001284 	.word	0x20001284
 8001cc8:	40014000 	.word	0x40014000

08001ccc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cd0:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <MX_USART1_UART_Init+0x4c>)
 8001cd2:	4a12      	ldr	r2, [pc, #72]	; (8001d1c <MX_USART1_UART_Init+0x50>)
 8001cd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001cd6:	4b10      	ldr	r3, [pc, #64]	; (8001d18 <MX_USART1_UART_Init+0x4c>)
 8001cd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cdc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cde:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <MX_USART1_UART_Init+0x4c>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <MX_USART1_UART_Init+0x4c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cea:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <MX_USART1_UART_Init+0x4c>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cf0:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <MX_USART1_UART_Init+0x4c>)
 8001cf2:	220c      	movs	r2, #12
 8001cf4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cf6:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <MX_USART1_UART_Init+0x4c>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cfc:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <MX_USART1_UART_Init+0x4c>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d02:	4805      	ldr	r0, [pc, #20]	; (8001d18 <MX_USART1_UART_Init+0x4c>)
 8001d04:	f008 fcf0 	bl	800a6e8 <HAL_UART_Init>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d0e:	f000 f957 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	200011b0 	.word	0x200011b0
 8001d1c:	40011000 	.word	0x40011000

08001d20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d24:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <MX_USART2_UART_Init+0x4c>)
 8001d26:	4a12      	ldr	r2, [pc, #72]	; (8001d70 <MX_USART2_UART_Init+0x50>)
 8001d28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d2a:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <MX_USART2_UART_Init+0x4c>)
 8001d2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d32:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <MX_USART2_UART_Init+0x4c>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d38:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <MX_USART2_UART_Init+0x4c>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d3e:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <MX_USART2_UART_Init+0x4c>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d44:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <MX_USART2_UART_Init+0x4c>)
 8001d46:	220c      	movs	r2, #12
 8001d48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d4a:	4b08      	ldr	r3, [pc, #32]	; (8001d6c <MX_USART2_UART_Init+0x4c>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <MX_USART2_UART_Init+0x4c>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d56:	4805      	ldr	r0, [pc, #20]	; (8001d6c <MX_USART2_UART_Init+0x4c>)
 8001d58:	f008 fcc6 	bl	800a6e8 <HAL_UART_Init>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d62:	f000 f92d 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20001314 	.word	0x20001314
 8001d70:	40004400 	.word	0x40004400

08001d74 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d78:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <MX_USART3_UART_Init+0x4c>)
 8001d7a:	4a12      	ldr	r2, [pc, #72]	; (8001dc4 <MX_USART3_UART_Init+0x50>)
 8001d7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d7e:	4b10      	ldr	r3, [pc, #64]	; (8001dc0 <MX_USART3_UART_Init+0x4c>)
 8001d80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d86:	4b0e      	ldr	r3, [pc, #56]	; (8001dc0 <MX_USART3_UART_Init+0x4c>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <MX_USART3_UART_Init+0x4c>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d92:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <MX_USART3_UART_Init+0x4c>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d98:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <MX_USART3_UART_Init+0x4c>)
 8001d9a:	220c      	movs	r2, #12
 8001d9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d9e:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <MX_USART3_UART_Init+0x4c>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <MX_USART3_UART_Init+0x4c>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001daa:	4805      	ldr	r0, [pc, #20]	; (8001dc0 <MX_USART3_UART_Init+0x4c>)
 8001dac:	f008 fc9c 	bl	800a6e8 <HAL_UART_Init>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001db6:	f000 f903 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	2000107c 	.word	0x2000107c
 8001dc4:	40004800 	.word	0x40004800

08001dc8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	607b      	str	r3, [r7, #4]
 8001dd2:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <MX_DMA_Init+0x4c>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	4a0f      	ldr	r2, [pc, #60]	; (8001e14 <MX_DMA_Init+0x4c>)
 8001dd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dde:	4b0d      	ldr	r3, [pc, #52]	; (8001e14 <MX_DMA_Init+0x4c>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001de6:	607b      	str	r3, [r7, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001dea:	2200      	movs	r2, #0
 8001dec:	2100      	movs	r1, #0
 8001dee:	2010      	movs	r0, #16
 8001df0:	f005 fdd3 	bl	800799a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001df4:	2010      	movs	r0, #16
 8001df6:	f005 fdec 	bl	80079d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	2011      	movs	r0, #17
 8001e00:	f005 fdcb 	bl	800799a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001e04:	2011      	movs	r0, #17
 8001e06:	f005 fde4 	bl	80079d2 <HAL_NVIC_EnableIRQ>

}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40023800 	.word	0x40023800

08001e18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b08a      	sub	sp, #40	; 0x28
 8001e1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1e:	f107 0314 	add.w	r3, r7, #20
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	605a      	str	r2, [r3, #4]
 8001e28:	609a      	str	r2, [r3, #8]
 8001e2a:	60da      	str	r2, [r3, #12]
 8001e2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	613b      	str	r3, [r7, #16]
 8001e32:	4b5e      	ldr	r3, [pc, #376]	; (8001fac <MX_GPIO_Init+0x194>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	4a5d      	ldr	r2, [pc, #372]	; (8001fac <MX_GPIO_Init+0x194>)
 8001e38:	f043 0304 	orr.w	r3, r3, #4
 8001e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3e:	4b5b      	ldr	r3, [pc, #364]	; (8001fac <MX_GPIO_Init+0x194>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	f003 0304 	and.w	r3, r3, #4
 8001e46:	613b      	str	r3, [r7, #16]
 8001e48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	4b57      	ldr	r3, [pc, #348]	; (8001fac <MX_GPIO_Init+0x194>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	4a56      	ldr	r2, [pc, #344]	; (8001fac <MX_GPIO_Init+0x194>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5a:	4b54      	ldr	r3, [pc, #336]	; (8001fac <MX_GPIO_Init+0x194>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	60bb      	str	r3, [r7, #8]
 8001e6a:	4b50      	ldr	r3, [pc, #320]	; (8001fac <MX_GPIO_Init+0x194>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	4a4f      	ldr	r2, [pc, #316]	; (8001fac <MX_GPIO_Init+0x194>)
 8001e70:	f043 0310 	orr.w	r3, r3, #16
 8001e74:	6313      	str	r3, [r2, #48]	; 0x30
 8001e76:	4b4d      	ldr	r3, [pc, #308]	; (8001fac <MX_GPIO_Init+0x194>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	f003 0310 	and.w	r3, r3, #16
 8001e7e:	60bb      	str	r3, [r7, #8]
 8001e80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	607b      	str	r3, [r7, #4]
 8001e86:	4b49      	ldr	r3, [pc, #292]	; (8001fac <MX_GPIO_Init+0x194>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	4a48      	ldr	r2, [pc, #288]	; (8001fac <MX_GPIO_Init+0x194>)
 8001e8c:	f043 0302 	orr.w	r3, r3, #2
 8001e90:	6313      	str	r3, [r2, #48]	; 0x30
 8001e92:	4b46      	ldr	r3, [pc, #280]	; (8001fac <MX_GPIO_Init+0x194>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	607b      	str	r3, [r7, #4]
 8001e9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	603b      	str	r3, [r7, #0]
 8001ea2:	4b42      	ldr	r3, [pc, #264]	; (8001fac <MX_GPIO_Init+0x194>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	4a41      	ldr	r2, [pc, #260]	; (8001fac <MX_GPIO_Init+0x194>)
 8001ea8:	f043 0308 	orr.w	r3, r3, #8
 8001eac:	6313      	str	r3, [r2, #48]	; 0x30
 8001eae:	4b3f      	ldr	r3, [pc, #252]	; (8001fac <MX_GPIO_Init+0x194>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	f003 0308 	and.w	r3, r3, #8
 8001eb6:	603b      	str	r3, [r7, #0]
 8001eb8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8001ec0:	483b      	ldr	r0, [pc, #236]	; (8001fb0 <MX_GPIO_Init+0x198>)
 8001ec2:	f006 fb57 	bl	8008574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8001ecc:	4839      	ldr	r0, [pc, #228]	; (8001fb4 <MX_GPIO_Init+0x19c>)
 8001ece:	f006 fb51 	bl	8008574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ed8:	4837      	ldr	r0, [pc, #220]	; (8001fb8 <MX_GPIO_Init+0x1a0>)
 8001eda:	f006 fb4b 	bl	8008574 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7;
 8001ede:	2381      	movs	r3, #129	; 0x81
 8001ee0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eea:	f107 0314 	add.w	r3, r7, #20
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4831      	ldr	r0, [pc, #196]	; (8001fb8 <MX_GPIO_Init+0x1a0>)
 8001ef2:	f006 f98b 	bl	800820c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8001ef6:	2342      	movs	r3, #66	; 0x42
 8001ef8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001efa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001efe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f00:	2301      	movs	r3, #1
 8001f02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f04:	f107 0314 	add.w	r3, r7, #20
 8001f08:	4619      	mov	r1, r3
 8001f0a:	482b      	ldr	r0, [pc, #172]	; (8001fb8 <MX_GPIO_Init+0x1a0>)
 8001f0c:	f006 f97e 	bl	800820c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001f10:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8001f14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f16:	2301      	movs	r3, #1
 8001f18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f22:	f107 0314 	add.w	r3, r7, #20
 8001f26:	4619      	mov	r1, r3
 8001f28:	4821      	ldr	r0, [pc, #132]	; (8001fb0 <MX_GPIO_Init+0x198>)
 8001f2a:	f006 f96f 	bl	800820c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE11 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001f2e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f34:	2301      	movs	r3, #1
 8001f36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	4619      	mov	r1, r3
 8001f46:	481b      	ldr	r0, [pc, #108]	; (8001fb4 <MX_GPIO_Init+0x19c>)
 8001f48:	f006 f960 	bl	800820c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f52:	2301      	movs	r3, #1
 8001f54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f5e:	f107 0314 	add.w	r3, r7, #20
 8001f62:	4619      	mov	r1, r3
 8001f64:	4814      	ldr	r0, [pc, #80]	; (8001fb8 <MX_GPIO_Init+0x1a0>)
 8001f66:	f006 f951 	bl	800820c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f6a:	2310      	movs	r3, #16
 8001f6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f72:	2301      	movs	r3, #1
 8001f74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f76:	f107 0314 	add.w	r3, r7, #20
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	480f      	ldr	r0, [pc, #60]	; (8001fbc <MX_GPIO_Init+0x1a4>)
 8001f7e:	f006 f945 	bl	800820c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001f82:	2200      	movs	r2, #0
 8001f84:	2100      	movs	r1, #0
 8001f86:	2007      	movs	r0, #7
 8001f88:	f005 fd07 	bl	800799a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001f8c:	2007      	movs	r0, #7
 8001f8e:	f005 fd20 	bl	80079d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001f92:	2200      	movs	r2, #0
 8001f94:	2101      	movs	r1, #1
 8001f96:	2017      	movs	r0, #23
 8001f98:	f005 fcff 	bl	800799a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001f9c:	2017      	movs	r0, #23
 8001f9e:	f005 fd18 	bl	80079d2 <HAL_NVIC_EnableIRQ>

}
 8001fa2:	bf00      	nop
 8001fa4:	3728      	adds	r7, #40	; 0x28
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40020000 	.word	0x40020000
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	40020800 	.word	0x40020800
 8001fbc:	40020c00 	.word	0x40020c00

08001fc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fc4:	b672      	cpsid	i
}
 8001fc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fc8:	e7fe      	b.n	8001fc8 <Error_Handler+0x8>

08001fca <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001fca:	b480      	push	{r7}
 8001fcc:	b083      	sub	sp, #12
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	4a04      	ldr	r2, [pc, #16]	; (8002008 <_ZN3ros3MsgC1Ev+0x1c>)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	08010a94 	.word	0x08010a94

0800200c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
      data()
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff ffe8 	bl	8001fec <_ZN3ros3MsgC1Ev>
 800201c:	4a06      	ldr	r2, [pc, #24]	; (8002038 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3304      	adds	r3, #4
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff ffcf 	bl	8001fca <_ZN3ros4TimeC1Ev>
    {
    }
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4618      	mov	r0, r3
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	08010a7c 	.word	0x08010a7c

0800203c <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6859      	ldr	r1, [r3, #4]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	4413      	add	r3, r2
 8002054:	b2ca      	uxtb	r2, r1
 8002056:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	0a19      	lsrs	r1, r3, #8
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	3301      	adds	r3, #1
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	4413      	add	r3, r2
 8002066:	b2ca      	uxtb	r2, r1
 8002068:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	0c19      	lsrs	r1, r3, #16
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	3302      	adds	r3, #2
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	4413      	add	r3, r2
 8002078:	b2ca      	uxtb	r2, r1
 800207a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	0e19      	lsrs	r1, r3, #24
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	3303      	adds	r3, #3
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	4413      	add	r3, r2
 800208a:	b2ca      	uxtb	r2, r1
 800208c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	3304      	adds	r3, #4
 8002092:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6899      	ldr	r1, [r3, #8]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	4413      	add	r3, r2
 800209e:	b2ca      	uxtb	r2, r1
 80020a0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	0a19      	lsrs	r1, r3, #8
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	3301      	adds	r3, #1
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	4413      	add	r3, r2
 80020b0:	b2ca      	uxtb	r2, r1
 80020b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	0c19      	lsrs	r1, r3, #16
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	3302      	adds	r3, #2
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	4413      	add	r3, r2
 80020c2:	b2ca      	uxtb	r2, r1
 80020c4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	0e19      	lsrs	r1, r3, #24
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	3303      	adds	r3, #3
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	4413      	add	r3, r2
 80020d4:	b2ca      	uxtb	r2, r1
 80020d6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	3304      	adds	r3, #4
 80020dc:	60fb      	str	r3, [r7, #12]
      return offset;
 80020de:	68fb      	ldr	r3, [r7, #12]
    }
 80020e0:	4618      	mov	r0, r3
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	4413      	add	r3, r2
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	461a      	mov	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	3301      	adds	r3, #1
 8002110:	6839      	ldr	r1, [r7, #0]
 8002112:	440b      	add	r3, r1
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	021b      	lsls	r3, r3, #8
 8002118:	431a      	orrs	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	3302      	adds	r3, #2
 8002126:	6839      	ldr	r1, [r7, #0]
 8002128:	440b      	add	r3, r1
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	041b      	lsls	r3, r3, #16
 800212e:	431a      	orrs	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	3303      	adds	r3, #3
 800213c:	6839      	ldr	r1, [r7, #0]
 800213e:	440b      	add	r3, r1
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	061b      	lsls	r3, r3, #24
 8002144:	431a      	orrs	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	3304      	adds	r3, #4
 800214e:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	4413      	add	r3, r2
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	461a      	mov	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689a      	ldr	r2, [r3, #8]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	3301      	adds	r3, #1
 8002166:	6839      	ldr	r1, [r7, #0]
 8002168:	440b      	add	r3, r1
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	021b      	lsls	r3, r3, #8
 800216e:	431a      	orrs	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	3302      	adds	r3, #2
 800217c:	6839      	ldr	r1, [r7, #0]
 800217e:	440b      	add	r3, r1
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	041b      	lsls	r3, r3, #16
 8002184:	431a      	orrs	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	3303      	adds	r3, #3
 8002192:	6839      	ldr	r1, [r7, #0]
 8002194:	440b      	add	r3, r1
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	061b      	lsls	r3, r3, #24
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	3304      	adds	r3, #4
 80021a4:	60fb      	str	r3, [r7, #12]
     return offset;
 80021a6:	68fb      	ldr	r3, [r7, #12]
    }
 80021a8:	4618      	mov	r0, r3
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	4b03      	ldr	r3, [pc, #12]	; (80021cc <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80021be:	4618      	mov	r0, r3
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	08010670 	.word	0x08010670

080021d0 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	4b03      	ldr	r3, [pc, #12]	; (80021e8 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80021da:	4618      	mov	r0, r3
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	08010680 	.word	0x08010680

080021ec <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff fef8 	bl	8001fec <_ZN3ros3MsgC1Ev>
 80021fc:	4a0b      	ldr	r2, [pc, #44]	; (800222c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	809a      	strh	r2, [r3, #4]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a09      	ldr	r2, [pc, #36]	; (8002230 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800220c:	609a      	str	r2, [r3, #8]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a07      	ldr	r2, [pc, #28]	; (8002230 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002212:	60da      	str	r2, [r3, #12]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a06      	ldr	r2, [pc, #24]	; (8002230 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002218:	611a      	str	r2, [r3, #16]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	615a      	str	r2, [r3, #20]
    {
    }
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	08010a64 	.word	0x08010a64
 8002230:	080106a4 	.word	0x080106a4

08002234 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002234:	b580      	push	{r7, lr}
 8002236:	b088      	sub	sp, #32
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800223e:	2300      	movs	r3, #0
 8002240:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	8899      	ldrh	r1, [r3, #4]
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	4413      	add	r3, r2
 800224c:	b2ca      	uxtb	r2, r1
 800224e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	889b      	ldrh	r3, [r3, #4]
 8002254:	0a1b      	lsrs	r3, r3, #8
 8002256:	b299      	uxth	r1, r3
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	3301      	adds	r3, #1
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	4413      	add	r3, r2
 8002260:	b2ca      	uxtb	r2, r1
 8002262:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	3302      	adds	r3, #2
 8002268:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	4618      	mov	r0, r3
 8002270:	f7fd ffae 	bl	80001d0 <strlen>
 8002274:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	4413      	add	r3, r2
 800227c:	69b9      	ldr	r1, [r7, #24]
 800227e:	4618      	mov	r0, r3
 8002280:	f003 fc96 	bl	8005bb0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	3304      	adds	r3, #4
 8002288:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	18d0      	adds	r0, r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4619      	mov	r1, r3
 8002298:	f009 fd4c 	bl	800bd34 <memcpy>
      offset += length_topic_name;
 800229c:	69fa      	ldr	r2, [r7, #28]
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	4413      	add	r3, r2
 80022a2:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7fd ff91 	bl	80001d0 <strlen>
 80022ae:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	4413      	add	r3, r2
 80022b6:	6979      	ldr	r1, [r7, #20]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f003 fc79 	bl	8005bb0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	3304      	adds	r3, #4
 80022c2:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	18d0      	adds	r0, r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	4619      	mov	r1, r3
 80022d2:	f009 fd2f 	bl	800bd34 <memcpy>
      offset += length_message_type;
 80022d6:	69fa      	ldr	r2, [r7, #28]
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	4413      	add	r3, r2
 80022dc:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7fd ff74 	bl	80001d0 <strlen>
 80022e8:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	4413      	add	r3, r2
 80022f0:	6939      	ldr	r1, [r7, #16]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f003 fc5c 	bl	8005bb0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	3304      	adds	r3, #4
 80022fc:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	18d0      	adds	r0, r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	4619      	mov	r1, r3
 800230c:	f009 fd12 	bl	800bd34 <memcpy>
      offset += length_md5sum;
 8002310:	69fa      	ldr	r2, [r7, #28]
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	4413      	add	r3, r2
 8002316:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800231e:	68f9      	ldr	r1, [r7, #12]
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	4413      	add	r3, r2
 8002326:	b2ca      	uxtb	r2, r1
 8002328:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	0a19      	lsrs	r1, r3, #8
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	3301      	adds	r3, #1
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	4413      	add	r3, r2
 8002336:	b2ca      	uxtb	r2, r1
 8002338:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	0c19      	lsrs	r1, r3, #16
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	3302      	adds	r3, #2
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	4413      	add	r3, r2
 8002346:	b2ca      	uxtb	r2, r1
 8002348:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	0e19      	lsrs	r1, r3, #24
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	3303      	adds	r3, #3
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	4413      	add	r3, r2
 8002356:	b2ca      	uxtb	r2, r1
 8002358:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	3304      	adds	r3, #4
 800235e:	61fb      	str	r3, [r7, #28]
      return offset;
 8002360:	69fb      	ldr	r3, [r7, #28]
    }
 8002362:	4618      	mov	r0, r3
 8002364:	3720      	adds	r7, #32
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800236a:	b580      	push	{r7, lr}
 800236c:	b08a      	sub	sp, #40	; 0x28
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
 8002372:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002374:	2300      	movs	r3, #0
 8002376:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	4413      	add	r3, r2
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	b29a      	uxth	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	889b      	ldrh	r3, [r3, #4]
 800238a:	b21a      	sxth	r2, r3
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	3301      	adds	r3, #1
 8002390:	6839      	ldr	r1, [r7, #0]
 8002392:	440b      	add	r3, r1
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	021b      	lsls	r3, r3, #8
 8002398:	b21b      	sxth	r3, r3
 800239a:	4313      	orrs	r3, r2
 800239c:	b21b      	sxth	r3, r3
 800239e:	b29a      	uxth	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	3302      	adds	r3, #2
 80023a8:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	441a      	add	r2, r3
 80023b0:	f107 0314 	add.w	r3, r7, #20
 80023b4:	4611      	mov	r1, r2
 80023b6:	4618      	mov	r0, r3
 80023b8:	f003 fc18 	bl	8005bec <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	3304      	adds	r3, #4
 80023c0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	627b      	str	r3, [r7, #36]	; 0x24
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	4413      	add	r3, r2
 80023cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d20c      	bcs.n	80023ec <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	441a      	add	r2, r3
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023da:	3b01      	subs	r3, #1
 80023dc:	6839      	ldr	r1, [r7, #0]
 80023de:	440b      	add	r3, r1
 80023e0:	7812      	ldrb	r2, [r2, #0]
 80023e2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	3301      	adds	r3, #1
 80023e8:	627b      	str	r3, [r7, #36]	; 0x24
 80023ea:	e7ec      	b.n	80023c6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	4413      	add	r3, r2
 80023f2:	3b01      	subs	r3, #1
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	4413      	add	r3, r2
 80023f8:	2200      	movs	r2, #0
 80023fa:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	3b01      	subs	r3, #1
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	441a      	add	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	4413      	add	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	441a      	add	r2, r3
 8002416:	f107 0310 	add.w	r3, r7, #16
 800241a:	4611      	mov	r1, r2
 800241c:	4618      	mov	r0, r3
 800241e:	f003 fbe5 	bl	8005bec <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	3304      	adds	r3, #4
 8002426:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	623b      	str	r3, [r7, #32]
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4413      	add	r3, r2
 8002432:	6a3a      	ldr	r2, [r7, #32]
 8002434:	429a      	cmp	r2, r3
 8002436:	d20c      	bcs.n	8002452 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	6a3b      	ldr	r3, [r7, #32]
 800243c:	441a      	add	r2, r3
 800243e:	6a3b      	ldr	r3, [r7, #32]
 8002440:	3b01      	subs	r3, #1
 8002442:	6839      	ldr	r1, [r7, #0]
 8002444:	440b      	add	r3, r1
 8002446:	7812      	ldrb	r2, [r2, #0]
 8002448:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800244a:	6a3b      	ldr	r3, [r7, #32]
 800244c:	3301      	adds	r3, #1
 800244e:	623b      	str	r3, [r7, #32]
 8002450:	e7ec      	b.n	800242c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	4413      	add	r3, r2
 8002458:	3b01      	subs	r3, #1
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	4413      	add	r3, r2
 800245e:	2200      	movs	r2, #0
 8002460:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	3b01      	subs	r3, #1
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	441a      	add	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4413      	add	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	441a      	add	r2, r3
 800247c:	f107 030c 	add.w	r3, r7, #12
 8002480:	4611      	mov	r1, r2
 8002482:	4618      	mov	r0, r3
 8002484:	f003 fbb2 	bl	8005bec <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	3304      	adds	r3, #4
 800248c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	61fb      	str	r3, [r7, #28]
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	4413      	add	r3, r2
 8002498:	69fa      	ldr	r2, [r7, #28]
 800249a:	429a      	cmp	r2, r3
 800249c:	d20c      	bcs.n	80024b8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	441a      	add	r2, r3
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	6839      	ldr	r1, [r7, #0]
 80024aa:	440b      	add	r3, r1
 80024ac:	7812      	ldrb	r2, [r2, #0]
 80024ae:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	3301      	adds	r3, #1
 80024b4:	61fb      	str	r3, [r7, #28]
 80024b6:	e7ec      	b.n	8002492 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	4413      	add	r3, r2
 80024be:	3b01      	subs	r3, #1
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	4413      	add	r3, r2
 80024c4:	2200      	movs	r2, #0
 80024c6:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	441a      	add	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4413      	add	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80024dc:	2300      	movs	r3, #0
 80024de:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	6839      	ldr	r1, [r7, #0]
 80024e6:	440a      	add	r2, r1
 80024e8:	7812      	ldrb	r2, [r2, #0]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	3301      	adds	r3, #1
 80024f4:	6839      	ldr	r1, [r7, #0]
 80024f6:	440b      	add	r3, r1
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	021b      	lsls	r3, r3, #8
 80024fc:	4313      	orrs	r3, r2
 80024fe:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002500:	68ba      	ldr	r2, [r7, #8]
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	3302      	adds	r3, #2
 8002506:	6839      	ldr	r1, [r7, #0]
 8002508:	440b      	add	r3, r1
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	041b      	lsls	r3, r3, #16
 800250e:	4313      	orrs	r3, r2
 8002510:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	3303      	adds	r3, #3
 8002518:	6839      	ldr	r1, [r7, #0]
 800251a:	440b      	add	r3, r1
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	061b      	lsls	r3, r3, #24
 8002520:	4313      	orrs	r3, r2
 8002522:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002524:	68ba      	ldr	r2, [r7, #8]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	3304      	adds	r3, #4
 800252e:	61bb      	str	r3, [r7, #24]
     return offset;
 8002530:	69bb      	ldr	r3, [r7, #24]
    }
 8002532:	4618      	mov	r0, r3
 8002534:	3728      	adds	r7, #40	; 0x28
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	4b03      	ldr	r3, [pc, #12]	; (8002554 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8002546:	4618      	mov	r0, r3
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	080106a8 	.word	0x080106a8

08002558 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	4b03      	ldr	r3, [pc, #12]	; (8002570 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8002562:	4618      	mov	r0, r3
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	080106c4 	.word	0x080106c4

08002574 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff fd34 	bl	8001fec <_ZN3ros3MsgC1Ev>
 8002584:	4a06      	ldr	r2, [pc, #24]	; (80025a0 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	711a      	strb	r2, [r3, #4]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a04      	ldr	r2, [pc, #16]	; (80025a4 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002594:	609a      	str	r2, [r3, #8]
    {
    }
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4618      	mov	r0, r3
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	08010a4c 	.word	0x08010a4c
 80025a4:	080106a4 	.word	0x080106a4

080025a8 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	4413      	add	r3, r2
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	7912      	ldrb	r2, [r2, #4]
 80025c0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	3301      	adds	r3, #1
 80025c6:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fd fdff 	bl	80001d0 <strlen>
 80025d2:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	683a      	ldr	r2, [r7, #0]
 80025d8:	4413      	add	r3, r2
 80025da:	68b9      	ldr	r1, [r7, #8]
 80025dc:	4618      	mov	r0, r3
 80025de:	f003 fae7 	bl	8005bb0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	3304      	adds	r3, #4
 80025e6:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	18d0      	adds	r0, r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	4619      	mov	r1, r3
 80025f6:	f009 fb9d 	bl	800bd34 <memcpy>
      offset += length_msg;
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	4413      	add	r3, r2
 8002600:	60fb      	str	r3, [r7, #12]
      return offset;
 8002602:	68fb      	ldr	r3, [r7, #12]
    }
 8002604:	4618      	mov	r0, r3
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002616:	2300      	movs	r3, #0
 8002618:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	4413      	add	r3, r2
 8002620:	781a      	ldrb	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	3301      	adds	r3, #1
 800262a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	441a      	add	r2, r3
 8002632:	f107 030c 	add.w	r3, r7, #12
 8002636:	4611      	mov	r1, r2
 8002638:	4618      	mov	r0, r3
 800263a:	f003 fad7 	bl	8005bec <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	3304      	adds	r3, #4
 8002642:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	617b      	str	r3, [r7, #20]
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	4413      	add	r3, r2
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	429a      	cmp	r2, r3
 8002652:	d20c      	bcs.n	800266e <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	441a      	add	r2, r3
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	3b01      	subs	r3, #1
 800265e:	6839      	ldr	r1, [r7, #0]
 8002660:	440b      	add	r3, r1
 8002662:	7812      	ldrb	r2, [r2, #0]
 8002664:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	3301      	adds	r3, #1
 800266a:	617b      	str	r3, [r7, #20]
 800266c:	e7ec      	b.n	8002648 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4413      	add	r3, r2
 8002674:	3b01      	subs	r3, #1
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	4413      	add	r3, r2
 800267a:	2200      	movs	r2, #0
 800267c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	3b01      	subs	r3, #1
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	441a      	add	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	4413      	add	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
     return offset;
 8002692:	693b      	ldr	r3, [r7, #16]
    }
 8002694:	4618      	mov	r0, r3
 8002696:	3718      	adds	r7, #24
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	4b03      	ldr	r3, [pc, #12]	; (80026b4 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80026a6:	4618      	mov	r0, r3
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	080106e8 	.word	0x080106e8

080026b8 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	4b03      	ldr	r3, [pc, #12]	; (80026d0 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80026c2:	4618      	mov	r0, r3
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	080106fc 	.word	0x080106fc

080026d4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff fc84 	bl	8001fec <_ZN3ros3MsgC1Ev>
 80026e4:	4a11      	ldr	r2, [pc, #68]	; (800272c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	605a      	str	r2, [r3, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	609a      	str	r2, [r3, #8]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	60da      	str	r2, [r3, #12]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	611a      	str	r2, [r3, #16]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f04f 0200 	mov.w	r2, #0
 8002708:	615a      	str	r2, [r3, #20]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	619a      	str	r2, [r3, #24]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	61da      	str	r2, [r3, #28]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	621a      	str	r2, [r3, #32]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4618      	mov	r0, r3
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	08010a34 	.word	0x08010a34

08002730 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002730:	b580      	push	{r7, lr}
 8002732:	b08a      	sub	sp, #40	; 0x28
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800273a:	2300      	movs	r3, #0
 800273c:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6859      	ldr	r1, [r3, #4]
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	4413      	add	r3, r2
 8002748:	b2ca      	uxtb	r2, r1
 800274a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	0a19      	lsrs	r1, r3, #8
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	3301      	adds	r3, #1
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	4413      	add	r3, r2
 800275a:	b2ca      	uxtb	r2, r1
 800275c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	0c19      	lsrs	r1, r3, #16
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	3302      	adds	r3, #2
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	4413      	add	r3, r2
 800276c:	b2ca      	uxtb	r2, r1
 800276e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	0e19      	lsrs	r1, r3, #24
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	3303      	adds	r3, #3
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	4413      	add	r3, r2
 800277e:	b2ca      	uxtb	r2, r1
 8002780:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002784:	3304      	adds	r3, #4
 8002786:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002788:	2300      	movs	r3, #0
 800278a:	623b      	str	r3, [r7, #32]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	6a3a      	ldr	r2, [r7, #32]
 8002792:	429a      	cmp	r2, r3
 8002794:	d22b      	bcs.n	80027ee <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68da      	ldr	r2, [r3, #12]
 800279a:	6a3b      	ldr	r3, [r7, #32]
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80027a4:	6939      	ldr	r1, [r7, #16]
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	4413      	add	r3, r2
 80027ac:	b2ca      	uxtb	r2, r1
 80027ae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	0a19      	lsrs	r1, r3, #8
 80027b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b6:	3301      	adds	r3, #1
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	4413      	add	r3, r2
 80027bc:	b2ca      	uxtb	r2, r1
 80027be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	0c19      	lsrs	r1, r3, #16
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	3302      	adds	r3, #2
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	4413      	add	r3, r2
 80027cc:	b2ca      	uxtb	r2, r1
 80027ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	0e19      	lsrs	r1, r3, #24
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	3303      	adds	r3, #3
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	4413      	add	r3, r2
 80027dc:	b2ca      	uxtb	r2, r1
 80027de:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	3304      	adds	r3, #4
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80027e6:	6a3b      	ldr	r3, [r7, #32]
 80027e8:	3301      	adds	r3, #1
 80027ea:	623b      	str	r3, [r7, #32]
 80027ec:	e7ce      	b.n	800278c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6919      	ldr	r1, [r3, #16]
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	4413      	add	r3, r2
 80027f8:	b2ca      	uxtb	r2, r1
 80027fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	0a19      	lsrs	r1, r3, #8
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	3301      	adds	r3, #1
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	4413      	add	r3, r2
 800280a:	b2ca      	uxtb	r2, r1
 800280c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	0c19      	lsrs	r1, r3, #16
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	3302      	adds	r3, #2
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	4413      	add	r3, r2
 800281c:	b2ca      	uxtb	r2, r1
 800281e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	0e19      	lsrs	r1, r3, #24
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	3303      	adds	r3, #3
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	4413      	add	r3, r2
 800282e:	b2ca      	uxtb	r2, r1
 8002830:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	3304      	adds	r3, #4
 8002836:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002838:	2300      	movs	r3, #0
 800283a:	61fb      	str	r3, [r7, #28]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	69fa      	ldr	r2, [r7, #28]
 8002842:	429a      	cmp	r2, r3
 8002844:	d22b      	bcs.n	800289e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	699a      	ldr	r2, [r3, #24]
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002854:	68f9      	ldr	r1, [r7, #12]
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	4413      	add	r3, r2
 800285c:	b2ca      	uxtb	r2, r1
 800285e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	0a19      	lsrs	r1, r3, #8
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	3301      	adds	r3, #1
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	4413      	add	r3, r2
 800286c:	b2ca      	uxtb	r2, r1
 800286e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	0c19      	lsrs	r1, r3, #16
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	3302      	adds	r3, #2
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	4413      	add	r3, r2
 800287c:	b2ca      	uxtb	r2, r1
 800287e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	0e19      	lsrs	r1, r3, #24
 8002884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002886:	3303      	adds	r3, #3
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	4413      	add	r3, r2
 800288c:	b2ca      	uxtb	r2, r1
 800288e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	3304      	adds	r3, #4
 8002894:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	3301      	adds	r3, #1
 800289a:	61fb      	str	r3, [r7, #28]
 800289c:	e7ce      	b.n	800283c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69d9      	ldr	r1, [r3, #28]
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	4413      	add	r3, r2
 80028a8:	b2ca      	uxtb	r2, r1
 80028aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	0a19      	lsrs	r1, r3, #8
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	3301      	adds	r3, #1
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	4413      	add	r3, r2
 80028ba:	b2ca      	uxtb	r2, r1
 80028bc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	0c19      	lsrs	r1, r3, #16
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	3302      	adds	r3, #2
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	4413      	add	r3, r2
 80028cc:	b2ca      	uxtb	r2, r1
 80028ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	0e19      	lsrs	r1, r3, #24
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	3303      	adds	r3, #3
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	4413      	add	r3, r2
 80028de:	b2ca      	uxtb	r2, r1
 80028e0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	3304      	adds	r3, #4
 80028e6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80028e8:	2300      	movs	r3, #0
 80028ea:	61bb      	str	r3, [r7, #24]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	69db      	ldr	r3, [r3, #28]
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d228      	bcs.n	8002948 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f7fd fc64 	bl	80001d0 <strlen>
 8002908:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	4413      	add	r3, r2
 8002910:	6979      	ldr	r1, [r7, #20]
 8002912:	4618      	mov	r0, r3
 8002914:	f003 f94c 	bl	8005bb0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291a:	3304      	adds	r3, #4
 800291c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	18d0      	adds	r0, r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4413      	add	r3, r2
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	4619      	mov	r1, r3
 8002934:	f009 f9fe 	bl	800bd34 <memcpy>
      offset += length_stringsi;
 8002938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	4413      	add	r3, r2
 800293e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	3301      	adds	r3, #1
 8002944:	61bb      	str	r3, [r7, #24]
 8002946:	e7d1      	b.n	80028ec <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800294a:	4618      	mov	r0, r3
 800294c:	3728      	adds	r7, #40	; 0x28
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002952:	b580      	push	{r7, lr}
 8002954:	b08e      	sub	sp, #56	; 0x38
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800295c:	2300      	movs	r3, #0
 800295e:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	4413      	add	r3, r2
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800296a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800296c:	3301      	adds	r3, #1
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	4413      	add	r3, r2
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	021b      	lsls	r3, r3, #8
 8002976:	6a3a      	ldr	r2, [r7, #32]
 8002978:	4313      	orrs	r3, r2
 800297a:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800297c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800297e:	3302      	adds	r3, #2
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	4413      	add	r3, r2
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	041b      	lsls	r3, r3, #16
 8002988:	6a3a      	ldr	r2, [r7, #32]
 800298a:	4313      	orrs	r3, r2
 800298c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800298e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002990:	3303      	adds	r3, #3
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	4413      	add	r3, r2
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	061b      	lsls	r3, r3, #24
 800299a:	6a3a      	ldr	r2, [r7, #32]
 800299c:	4313      	orrs	r3, r2
 800299e:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80029a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029a2:	3304      	adds	r3, #4
 80029a4:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	6a3a      	ldr	r2, [r7, #32]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d90a      	bls.n	80029c6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68da      	ldr	r2, [r3, #12]
 80029b4:	6a3b      	ldr	r3, [r7, #32]
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4619      	mov	r1, r3
 80029ba:	4610      	mov	r0, r2
 80029bc:	f00a f84a 	bl	800ca54 <realloc>
 80029c0:	4602      	mov	r2, r0
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a3a      	ldr	r2, [r7, #32]
 80029ca:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80029cc:	2300      	movs	r3, #0
 80029ce:	633b      	str	r3, [r7, #48]	; 0x30
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d236      	bcs.n	8002a48 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80029da:	2300      	movs	r3, #0
 80029dc:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029e2:	6839      	ldr	r1, [r7, #0]
 80029e4:	440a      	add	r2, r1
 80029e6:	7812      	ldrb	r2, [r2, #0]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80029ec:	697a      	ldr	r2, [r7, #20]
 80029ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029f0:	3301      	adds	r3, #1
 80029f2:	6839      	ldr	r1, [r7, #0]
 80029f4:	440b      	add	r3, r1
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	021b      	lsls	r3, r3, #8
 80029fa:	4313      	orrs	r3, r2
 80029fc:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a02:	3302      	adds	r3, #2
 8002a04:	6839      	ldr	r1, [r7, #0]
 8002a06:	440b      	add	r3, r1
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	041b      	lsls	r3, r3, #16
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a14:	3303      	adds	r3, #3
 8002a16:	6839      	ldr	r1, [r7, #0]
 8002a18:	440b      	add	r3, r1
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	061b      	lsls	r3, r3, #24
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a2a:	3304      	adds	r3, #4
 8002a2c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68da      	ldr	r2, [r3, #12]
 8002a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	3208      	adds	r2, #8
 8002a3c:	6812      	ldr	r2, [r2, #0]
 8002a3e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a42:	3301      	adds	r3, #1
 8002a44:	633b      	str	r3, [r7, #48]	; 0x30
 8002a46:	e7c3      	b.n	80029d0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a54:	3301      	adds	r3, #1
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	4413      	add	r3, r2
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	021b      	lsls	r3, r3, #8
 8002a5e:	69fa      	ldr	r2, [r7, #28]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a66:	3302      	adds	r3, #2
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	041b      	lsls	r3, r3, #16
 8002a70:	69fa      	ldr	r2, [r7, #28]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a78:	3303      	adds	r3, #3
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	061b      	lsls	r3, r3, #24
 8002a82:	69fa      	ldr	r2, [r7, #28]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a8a:	3304      	adds	r3, #4
 8002a8c:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	69fa      	ldr	r2, [r7, #28]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d90a      	bls.n	8002aae <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	699a      	ldr	r2, [r3, #24]
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	4610      	mov	r0, r2
 8002aa4:	f009 ffd6 	bl	800ca54 <realloc>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69fa      	ldr	r2, [r7, #28]
 8002ab2:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d236      	bcs.n	8002b30 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002aca:	6839      	ldr	r1, [r7, #0]
 8002acc:	440a      	add	r2, r1
 8002ace:	7812      	ldrb	r2, [r2, #0]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad8:	3301      	adds	r3, #1
 8002ada:	6839      	ldr	r1, [r7, #0]
 8002adc:	440b      	add	r3, r1
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	021b      	lsls	r3, r3, #8
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aea:	3302      	adds	r3, #2
 8002aec:	6839      	ldr	r1, [r7, #0]
 8002aee:	440b      	add	r3, r1
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	041b      	lsls	r3, r3, #16
 8002af4:	4313      	orrs	r3, r2
 8002af6:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002afc:	3303      	adds	r3, #3
 8002afe:	6839      	ldr	r1, [r7, #0]
 8002b00:	440b      	add	r3, r1
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	061b      	lsls	r3, r3, #24
 8002b06:	4313      	orrs	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b12:	3304      	adds	r3, #4
 8002b14:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	699a      	ldr	r2, [r3, #24]
 8002b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	3214      	adds	r2, #20
 8002b24:	6812      	ldr	r2, [r2, #0]
 8002b26:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b2e:	e7c3      	b.n	8002ab8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	4413      	add	r3, r2
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	4413      	add	r3, r2
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	021b      	lsls	r3, r3, #8
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b4e:	3302      	adds	r3, #2
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	4413      	add	r3, r2
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	041b      	lsls	r3, r3, #16
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b60:	3303      	adds	r3, #3
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	4413      	add	r3, r2
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	061b      	lsls	r3, r3, #24
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b72:	3304      	adds	r3, #4
 8002b74:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d90a      	bls.n	8002b96 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4610      	mov	r0, r2
 8002b8c:	f009 ff62 	bl	800ca54 <realloc>
 8002b90:	4602      	mov	r2, r0
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	69db      	ldr	r3, [r3, #28]
 8002ba4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d23f      	bcs.n	8002c2a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	441a      	add	r2, r3
 8002bb0:	f107 030c 	add.w	r3, r7, #12
 8002bb4:	4611      	mov	r1, r2
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f003 f818 	bl	8005bec <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bbe:	3304      	adds	r3, #4
 8002bc0:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	4413      	add	r3, r2
 8002bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d20c      	bcs.n	8002bec <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd6:	441a      	add	r2, r3
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	6839      	ldr	r1, [r7, #0]
 8002bde:	440b      	add	r3, r1
 8002be0:	7812      	ldrb	r2, [r2, #0]
 8002be2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be6:	3301      	adds	r3, #1
 8002be8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bea:	e7ec      	b.n	8002bc6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002bec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	441a      	add	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002c08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	3220      	adds	r2, #32
 8002c1e:	6812      	ldr	r2, [r2, #0]
 8002c20:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c24:	3301      	adds	r3, #1
 8002c26:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c28:	e7ba      	b.n	8002ba0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8002c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3738      	adds	r7, #56	; 0x38
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	4b03      	ldr	r3, [pc, #12]	; (8002c4c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002c3e:	4618      	mov	r0, r3
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	08010910 	.word	0x08010910

08002c50 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	4b03      	ldr	r3, [pc, #12]	; (8002c68 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	08010720 	.word	0x08010720

08002c6c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
 8002c78:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	605a      	str	r2, [r3, #4]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	611a      	str	r2, [r3, #16]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b082      	sub	sp, #8
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
 8002ca2:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68d8      	ldr	r0, [r3, #12]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6891      	ldr	r1, [r2, #8]
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	4798      	blx	r3
 8002cb8:	4603      	mov	r3, r0
  };
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691b      	ldr	r3, [r3, #16]
  }
 8002cce:	4618      	mov	r0, r3
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002cda:	b480      	push	{r7}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a0a      	ldr	r2, [pc, #40]	; (8002d34 <_ZN13STM32HardwareC1Ev+0x34>)
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr
 8002d34:	20001314 	.word	0x20001314

08002d38 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f804 	bl	8002d4e <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002d46:	bf00      	nop
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b082      	sub	sp, #8
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6818      	ldr	r0, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d62:	4619      	mov	r1, r3
 8002d64:	f007 fe4e 	bl	800aa04 <HAL_UART_Receive_DMA>
    }
 8002d68:	bf00      	nop
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002d70:	b590      	push	{r4, r7, lr}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002d78:	f04f 33ff 	mov.w	r3, #4294967295
 8002d7c:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f7ff ffa8 	bl	8002cda <_ZN13STM32Hardware10getRdmaIndEv>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	429c      	cmp	r4, r3
 8002d8e:	bf14      	ite	ne
 8002d90:	2301      	movne	r3, #1
 8002d92:	2300      	moveq	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d012      	beq.n	8002dc0 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002da0:	1c59      	adds	r1, r3, #1
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	4413      	add	r3, r2
 8002dac:	791b      	ldrb	r3, [r3, #4]
 8002dae:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002db6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
    }
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd90      	pop	{r4, r7, pc}
	...

08002dcc <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b20      	cmp	r3, #32
 8002de0:	d108      	bne.n	8002df4 <_ZN13STM32Hardware5flushEv+0x28>
 8002de2:	4b28      	ldr	r3, [pc, #160]	; (8002e84 <_ZN13STM32Hardware5flushEv+0xb8>)
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	f083 0301 	eor.w	r3, r3, #1
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <_ZN13STM32Hardware5flushEv+0x28>
 8002df0:	2301      	movs	r3, #1
 8002df2:	e000      	b.n	8002df6 <_ZN13STM32Hardware5flushEv+0x2a>
 8002df4:	2300      	movs	r3, #0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d03f      	beq.n	8002e7a <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 8002dfa:	4b22      	ldr	r3, [pc, #136]	; (8002e84 <_ZN13STM32Hardware5flushEv+0xb8>)
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d031      	beq.n	8002e74 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d20a      	bcs.n	8002e36 <_ZN13STM32Hardware5flushEv+0x6a>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	e006      	b.n	8002e44 <_ZN13STM32Hardware5flushEv+0x78>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6818      	ldr	r0, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002e50:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	4413      	add	r3, r2
 8002e58:	89fa      	ldrh	r2, [r7, #14]
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	f007 fd54 	bl	800a908 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002e66:	89fb      	ldrh	r3, [r7, #14]
 8002e68:	4413      	add	r3, r2
 8002e6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8002e74:	4b03      	ldr	r3, [pc, #12]	; (8002e84 <_ZN13STM32Hardware5flushEv+0xb8>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	701a      	strb	r2, [r3, #0]
      }
    }
 8002e7a:	bf00      	nop
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	20000270 	.word	0x20000270

08002e88 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
      int n = length;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e9e:	bfa8      	it	ge
 8002ea0:	f44f 7300 	movge.w	r3, #512	; 0x200
 8002ea4:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002eac:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	bf28      	it	cs
 8002eb6:	4613      	movcs	r3, r2
 8002eb8:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002ec0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	68b9      	ldr	r1, [r7, #8]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f008 ff31 	bl	800bd34 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	4413      	add	r3, r2
 8002edc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d00b      	beq.n	8002f06 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	18d1      	adds	r1, r2, r3
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	461a      	mov	r2, r3
 8002f02:	f008 ff17 	bl	800bd34 <memcpy>
      }

      flush();
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f7ff ff60 	bl	8002dcc <_ZN13STM32Hardware5flushEv>
    }
 8002f0c:	bf00      	nop
 8002f0e:	3718      	adds	r7, #24
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	f004 fc56 	bl	80077cc <HAL_GetTick>
 8002f20:	4603      	mov	r3, r0
 8002f22:	4618      	mov	r0, r3
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <_ZN8std_msgs4Int8C1Ev>:
  {
    public:
      typedef int8_t _data_type;
      _data_type data;

    Int8():
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
      data(0)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7ff f858 	bl	8001fec <_ZN3ros3MsgC1Ev>
 8002f3c:	4a05      	ldr	r2, [pc, #20]	; (8002f54 <_ZN8std_msgs4Int8C1Ev+0x28>)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	711a      	strb	r2, [r3, #4]
    {
    }
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	080109f0 	.word	0x080109f0

08002f58 <_ZNK8std_msgs4Int89serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002f62:	2300      	movs	r3, #0
 8002f64:	60fb      	str	r3, [r7, #12]
      union {
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002f6c:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	4413      	add	r3, r2
 8002f74:	7a3a      	ldrb	r2, [r7, #8]
 8002f76:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	60fb      	str	r3, [r7, #12]
      return offset;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
    }
 8002f80:	4618      	mov	r0, r3
 8002f82:	3714      	adds	r7, #20
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <_ZN8std_msgs4Int811deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002f96:	2300      	movs	r3, #0
 8002f98:	60fb      	str	r3, [r7, #12]
      union {
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002f9e:	7a3a      	ldrb	r2, [r7, #8]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6839      	ldr	r1, [r7, #0]
 8002fa4:	440b      	add	r3, r1
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 8002fae:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	60fb      	str	r3, [r7, #12]
     return offset;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
    }
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
	...

08002fcc <_ZN8std_msgs4Int87getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Int8"; };
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	4b03      	ldr	r3, [pc, #12]	; (8002fe4 <_ZN8std_msgs4Int87getTypeEv+0x18>)
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	08010744 	.word	0x08010744

08002fe8 <_ZN8std_msgs4Int86getMD5Ev>:
    virtual const char * getMD5() override { return "27ffa0c9c4b8fb8492252bcad9e5c57b"; };
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	4b03      	ldr	r3, [pc, #12]	; (8003000 <_ZN8std_msgs4Int86getMD5Ev+0x18>)
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	08010754 	.word	0x08010754

08003004 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4618      	mov	r0, r3
 8003010:	f7fe ffec 	bl	8001fec <_ZN3ros3MsgC1Ev>
 8003014:	4a0e      	ldr	r2, [pc, #56]	; (8003050 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	f04f 0200 	mov.w	r2, #0
 8003020:	f04f 0300 	mov.w	r3, #0
 8003024:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	f04f 0200 	mov.w	r2, #0
 800302e:	f04f 0300 	mov.w	r3, #0
 8003032:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8003036:	6879      	ldr	r1, [r7, #4]
 8003038:	f04f 0200 	mov.w	r2, #0
 800303c:	f04f 0300 	mov.w	r3, #0
 8003040:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4618      	mov	r0, r3
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	080109d8 	.word	0x080109d8

08003054 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003054:	b480      	push	{r7}
 8003056:	b08b      	sub	sp, #44	; 0x2c
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800305e:	2300      	movs	r3, #0
 8003060:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003068:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 800306c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003070:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003072:	6838      	ldr	r0, [r7, #0]
 8003074:	4401      	add	r1, r0
 8003076:	b2d3      	uxtb	r3, r2
 8003078:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800307a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800307e:	f04f 0200 	mov.w	r2, #0
 8003082:	f04f 0300 	mov.w	r3, #0
 8003086:	0a02      	lsrs	r2, r0, #8
 8003088:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800308c:	0a0b      	lsrs	r3, r1, #8
 800308e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003090:	3101      	adds	r1, #1
 8003092:	6838      	ldr	r0, [r7, #0]
 8003094:	4401      	add	r1, r0
 8003096:	b2d3      	uxtb	r3, r2
 8003098:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800309a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800309e:	f04f 0200 	mov.w	r2, #0
 80030a2:	f04f 0300 	mov.w	r3, #0
 80030a6:	0c02      	lsrs	r2, r0, #16
 80030a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80030ac:	0c0b      	lsrs	r3, r1, #16
 80030ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030b0:	3102      	adds	r1, #2
 80030b2:	6838      	ldr	r0, [r7, #0]
 80030b4:	4401      	add	r1, r0
 80030b6:	b2d3      	uxtb	r3, r2
 80030b8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80030ba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80030be:	f04f 0200 	mov.w	r2, #0
 80030c2:	f04f 0300 	mov.w	r3, #0
 80030c6:	0e02      	lsrs	r2, r0, #24
 80030c8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80030cc:	0e0b      	lsrs	r3, r1, #24
 80030ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030d0:	3103      	adds	r1, #3
 80030d2:	6838      	ldr	r0, [r7, #0]
 80030d4:	4401      	add	r1, r0
 80030d6:	b2d3      	uxtb	r3, r2
 80030d8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80030da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80030de:	f04f 0200 	mov.w	r2, #0
 80030e2:	f04f 0300 	mov.w	r3, #0
 80030e6:	000a      	movs	r2, r1
 80030e8:	2300      	movs	r3, #0
 80030ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030ec:	3104      	adds	r1, #4
 80030ee:	6838      	ldr	r0, [r7, #0]
 80030f0:	4401      	add	r1, r0
 80030f2:	b2d3      	uxtb	r3, r2
 80030f4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80030f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80030fa:	f04f 0200 	mov.w	r2, #0
 80030fe:	f04f 0300 	mov.w	r3, #0
 8003102:	0a0a      	lsrs	r2, r1, #8
 8003104:	2300      	movs	r3, #0
 8003106:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003108:	3105      	adds	r1, #5
 800310a:	6838      	ldr	r0, [r7, #0]
 800310c:	4401      	add	r1, r0
 800310e:	b2d3      	uxtb	r3, r2
 8003110:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8003112:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003116:	f04f 0200 	mov.w	r2, #0
 800311a:	f04f 0300 	mov.w	r3, #0
 800311e:	0c0a      	lsrs	r2, r1, #16
 8003120:	2300      	movs	r3, #0
 8003122:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003124:	3106      	adds	r1, #6
 8003126:	6838      	ldr	r0, [r7, #0]
 8003128:	4401      	add	r1, r0
 800312a:	b2d3      	uxtb	r3, r2
 800312c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 800312e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003132:	f04f 0200 	mov.w	r2, #0
 8003136:	f04f 0300 	mov.w	r3, #0
 800313a:	0e0a      	lsrs	r2, r1, #24
 800313c:	2300      	movs	r3, #0
 800313e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003140:	3107      	adds	r1, #7
 8003142:	6838      	ldr	r0, [r7, #0]
 8003144:	4401      	add	r1, r0
 8003146:	b2d3      	uxtb	r3, r2
 8003148:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	3308      	adds	r3, #8
 800314e:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003156:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 800315a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800315e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003160:	6838      	ldr	r0, [r7, #0]
 8003162:	4401      	add	r1, r0
 8003164:	b2d3      	uxtb	r3, r2
 8003166:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8003168:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800316c:	f04f 0200 	mov.w	r2, #0
 8003170:	f04f 0300 	mov.w	r3, #0
 8003174:	0a02      	lsrs	r2, r0, #8
 8003176:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800317a:	0a0b      	lsrs	r3, r1, #8
 800317c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800317e:	3101      	adds	r1, #1
 8003180:	6838      	ldr	r0, [r7, #0]
 8003182:	4401      	add	r1, r0
 8003184:	b2d3      	uxtb	r3, r2
 8003186:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8003188:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	f04f 0300 	mov.w	r3, #0
 8003194:	0c02      	lsrs	r2, r0, #16
 8003196:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800319a:	0c0b      	lsrs	r3, r1, #16
 800319c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800319e:	3102      	adds	r1, #2
 80031a0:	6838      	ldr	r0, [r7, #0]
 80031a2:	4401      	add	r1, r0
 80031a4:	b2d3      	uxtb	r3, r2
 80031a6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 80031a8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80031ac:	f04f 0200 	mov.w	r2, #0
 80031b0:	f04f 0300 	mov.w	r3, #0
 80031b4:	0e02      	lsrs	r2, r0, #24
 80031b6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80031ba:	0e0b      	lsrs	r3, r1, #24
 80031bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031be:	3103      	adds	r1, #3
 80031c0:	6838      	ldr	r0, [r7, #0]
 80031c2:	4401      	add	r1, r0
 80031c4:	b2d3      	uxtb	r3, r2
 80031c6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80031c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80031cc:	f04f 0200 	mov.w	r2, #0
 80031d0:	f04f 0300 	mov.w	r3, #0
 80031d4:	000a      	movs	r2, r1
 80031d6:	2300      	movs	r3, #0
 80031d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031da:	3104      	adds	r1, #4
 80031dc:	6838      	ldr	r0, [r7, #0]
 80031de:	4401      	add	r1, r0
 80031e0:	b2d3      	uxtb	r3, r2
 80031e2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80031e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80031e8:	f04f 0200 	mov.w	r2, #0
 80031ec:	f04f 0300 	mov.w	r3, #0
 80031f0:	0a0a      	lsrs	r2, r1, #8
 80031f2:	2300      	movs	r3, #0
 80031f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031f6:	3105      	adds	r1, #5
 80031f8:	6838      	ldr	r0, [r7, #0]
 80031fa:	4401      	add	r1, r0
 80031fc:	b2d3      	uxtb	r3, r2
 80031fe:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8003200:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003204:	f04f 0200 	mov.w	r2, #0
 8003208:	f04f 0300 	mov.w	r3, #0
 800320c:	0c0a      	lsrs	r2, r1, #16
 800320e:	2300      	movs	r3, #0
 8003210:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003212:	3106      	adds	r1, #6
 8003214:	6838      	ldr	r0, [r7, #0]
 8003216:	4401      	add	r1, r0
 8003218:	b2d3      	uxtb	r3, r2
 800321a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 800321c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003220:	f04f 0200 	mov.w	r2, #0
 8003224:	f04f 0300 	mov.w	r3, #0
 8003228:	0e0a      	lsrs	r2, r1, #24
 800322a:	2300      	movs	r3, #0
 800322c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800322e:	3107      	adds	r1, #7
 8003230:	6838      	ldr	r0, [r7, #0]
 8003232:	4401      	add	r1, r0
 8003234:	b2d3      	uxtb	r3, r2
 8003236:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	3308      	adds	r3, #8
 800323c:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003244:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8003248:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800324c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800324e:	6838      	ldr	r0, [r7, #0]
 8003250:	4401      	add	r1, r0
 8003252:	b2d3      	uxtb	r3, r2
 8003254:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8003256:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800325a:	f04f 0200 	mov.w	r2, #0
 800325e:	f04f 0300 	mov.w	r3, #0
 8003262:	0a02      	lsrs	r2, r0, #8
 8003264:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003268:	0a0b      	lsrs	r3, r1, #8
 800326a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800326c:	3101      	adds	r1, #1
 800326e:	6838      	ldr	r0, [r7, #0]
 8003270:	4401      	add	r1, r0
 8003272:	b2d3      	uxtb	r3, r2
 8003274:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8003276:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800327a:	f04f 0200 	mov.w	r2, #0
 800327e:	f04f 0300 	mov.w	r3, #0
 8003282:	0c02      	lsrs	r2, r0, #16
 8003284:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003288:	0c0b      	lsrs	r3, r1, #16
 800328a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800328c:	3102      	adds	r1, #2
 800328e:	6838      	ldr	r0, [r7, #0]
 8003290:	4401      	add	r1, r0
 8003292:	b2d3      	uxtb	r3, r2
 8003294:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8003296:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800329a:	f04f 0200 	mov.w	r2, #0
 800329e:	f04f 0300 	mov.w	r3, #0
 80032a2:	0e02      	lsrs	r2, r0, #24
 80032a4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80032a8:	0e0b      	lsrs	r3, r1, #24
 80032aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032ac:	3103      	adds	r1, #3
 80032ae:	6838      	ldr	r0, [r7, #0]
 80032b0:	4401      	add	r1, r0
 80032b2:	b2d3      	uxtb	r3, r2
 80032b4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80032b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032ba:	f04f 0200 	mov.w	r2, #0
 80032be:	f04f 0300 	mov.w	r3, #0
 80032c2:	000a      	movs	r2, r1
 80032c4:	2300      	movs	r3, #0
 80032c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032c8:	3104      	adds	r1, #4
 80032ca:	6838      	ldr	r0, [r7, #0]
 80032cc:	4401      	add	r1, r0
 80032ce:	b2d3      	uxtb	r3, r2
 80032d0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80032d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032d6:	f04f 0200 	mov.w	r2, #0
 80032da:	f04f 0300 	mov.w	r3, #0
 80032de:	0a0a      	lsrs	r2, r1, #8
 80032e0:	2300      	movs	r3, #0
 80032e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032e4:	3105      	adds	r1, #5
 80032e6:	6838      	ldr	r0, [r7, #0]
 80032e8:	4401      	add	r1, r0
 80032ea:	b2d3      	uxtb	r3, r2
 80032ec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80032ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032f2:	f04f 0200 	mov.w	r2, #0
 80032f6:	f04f 0300 	mov.w	r3, #0
 80032fa:	0c0a      	lsrs	r2, r1, #16
 80032fc:	2300      	movs	r3, #0
 80032fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003300:	3106      	adds	r1, #6
 8003302:	6838      	ldr	r0, [r7, #0]
 8003304:	4401      	add	r1, r0
 8003306:	b2d3      	uxtb	r3, r2
 8003308:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800330a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800330e:	f04f 0200 	mov.w	r2, #0
 8003312:	f04f 0300 	mov.w	r3, #0
 8003316:	0e0a      	lsrs	r2, r1, #24
 8003318:	2300      	movs	r3, #0
 800331a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800331c:	3107      	adds	r1, #7
 800331e:	6838      	ldr	r0, [r7, #0]
 8003320:	4401      	add	r1, r0
 8003322:	b2d3      	uxtb	r3, r2
 8003324:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8003326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003328:	3308      	adds	r3, #8
 800332a:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 800332c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800332e:	4618      	mov	r0, r3
 8003330:	372c      	adds	r7, #44	; 0x2c
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800333a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800333e:	b0bb      	sub	sp, #236	; 0xec
 8003340:	af00      	add	r7, sp, #0
 8003342:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 8003346:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
    {
      int offset = 0;
 800334a:	2300      	movs	r3, #0
 800334c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	f04f 0300 	mov.w	r3, #0
 8003358:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800335c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8003360:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003364:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003368:	4413      	add	r3, r2
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	b2da      	uxtb	r2, r3
 800336e:	f04f 0300 	mov.w	r3, #0
 8003372:	ea40 0402 	orr.w	r4, r0, r2
 8003376:	ea41 0503 	orr.w	r5, r1, r3
 800337a:	e9c7 4536 	strd	r4, r5, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800337e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003386:	1c5a      	adds	r2, r3, #1
 8003388:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800338c:	4413      	add	r3, r2
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	b2da      	uxtb	r2, r3
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	f04f 0000 	mov.w	r0, #0
 800339a:	f04f 0100 	mov.w	r1, #0
 800339e:	0219      	lsls	r1, r3, #8
 80033a0:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80033a4:	0210      	lsls	r0, r2, #8
 80033a6:	ea44 0a00 	orr.w	sl, r4, r0
 80033aa:	ea45 0b01 	orr.w	fp, r5, r1
 80033ae:	e9c7 ab36 	strd	sl, fp, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80033b2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80033b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ba:	1c9a      	adds	r2, r3, #2
 80033bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80033c0:	4413      	add	r3, r2
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	f04f 0300 	mov.w	r3, #0
 80033ca:	f04f 0000 	mov.w	r0, #0
 80033ce:	f04f 0100 	mov.w	r1, #0
 80033d2:	0419      	lsls	r1, r3, #16
 80033d4:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 80033d8:	0410      	lsls	r0, r2, #16
 80033da:	ea44 0300 	orr.w	r3, r4, r0
 80033de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033e2:	ea45 0301 	orr.w	r3, r5, r1
 80033e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80033ea:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80033ee:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80033f2:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80033f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033fa:	1cda      	adds	r2, r3, #3
 80033fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003400:	4413      	add	r3, r2
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	b2da      	uxtb	r2, r3
 8003406:	f04f 0300 	mov.w	r3, #0
 800340a:	ea4f 2912 	mov.w	r9, r2, lsr #8
 800340e:	ea4f 6802 	mov.w	r8, r2, lsl #24
 8003412:	ea40 0308 	orr.w	r3, r0, r8
 8003416:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800341a:	ea41 0309 	orr.w	r3, r1, r9
 800341e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003422:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8003426:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800342a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800342e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003432:	1d1a      	adds	r2, r3, #4
 8003434:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003438:	4413      	add	r3, r2
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	b2da      	uxtb	r2, r3
 800343e:	f04f 0300 	mov.w	r3, #0
 8003442:	f04f 0000 	mov.w	r0, #0
 8003446:	f04f 0100 	mov.w	r1, #0
 800344a:	0011      	movs	r1, r2
 800344c:	2000      	movs	r0, #0
 800344e:	ea44 0300 	orr.w	r3, r4, r0
 8003452:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003456:	ea45 0301 	orr.w	r3, r5, r1
 800345a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800345e:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8003462:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003466:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800346a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800346e:	1d5a      	adds	r2, r3, #5
 8003470:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003474:	4413      	add	r3, r2
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	b2da      	uxtb	r2, r3
 800347a:	f04f 0300 	mov.w	r3, #0
 800347e:	f04f 0000 	mov.w	r0, #0
 8003482:	f04f 0100 	mov.w	r1, #0
 8003486:	0211      	lsls	r1, r2, #8
 8003488:	2000      	movs	r0, #0
 800348a:	ea44 0300 	orr.w	r3, r4, r0
 800348e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003492:	ea45 0301 	orr.w	r3, r5, r1
 8003496:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800349a:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 800349e:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80034a2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80034a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034aa:	1d9a      	adds	r2, r3, #6
 80034ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034b0:	4413      	add	r3, r2
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	f04f 0300 	mov.w	r3, #0
 80034ba:	f04f 0000 	mov.w	r0, #0
 80034be:	f04f 0100 	mov.w	r1, #0
 80034c2:	0411      	lsls	r1, r2, #16
 80034c4:	2000      	movs	r0, #0
 80034c6:	ea44 0300 	orr.w	r3, r4, r0
 80034ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80034ce:	ea45 0301 	orr.w	r3, r5, r1
 80034d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80034d6:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80034da:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80034de:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80034e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034e6:	1dda      	adds	r2, r3, #7
 80034e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034ec:	4413      	add	r3, r2
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	f04f 0300 	mov.w	r3, #0
 80034f6:	f04f 0000 	mov.w	r0, #0
 80034fa:	f04f 0100 	mov.w	r1, #0
 80034fe:	0611      	lsls	r1, r2, #24
 8003500:	2000      	movs	r0, #0
 8003502:	ea44 0300 	orr.w	r3, r4, r0
 8003506:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800350a:	ea45 0301 	orr.w	r3, r5, r1
 800350e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003512:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8003516:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      this->x = u_x.real;
 800351a:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800351e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003522:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8003526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800352a:	3308      	adds	r3, #8
 800352c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8003530:	f04f 0200 	mov.w	r2, #0
 8003534:	f04f 0300 	mov.w	r3, #0
 8003538:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800353c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8003540:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003544:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003548:	4413      	add	r3, r2
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	b2da      	uxtb	r2, r3
 800354e:	f04f 0300 	mov.w	r3, #0
 8003552:	ea40 0402 	orr.w	r4, r0, r2
 8003556:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 800355a:	430b      	orrs	r3, r1
 800355c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003560:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8003564:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003568:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800356c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003570:	1c5a      	adds	r2, r3, #1
 8003572:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003576:	4413      	add	r3, r2
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	b2da      	uxtb	r2, r3
 800357c:	f04f 0300 	mov.w	r3, #0
 8003580:	f04f 0000 	mov.w	r0, #0
 8003584:	f04f 0100 	mov.w	r1, #0
 8003588:	0219      	lsls	r1, r3, #8
 800358a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800358e:	0210      	lsls	r0, r2, #8
 8003590:	ea44 0300 	orr.w	r3, r4, r0
 8003594:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003598:	ea45 0301 	orr.w	r3, r5, r1
 800359c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80035a0:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 80035a4:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80035a8:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80035ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035b0:	1c9a      	adds	r2, r3, #2
 80035b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035b6:	4413      	add	r3, r2
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	f04f 0300 	mov.w	r3, #0
 80035c0:	f04f 0000 	mov.w	r0, #0
 80035c4:	f04f 0100 	mov.w	r1, #0
 80035c8:	0419      	lsls	r1, r3, #16
 80035ca:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 80035ce:	0410      	lsls	r0, r2, #16
 80035d0:	ea44 0300 	orr.w	r3, r4, r0
 80035d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80035d6:	ea45 0301 	orr.w	r3, r5, r1
 80035da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80035dc:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80035e0:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80035e4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80035e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035ec:	1cda      	adds	r2, r3, #3
 80035ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035f2:	4413      	add	r3, r2
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	b2da      	uxtb	r2, r3
 80035f8:	f04f 0300 	mov.w	r3, #0
 80035fc:	0a14      	lsrs	r4, r2, #8
 80035fe:	677c      	str	r4, [r7, #116]	; 0x74
 8003600:	0613      	lsls	r3, r2, #24
 8003602:	673b      	str	r3, [r7, #112]	; 0x70
 8003604:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8003608:	4623      	mov	r3, r4
 800360a:	4303      	orrs	r3, r0
 800360c:	66bb      	str	r3, [r7, #104]	; 0x68
 800360e:	462b      	mov	r3, r5
 8003610:	430b      	orrs	r3, r1
 8003612:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003614:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003618:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800361c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003624:	1d1a      	adds	r2, r3, #4
 8003626:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800362a:	4413      	add	r3, r2
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	b2da      	uxtb	r2, r3
 8003630:	f04f 0300 	mov.w	r3, #0
 8003634:	f04f 0000 	mov.w	r0, #0
 8003638:	f04f 0100 	mov.w	r1, #0
 800363c:	0011      	movs	r1, r2
 800363e:	2000      	movs	r0, #0
 8003640:	ea44 0300 	orr.w	r3, r4, r0
 8003644:	663b      	str	r3, [r7, #96]	; 0x60
 8003646:	ea45 0301 	orr.w	r3, r5, r1
 800364a:	667b      	str	r3, [r7, #100]	; 0x64
 800364c:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8003650:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003654:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800365c:	1d5a      	adds	r2, r3, #5
 800365e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003662:	4413      	add	r3, r2
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	b2da      	uxtb	r2, r3
 8003668:	f04f 0300 	mov.w	r3, #0
 800366c:	f04f 0000 	mov.w	r0, #0
 8003670:	f04f 0100 	mov.w	r1, #0
 8003674:	0211      	lsls	r1, r2, #8
 8003676:	2000      	movs	r0, #0
 8003678:	ea44 0300 	orr.w	r3, r4, r0
 800367c:	65bb      	str	r3, [r7, #88]	; 0x58
 800367e:	ea45 0301 	orr.w	r3, r5, r1
 8003682:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003684:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003688:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800368c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003694:	1d9a      	adds	r2, r3, #6
 8003696:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800369a:	4413      	add	r3, r2
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	b2da      	uxtb	r2, r3
 80036a0:	f04f 0300 	mov.w	r3, #0
 80036a4:	f04f 0000 	mov.w	r0, #0
 80036a8:	f04f 0100 	mov.w	r1, #0
 80036ac:	0411      	lsls	r1, r2, #16
 80036ae:	2000      	movs	r0, #0
 80036b0:	ea44 0300 	orr.w	r3, r4, r0
 80036b4:	653b      	str	r3, [r7, #80]	; 0x50
 80036b6:	ea45 0301 	orr.w	r3, r5, r1
 80036ba:	657b      	str	r3, [r7, #84]	; 0x54
 80036bc:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80036c0:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80036c4:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80036c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036cc:	1dda      	adds	r2, r3, #7
 80036ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80036d2:	4413      	add	r3, r2
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	b2da      	uxtb	r2, r3
 80036d8:	f04f 0300 	mov.w	r3, #0
 80036dc:	f04f 0000 	mov.w	r0, #0
 80036e0:	f04f 0100 	mov.w	r1, #0
 80036e4:	0611      	lsls	r1, r2, #24
 80036e6:	2000      	movs	r0, #0
 80036e8:	ea44 0300 	orr.w	r3, r4, r0
 80036ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80036ee:	ea45 0301 	orr.w	r3, r5, r1
 80036f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036f4:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80036f8:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      this->y = u_y.real;
 80036fc:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8003700:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003704:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8003708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800370c:	3308      	adds	r3, #8
 800370e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8003712:	f04f 0200 	mov.w	r2, #0
 8003716:	f04f 0300 	mov.w	r3, #0
 800371a:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800371e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003722:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003726:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800372a:	4413      	add	r3, r2
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	b2da      	uxtb	r2, r3
 8003730:	f04f 0300 	mov.w	r3, #0
 8003734:	ea40 0402 	orr.w	r4, r0, r2
 8003738:	643c      	str	r4, [r7, #64]	; 0x40
 800373a:	430b      	orrs	r3, r1
 800373c:	647b      	str	r3, [r7, #68]	; 0x44
 800373e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003742:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003746:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800374a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800374e:	1c5a      	adds	r2, r3, #1
 8003750:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003754:	4413      	add	r3, r2
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	b2da      	uxtb	r2, r3
 800375a:	f04f 0300 	mov.w	r3, #0
 800375e:	f04f 0000 	mov.w	r0, #0
 8003762:	f04f 0100 	mov.w	r1, #0
 8003766:	0219      	lsls	r1, r3, #8
 8003768:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800376c:	0210      	lsls	r0, r2, #8
 800376e:	ea44 0300 	orr.w	r3, r4, r0
 8003772:	63bb      	str	r3, [r7, #56]	; 0x38
 8003774:	ea45 0301 	orr.w	r3, r5, r1
 8003778:	63fb      	str	r3, [r7, #60]	; 0x3c
 800377a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800377e:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003782:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8003786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800378a:	1c9a      	adds	r2, r3, #2
 800378c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003790:	4413      	add	r3, r2
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	b2da      	uxtb	r2, r3
 8003796:	f04f 0300 	mov.w	r3, #0
 800379a:	f04f 0000 	mov.w	r0, #0
 800379e:	f04f 0100 	mov.w	r1, #0
 80037a2:	0419      	lsls	r1, r3, #16
 80037a4:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 80037a8:	0410      	lsls	r0, r2, #16
 80037aa:	ea44 0300 	orr.w	r3, r4, r0
 80037ae:	633b      	str	r3, [r7, #48]	; 0x30
 80037b0:	ea45 0301 	orr.w	r3, r5, r1
 80037b4:	637b      	str	r3, [r7, #52]	; 0x34
 80037b6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80037ba:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80037be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80037c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037c6:	1cda      	adds	r2, r3, #3
 80037c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80037cc:	4413      	add	r3, r2
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	b2da      	uxtb	r2, r3
 80037d2:	f04f 0300 	mov.w	r3, #0
 80037d6:	0a14      	lsrs	r4, r2, #8
 80037d8:	62fc      	str	r4, [r7, #44]	; 0x2c
 80037da:	0613      	lsls	r3, r2, #24
 80037dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80037de:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80037e2:	4623      	mov	r3, r4
 80037e4:	4303      	orrs	r3, r0
 80037e6:	623b      	str	r3, [r7, #32]
 80037e8:	462b      	mov	r3, r5
 80037ea:	430b      	orrs	r3, r1
 80037ec:	627b      	str	r3, [r7, #36]	; 0x24
 80037ee:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80037f2:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80037f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80037fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037fe:	3304      	adds	r3, #4
 8003800:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003804:	4413      	add	r3, r2
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	b2dc      	uxtb	r4, r3
 800380a:	f04f 0500 	mov.w	r5, #0
 800380e:	f04f 0200 	mov.w	r2, #0
 8003812:	f04f 0300 	mov.w	r3, #0
 8003816:	0023      	movs	r3, r4
 8003818:	2200      	movs	r2, #0
 800381a:	ea40 0402 	orr.w	r4, r0, r2
 800381e:	61bc      	str	r4, [r7, #24]
 8003820:	430b      	orrs	r3, r1
 8003822:	61fb      	str	r3, [r7, #28]
 8003824:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003828:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800382c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003834:	3305      	adds	r3, #5
 8003836:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800383a:	4413      	add	r3, r2
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	b2dc      	uxtb	r4, r3
 8003840:	f04f 0500 	mov.w	r5, #0
 8003844:	f04f 0200 	mov.w	r2, #0
 8003848:	f04f 0300 	mov.w	r3, #0
 800384c:	0223      	lsls	r3, r4, #8
 800384e:	2200      	movs	r2, #0
 8003850:	ea40 0402 	orr.w	r4, r0, r2
 8003854:	613c      	str	r4, [r7, #16]
 8003856:	430b      	orrs	r3, r1
 8003858:	617b      	str	r3, [r7, #20]
 800385a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800385e:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003862:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800386a:	3306      	adds	r3, #6
 800386c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003870:	4413      	add	r3, r2
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	b2dc      	uxtb	r4, r3
 8003876:	f04f 0500 	mov.w	r5, #0
 800387a:	f04f 0200 	mov.w	r2, #0
 800387e:	f04f 0300 	mov.w	r3, #0
 8003882:	0423      	lsls	r3, r4, #16
 8003884:	2200      	movs	r2, #0
 8003886:	ea40 0402 	orr.w	r4, r0, r2
 800388a:	60bc      	str	r4, [r7, #8]
 800388c:	430b      	orrs	r3, r1
 800388e:	60fb      	str	r3, [r7, #12]
 8003890:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003894:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003898:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800389c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038a0:	3307      	adds	r3, #7
 80038a2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80038a6:	4413      	add	r3, r2
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	b2dc      	uxtb	r4, r3
 80038ac:	f04f 0500 	mov.w	r5, #0
 80038b0:	f04f 0200 	mov.w	r2, #0
 80038b4:	f04f 0300 	mov.w	r3, #0
 80038b8:	0623      	lsls	r3, r4, #24
 80038ba:	2200      	movs	r2, #0
 80038bc:	ea40 0402 	orr.w	r4, r0, r2
 80038c0:	603c      	str	r4, [r7, #0]
 80038c2:	430b      	orrs	r3, r1
 80038c4:	607b      	str	r3, [r7, #4]
 80038c6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80038ca:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      this->z = u_z.real;
 80038ce:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 80038d2:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80038d6:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 80038da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038de:	3308      	adds	r3, #8
 80038e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
     return offset;
 80038e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    }
 80038e8:	4618      	mov	r0, r3
 80038ea:	37ec      	adds	r7, #236	; 0xec
 80038ec:	46bd      	mov	sp, r7
 80038ee:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80038f2:	4770      	bx	lr

080038f4 <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	4b03      	ldr	r3, [pc, #12]	; (800390c <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 80038fe:	4618      	mov	r0, r3
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	08010778 	.word	0x08010778

08003910 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	4b03      	ldr	r3, [pc, #12]	; (8003928 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 800391a:	4618      	mov	r0, r3
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	08010790 	.word	0x08010790

0800392c <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4618      	mov	r0, r3
 8003938:	f7fe fb58 	bl	8001fec <_ZN3ros3MsgC1Ev>
 800393c:	4a08      	ldr	r2, [pc, #32]	; (8003960 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	3308      	adds	r3, #8
 8003946:	4618      	mov	r0, r3
 8003948:	f7ff fb5c 	bl	8003004 <_ZN13geometry_msgs7Vector3C1Ev>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3328      	adds	r3, #40	; 0x28
 8003950:	4618      	mov	r0, r3
 8003952:	f7ff fb57 	bl	8003004 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4618      	mov	r0, r3
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	080109c0 	.word	0x080109c0

08003964 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800396e:	2300      	movs	r3, #0
 8003970:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f103 0008 	add.w	r0, r3, #8
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	4413      	add	r3, r2
 800397e:	4619      	mov	r1, r3
 8003980:	f7ff fb68 	bl	8003054 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003984:	4602      	mov	r2, r0
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	4413      	add	r3, r2
 800398a:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	4413      	add	r3, r2
 8003998:	4619      	mov	r1, r3
 800399a:	f7ff fb5b 	bl	8003054 <_ZNK13geometry_msgs7Vector39serializeEPh>
 800399e:	4602      	mov	r2, r0
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4413      	add	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]
      return offset;
 80039a6:	68fb      	ldr	r3, [r7, #12]
    }
 80039a8:	4618      	mov	r0, r3
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80039ba:	2300      	movs	r3, #0
 80039bc:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f103 0008 	add.w	r0, r3, #8
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	4413      	add	r3, r2
 80039ca:	4619      	mov	r1, r3
 80039cc:	f7ff fcb5 	bl	800333a <_ZN13geometry_msgs7Vector311deserializeEPh>
 80039d0:	4602      	mov	r2, r0
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	4413      	add	r3, r2
 80039d6:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	4413      	add	r3, r2
 80039e4:	4619      	mov	r1, r3
 80039e6:	f7ff fca8 	bl	800333a <_ZN13geometry_msgs7Vector311deserializeEPh>
 80039ea:	4602      	mov	r2, r0
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	4413      	add	r3, r2
 80039f0:	60fb      	str	r3, [r7, #12]
     return offset;
 80039f2:	68fb      	ldr	r3, [r7, #12]
    }
 80039f4:	4618      	mov	r0, r3
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <_ZN13geometry_msgs5Twist7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Twist"; };
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	4b03      	ldr	r3, [pc, #12]	; (8003a14 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8003a06:	4618      	mov	r0, r3
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	080107b4 	.word	0x080107b4

08003a18 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    virtual const char * getMD5() override { return "9f195f881246fdfa2798d1d3eebca84a"; };
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	4b03      	ldr	r3, [pc, #12]	; (8003a30 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8003a22:	4618      	mov	r0, r3
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	080107c8 	.word	0x080107c8

08003a34 <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fe fad4 	bl	8001fec <_ZN3ros3MsgC1Ev>
 8003a44:	4a09      	ldr	r2, [pc, #36]	; (8003a6c <_ZN8std_msgs6HeaderC1Ev+0x38>)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	605a      	str	r2, [r3, #4]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3308      	adds	r3, #8
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7fe fab8 	bl	8001fca <_ZN3ros4TimeC1Ev>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a04      	ldr	r2, [pc, #16]	; (8003a70 <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 8003a5e:	611a      	str	r2, [r3, #16]
    {
    }
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4618      	mov	r0, r3
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	080109a8 	.word	0x080109a8
 8003a70:	080106a4 	.word	0x080106a4

08003a74 <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6859      	ldr	r1, [r3, #4]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	b2ca      	uxtb	r2, r1
 8003a8e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	0a19      	lsrs	r1, r3, #8
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	b2ca      	uxtb	r2, r1
 8003aa0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	0c19      	lsrs	r1, r3, #16
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	3302      	adds	r3, #2
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	4413      	add	r3, r2
 8003ab0:	b2ca      	uxtb	r2, r1
 8003ab2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	0e19      	lsrs	r1, r3, #24
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	3303      	adds	r3, #3
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	b2ca      	uxtb	r2, r1
 8003ac4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	3304      	adds	r3, #4
 8003aca:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6899      	ldr	r1, [r3, #8]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	683a      	ldr	r2, [r7, #0]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	b2ca      	uxtb	r2, r1
 8003ad8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	0a19      	lsrs	r1, r3, #8
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	b2ca      	uxtb	r2, r1
 8003aea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	0c19      	lsrs	r1, r3, #16
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	3302      	adds	r3, #2
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	4413      	add	r3, r2
 8003afa:	b2ca      	uxtb	r2, r1
 8003afc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	0e19      	lsrs	r1, r3, #24
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	3303      	adds	r3, #3
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	b2ca      	uxtb	r2, r1
 8003b0e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	3304      	adds	r3, #4
 8003b14:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68d9      	ldr	r1, [r3, #12]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	4413      	add	r3, r2
 8003b20:	b2ca      	uxtb	r2, r1
 8003b22:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	0a19      	lsrs	r1, r3, #8
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	4413      	add	r3, r2
 8003b32:	b2ca      	uxtb	r2, r1
 8003b34:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	0c19      	lsrs	r1, r3, #16
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	3302      	adds	r3, #2
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	4413      	add	r3, r2
 8003b44:	b2ca      	uxtb	r2, r1
 8003b46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	0e19      	lsrs	r1, r3, #24
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	3303      	adds	r3, #3
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	4413      	add	r3, r2
 8003b56:	b2ca      	uxtb	r2, r1
 8003b58:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	3304      	adds	r3, #4
 8003b5e:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7fc fb33 	bl	80001d0 <strlen>
 8003b6a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	4413      	add	r3, r2
 8003b72:	68b9      	ldr	r1, [r7, #8]
 8003b74:	4618      	mov	r0, r3
 8003b76:	f002 f81b 	bl	8005bb0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	18d0      	adds	r0, r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	f008 f8d1 	bl	800bd34 <memcpy>
      offset += length_frame_id;
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	4413      	add	r3, r2
 8003b98:	60fb      	str	r3, [r7, #12]
      return offset;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
    }
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	6839      	ldr	r1, [r7, #0]
 8003bca:	440b      	add	r3, r1
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	021b      	lsls	r3, r3, #8
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	3302      	adds	r3, #2
 8003bde:	6839      	ldr	r1, [r7, #0]
 8003be0:	440b      	add	r3, r1
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	041b      	lsls	r3, r3, #16
 8003be6:	431a      	orrs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	3303      	adds	r3, #3
 8003bf4:	6839      	ldr	r1, [r7, #0]
 8003bf6:	440b      	add	r3, r1
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	061b      	lsls	r3, r3, #24
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	3304      	adds	r3, #4
 8003c06:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	461a      	mov	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	689a      	ldr	r2, [r3, #8]
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	6839      	ldr	r1, [r7, #0]
 8003c20:	440b      	add	r3, r1
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	021b      	lsls	r3, r3, #8
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689a      	ldr	r2, [r3, #8]
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	3302      	adds	r3, #2
 8003c34:	6839      	ldr	r1, [r7, #0]
 8003c36:	440b      	add	r3, r1
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	041b      	lsls	r3, r3, #16
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	3303      	adds	r3, #3
 8003c4a:	6839      	ldr	r1, [r7, #0]
 8003c4c:	440b      	add	r3, r1
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	061b      	lsls	r3, r3, #24
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	3304      	adds	r3, #4
 8003c5c:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	4413      	add	r3, r2
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	461a      	mov	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68da      	ldr	r2, [r3, #12]
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	3301      	adds	r3, #1
 8003c74:	6839      	ldr	r1, [r7, #0]
 8003c76:	440b      	add	r3, r1
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	021b      	lsls	r3, r3, #8
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68da      	ldr	r2, [r3, #12]
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	3302      	adds	r3, #2
 8003c8a:	6839      	ldr	r1, [r7, #0]
 8003c8c:	440b      	add	r3, r1
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	041b      	lsls	r3, r3, #16
 8003c92:	431a      	orrs	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68da      	ldr	r2, [r3, #12]
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	3303      	adds	r3, #3
 8003ca0:	6839      	ldr	r1, [r7, #0]
 8003ca2:	440b      	add	r3, r1
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	061b      	lsls	r3, r3, #24
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	3304      	adds	r3, #4
 8003cb2:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	683a      	ldr	r2, [r7, #0]
 8003cb8:	441a      	add	r2, r3
 8003cba:	f107 030c 	add.w	r3, r7, #12
 8003cbe:	4611      	mov	r1, r2
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f001 ff93 	bl	8005bec <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	3304      	adds	r3, #4
 8003cca:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	617b      	str	r3, [r7, #20]
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d20c      	bcs.n	8003cf6 <_ZN8std_msgs6Header11deserializeEPh+0x152>
          inbuffer[k-1]=inbuffer[k];
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	441a      	add	r2, r3
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	6839      	ldr	r1, [r7, #0]
 8003ce8:	440b      	add	r3, r1
 8003cea:	7812      	ldrb	r2, [r2, #0]
 8003cec:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	e7ec      	b.n	8003cd0 <_ZN8std_msgs6Header11deserializeEPh+0x12c>
      }
      inbuffer[offset+length_frame_id-1]=0;
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	683a      	ldr	r2, [r7, #0]
 8003d00:	4413      	add	r3, r2
 8003d02:	2200      	movs	r2, #0
 8003d04:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	441a      	add	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4413      	add	r3, r2
 8003d18:	613b      	str	r3, [r7, #16]
     return offset;
 8003d1a:	693b      	ldr	r3, [r7, #16]
    }
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3718      	adds	r7, #24
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <_ZN8std_msgs6Header7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Header"; };
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	4b03      	ldr	r3, [pc, #12]	; (8003d3c <_ZN8std_msgs6Header7getTypeEv+0x18>)
 8003d2e:	4618      	mov	r0, r3
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	080107ec 	.word	0x080107ec

08003d40 <_ZN8std_msgs6Header6getMD5Ev>:
    virtual const char * getMD5() override { return "2176decaecbce78abc3b96ef049fabed"; };
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	4b03      	ldr	r3, [pc, #12]	; (8003d58 <_ZN8std_msgs6Header6getMD5Ev+0x18>)
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	080107fc 	.word	0x080107fc

08003d5c <_ZN13geometry_msgs10QuaternionC1Ev>:
      typedef double _z_type;
      _z_type z;
      typedef double _w_type;
      _w_type w;

    Quaternion():
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0),
      w(0)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fe f940 	bl	8001fec <_ZN3ros3MsgC1Ev>
 8003d6c:	4a11      	ldr	r2, [pc, #68]	; (8003db4 <_ZN13geometry_msgs10QuaternionC1Ev+0x58>)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	601a      	str	r2, [r3, #0]
 8003d72:	6879      	ldr	r1, [r7, #4]
 8003d74:	f04f 0200 	mov.w	r2, #0
 8003d78:	f04f 0300 	mov.w	r3, #0
 8003d7c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8003d80:	6879      	ldr	r1, [r7, #4]
 8003d82:	f04f 0200 	mov.w	r2, #0
 8003d86:	f04f 0300 	mov.w	r3, #0
 8003d8a:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8003d8e:	6879      	ldr	r1, [r7, #4]
 8003d90:	f04f 0200 	mov.w	r2, #0
 8003d94:	f04f 0300 	mov.w	r3, #0
 8003d98:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8003d9c:	6879      	ldr	r1, [r7, #4]
 8003d9e:	f04f 0200 	mov.w	r2, #0
 8003da2:	f04f 0300 	mov.w	r3, #0
 8003da6:	e9c1 2308 	strd	r2, r3, [r1, #32]
    {
    }
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4618      	mov	r0, r3
 8003dae:	3708      	adds	r7, #8
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	08010990 	.word	0x08010990

08003db8 <_ZNK13geometry_msgs10Quaternion9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003db8:	b480      	push	{r7}
 8003dba:	b08d      	sub	sp, #52	; 0x34
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003dcc:	e9c7 2308 	strd	r2, r3, [r7, #32]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8003dd0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003dd4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003dd6:	6838      	ldr	r0, [r7, #0]
 8003dd8:	4401      	add	r1, r0
 8003dda:	b2d3      	uxtb	r3, r2
 8003ddc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8003dde:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003de2:	f04f 0200 	mov.w	r2, #0
 8003de6:	f04f 0300 	mov.w	r3, #0
 8003dea:	0a02      	lsrs	r2, r0, #8
 8003dec:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003df0:	0a0b      	lsrs	r3, r1, #8
 8003df2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003df4:	3101      	adds	r1, #1
 8003df6:	6838      	ldr	r0, [r7, #0]
 8003df8:	4401      	add	r1, r0
 8003dfa:	b2d3      	uxtb	r3, r2
 8003dfc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8003dfe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003e02:	f04f 0200 	mov.w	r2, #0
 8003e06:	f04f 0300 	mov.w	r3, #0
 8003e0a:	0c02      	lsrs	r2, r0, #16
 8003e0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003e10:	0c0b      	lsrs	r3, r1, #16
 8003e12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e14:	3102      	adds	r1, #2
 8003e16:	6838      	ldr	r0, [r7, #0]
 8003e18:	4401      	add	r1, r0
 8003e1a:	b2d3      	uxtb	r3, r2
 8003e1c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8003e1e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003e22:	f04f 0200 	mov.w	r2, #0
 8003e26:	f04f 0300 	mov.w	r3, #0
 8003e2a:	0e02      	lsrs	r2, r0, #24
 8003e2c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003e30:	0e0b      	lsrs	r3, r1, #24
 8003e32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e34:	3103      	adds	r1, #3
 8003e36:	6838      	ldr	r0, [r7, #0]
 8003e38:	4401      	add	r1, r0
 8003e3a:	b2d3      	uxtb	r3, r2
 8003e3c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8003e3e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003e42:	f04f 0200 	mov.w	r2, #0
 8003e46:	f04f 0300 	mov.w	r3, #0
 8003e4a:	000a      	movs	r2, r1
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e50:	3104      	adds	r1, #4
 8003e52:	6838      	ldr	r0, [r7, #0]
 8003e54:	4401      	add	r1, r0
 8003e56:	b2d3      	uxtb	r3, r2
 8003e58:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8003e5a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003e5e:	f04f 0200 	mov.w	r2, #0
 8003e62:	f04f 0300 	mov.w	r3, #0
 8003e66:	0a0a      	lsrs	r2, r1, #8
 8003e68:	2300      	movs	r3, #0
 8003e6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e6c:	3105      	adds	r1, #5
 8003e6e:	6838      	ldr	r0, [r7, #0]
 8003e70:	4401      	add	r1, r0
 8003e72:	b2d3      	uxtb	r3, r2
 8003e74:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8003e76:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003e7a:	f04f 0200 	mov.w	r2, #0
 8003e7e:	f04f 0300 	mov.w	r3, #0
 8003e82:	0c0a      	lsrs	r2, r1, #16
 8003e84:	2300      	movs	r3, #0
 8003e86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e88:	3106      	adds	r1, #6
 8003e8a:	6838      	ldr	r0, [r7, #0]
 8003e8c:	4401      	add	r1, r0
 8003e8e:	b2d3      	uxtb	r3, r2
 8003e90:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8003e92:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003e96:	f04f 0200 	mov.w	r2, #0
 8003e9a:	f04f 0300 	mov.w	r3, #0
 8003e9e:	0e0a      	lsrs	r2, r1, #24
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ea4:	3107      	adds	r1, #7
 8003ea6:	6838      	ldr	r0, [r7, #0]
 8003ea8:	4401      	add	r1, r0
 8003eaa:	b2d3      	uxtb	r3, r2
 8003eac:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8003eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb0:	3308      	adds	r3, #8
 8003eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003eba:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8003ebe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ec2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ec4:	6838      	ldr	r0, [r7, #0]
 8003ec6:	4401      	add	r1, r0
 8003ec8:	b2d3      	uxtb	r3, r2
 8003eca:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8003ecc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003ed0:	f04f 0200 	mov.w	r2, #0
 8003ed4:	f04f 0300 	mov.w	r3, #0
 8003ed8:	0a02      	lsrs	r2, r0, #8
 8003eda:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003ede:	0a0b      	lsrs	r3, r1, #8
 8003ee0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ee2:	3101      	adds	r1, #1
 8003ee4:	6838      	ldr	r0, [r7, #0]
 8003ee6:	4401      	add	r1, r0
 8003ee8:	b2d3      	uxtb	r3, r2
 8003eea:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8003eec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003ef0:	f04f 0200 	mov.w	r2, #0
 8003ef4:	f04f 0300 	mov.w	r3, #0
 8003ef8:	0c02      	lsrs	r2, r0, #16
 8003efa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003efe:	0c0b      	lsrs	r3, r1, #16
 8003f00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f02:	3102      	adds	r1, #2
 8003f04:	6838      	ldr	r0, [r7, #0]
 8003f06:	4401      	add	r1, r0
 8003f08:	b2d3      	uxtb	r3, r2
 8003f0a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8003f0c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003f10:	f04f 0200 	mov.w	r2, #0
 8003f14:	f04f 0300 	mov.w	r3, #0
 8003f18:	0e02      	lsrs	r2, r0, #24
 8003f1a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003f1e:	0e0b      	lsrs	r3, r1, #24
 8003f20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f22:	3103      	adds	r1, #3
 8003f24:	6838      	ldr	r0, [r7, #0]
 8003f26:	4401      	add	r1, r0
 8003f28:	b2d3      	uxtb	r3, r2
 8003f2a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8003f2c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003f30:	f04f 0200 	mov.w	r2, #0
 8003f34:	f04f 0300 	mov.w	r3, #0
 8003f38:	000a      	movs	r2, r1
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f3e:	3104      	adds	r1, #4
 8003f40:	6838      	ldr	r0, [r7, #0]
 8003f42:	4401      	add	r1, r0
 8003f44:	b2d3      	uxtb	r3, r2
 8003f46:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8003f48:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003f4c:	f04f 0200 	mov.w	r2, #0
 8003f50:	f04f 0300 	mov.w	r3, #0
 8003f54:	0a0a      	lsrs	r2, r1, #8
 8003f56:	2300      	movs	r3, #0
 8003f58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f5a:	3105      	adds	r1, #5
 8003f5c:	6838      	ldr	r0, [r7, #0]
 8003f5e:	4401      	add	r1, r0
 8003f60:	b2d3      	uxtb	r3, r2
 8003f62:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8003f64:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003f68:	f04f 0200 	mov.w	r2, #0
 8003f6c:	f04f 0300 	mov.w	r3, #0
 8003f70:	0c0a      	lsrs	r2, r1, #16
 8003f72:	2300      	movs	r3, #0
 8003f74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f76:	3106      	adds	r1, #6
 8003f78:	6838      	ldr	r0, [r7, #0]
 8003f7a:	4401      	add	r1, r0
 8003f7c:	b2d3      	uxtb	r3, r2
 8003f7e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8003f80:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003f84:	f04f 0200 	mov.w	r2, #0
 8003f88:	f04f 0300 	mov.w	r3, #0
 8003f8c:	0e0a      	lsrs	r2, r1, #24
 8003f8e:	2300      	movs	r3, #0
 8003f90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f92:	3107      	adds	r1, #7
 8003f94:	6838      	ldr	r0, [r7, #0]
 8003f96:	4401      	add	r1, r0
 8003f98:	b2d3      	uxtb	r3, r2
 8003f9a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8003f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9e:	3308      	adds	r3, #8
 8003fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003fa8:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8003fac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003fb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fb2:	6838      	ldr	r0, [r7, #0]
 8003fb4:	4401      	add	r1, r0
 8003fb6:	b2d3      	uxtb	r3, r2
 8003fb8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8003fba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003fbe:	f04f 0200 	mov.w	r2, #0
 8003fc2:	f04f 0300 	mov.w	r3, #0
 8003fc6:	0a02      	lsrs	r2, r0, #8
 8003fc8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003fcc:	0a0b      	lsrs	r3, r1, #8
 8003fce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fd0:	3101      	adds	r1, #1
 8003fd2:	6838      	ldr	r0, [r7, #0]
 8003fd4:	4401      	add	r1, r0
 8003fd6:	b2d3      	uxtb	r3, r2
 8003fd8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8003fda:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003fde:	f04f 0200 	mov.w	r2, #0
 8003fe2:	f04f 0300 	mov.w	r3, #0
 8003fe6:	0c02      	lsrs	r2, r0, #16
 8003fe8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003fec:	0c0b      	lsrs	r3, r1, #16
 8003fee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ff0:	3102      	adds	r1, #2
 8003ff2:	6838      	ldr	r0, [r7, #0]
 8003ff4:	4401      	add	r1, r0
 8003ff6:	b2d3      	uxtb	r3, r2
 8003ff8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8003ffa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003ffe:	f04f 0200 	mov.w	r2, #0
 8004002:	f04f 0300 	mov.w	r3, #0
 8004006:	0e02      	lsrs	r2, r0, #24
 8004008:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800400c:	0e0b      	lsrs	r3, r1, #24
 800400e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004010:	3103      	adds	r1, #3
 8004012:	6838      	ldr	r0, [r7, #0]
 8004014:	4401      	add	r1, r0
 8004016:	b2d3      	uxtb	r3, r2
 8004018:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 800401a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800401e:	f04f 0200 	mov.w	r2, #0
 8004022:	f04f 0300 	mov.w	r3, #0
 8004026:	000a      	movs	r2, r1
 8004028:	2300      	movs	r3, #0
 800402a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800402c:	3104      	adds	r1, #4
 800402e:	6838      	ldr	r0, [r7, #0]
 8004030:	4401      	add	r1, r0
 8004032:	b2d3      	uxtb	r3, r2
 8004034:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8004036:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800403a:	f04f 0200 	mov.w	r2, #0
 800403e:	f04f 0300 	mov.w	r3, #0
 8004042:	0a0a      	lsrs	r2, r1, #8
 8004044:	2300      	movs	r3, #0
 8004046:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004048:	3105      	adds	r1, #5
 800404a:	6838      	ldr	r0, [r7, #0]
 800404c:	4401      	add	r1, r0
 800404e:	b2d3      	uxtb	r3, r2
 8004050:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8004052:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004056:	f04f 0200 	mov.w	r2, #0
 800405a:	f04f 0300 	mov.w	r3, #0
 800405e:	0c0a      	lsrs	r2, r1, #16
 8004060:	2300      	movs	r3, #0
 8004062:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004064:	3106      	adds	r1, #6
 8004066:	6838      	ldr	r0, [r7, #0]
 8004068:	4401      	add	r1, r0
 800406a:	b2d3      	uxtb	r3, r2
 800406c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800406e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004072:	f04f 0200 	mov.w	r2, #0
 8004076:	f04f 0300 	mov.w	r3, #0
 800407a:	0e0a      	lsrs	r2, r1, #24
 800407c:	2300      	movs	r3, #0
 800407e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004080:	3107      	adds	r1, #7
 8004082:	6838      	ldr	r0, [r7, #0]
 8004084:	4401      	add	r1, r0
 8004086:	b2d3      	uxtb	r3, r2
 8004088:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 800408a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800408c:	3308      	adds	r3, #8
 800408e:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.real = this->w;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004096:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_w.base >> (8 * 0)) & 0xFF;
 800409a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800409e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040a0:	6838      	ldr	r0, [r7, #0]
 80040a2:	4401      	add	r1, r0
 80040a4:	b2d3      	uxtb	r3, r2
 80040a6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_w.base >> (8 * 1)) & 0xFF;
 80040a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80040ac:	f04f 0200 	mov.w	r2, #0
 80040b0:	f04f 0300 	mov.w	r3, #0
 80040b4:	0a02      	lsrs	r2, r0, #8
 80040b6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80040ba:	0a0b      	lsrs	r3, r1, #8
 80040bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040be:	3101      	adds	r1, #1
 80040c0:	6838      	ldr	r0, [r7, #0]
 80040c2:	4401      	add	r1, r0
 80040c4:	b2d3      	uxtb	r3, r2
 80040c6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_w.base >> (8 * 2)) & 0xFF;
 80040c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80040cc:	f04f 0200 	mov.w	r2, #0
 80040d0:	f04f 0300 	mov.w	r3, #0
 80040d4:	0c02      	lsrs	r2, r0, #16
 80040d6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80040da:	0c0b      	lsrs	r3, r1, #16
 80040dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040de:	3102      	adds	r1, #2
 80040e0:	6838      	ldr	r0, [r7, #0]
 80040e2:	4401      	add	r1, r0
 80040e4:	b2d3      	uxtb	r3, r2
 80040e6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_w.base >> (8 * 3)) & 0xFF;
 80040e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80040ec:	f04f 0200 	mov.w	r2, #0
 80040f0:	f04f 0300 	mov.w	r3, #0
 80040f4:	0e02      	lsrs	r2, r0, #24
 80040f6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80040fa:	0e0b      	lsrs	r3, r1, #24
 80040fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040fe:	3103      	adds	r1, #3
 8004100:	6838      	ldr	r0, [r7, #0]
 8004102:	4401      	add	r1, r0
 8004104:	b2d3      	uxtb	r3, r2
 8004106:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_w.base >> (8 * 4)) & 0xFF;
 8004108:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800410c:	f04f 0200 	mov.w	r2, #0
 8004110:	f04f 0300 	mov.w	r3, #0
 8004114:	000a      	movs	r2, r1
 8004116:	2300      	movs	r3, #0
 8004118:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800411a:	3104      	adds	r1, #4
 800411c:	6838      	ldr	r0, [r7, #0]
 800411e:	4401      	add	r1, r0
 8004120:	b2d3      	uxtb	r3, r2
 8004122:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_w.base >> (8 * 5)) & 0xFF;
 8004124:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004128:	f04f 0200 	mov.w	r2, #0
 800412c:	f04f 0300 	mov.w	r3, #0
 8004130:	0a0a      	lsrs	r2, r1, #8
 8004132:	2300      	movs	r3, #0
 8004134:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004136:	3105      	adds	r1, #5
 8004138:	6838      	ldr	r0, [r7, #0]
 800413a:	4401      	add	r1, r0
 800413c:	b2d3      	uxtb	r3, r2
 800413e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_w.base >> (8 * 6)) & 0xFF;
 8004140:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004144:	f04f 0200 	mov.w	r2, #0
 8004148:	f04f 0300 	mov.w	r3, #0
 800414c:	0c0a      	lsrs	r2, r1, #16
 800414e:	2300      	movs	r3, #0
 8004150:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004152:	3106      	adds	r1, #6
 8004154:	6838      	ldr	r0, [r7, #0]
 8004156:	4401      	add	r1, r0
 8004158:	b2d3      	uxtb	r3, r2
 800415a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_w.base >> (8 * 7)) & 0xFF;
 800415c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004160:	f04f 0200 	mov.w	r2, #0
 8004164:	f04f 0300 	mov.w	r3, #0
 8004168:	0e0a      	lsrs	r2, r1, #24
 800416a:	2300      	movs	r3, #0
 800416c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800416e:	3107      	adds	r1, #7
 8004170:	6838      	ldr	r0, [r7, #0]
 8004172:	4401      	add	r1, r0
 8004174:	b2d3      	uxtb	r3, r2
 8004176:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->w);
 8004178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800417a:	3308      	adds	r3, #8
 800417c:	62fb      	str	r3, [r7, #44]	; 0x2c
      return offset;
 800417e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8004180:	4618      	mov	r0, r3
 8004182:	3734      	adds	r7, #52	; 0x34
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800418c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004190:	b0cf      	sub	sp, #316	; 0x13c
 8004192:	af00      	add	r7, sp, #0
 8004194:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8004198:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
    {
      int offset = 0;
 800419c:	2300      	movs	r3, #0
 800419e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80041a2:	f04f 0200 	mov.w	r2, #0
 80041a6:	f04f 0300 	mov.w	r3, #0
 80041aa:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80041ae:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80041b2:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80041b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80041ba:	4413      	add	r3, r2
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	f04f 0300 	mov.w	r3, #0
 80041c4:	ea40 0402 	orr.w	r4, r0, r2
 80041c8:	ea41 0503 	orr.w	r5, r1, r3
 80041cc:	e9c7 454a 	strd	r4, r5, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80041d0:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 80041d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80041d8:	1c5a      	adds	r2, r3, #1
 80041da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80041de:	4413      	add	r3, r2
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	f04f 0300 	mov.w	r3, #0
 80041e8:	f04f 0000 	mov.w	r0, #0
 80041ec:	f04f 0100 	mov.w	r1, #0
 80041f0:	0219      	lsls	r1, r3, #8
 80041f2:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80041f6:	0210      	lsls	r0, r2, #8
 80041f8:	ea44 0a00 	orr.w	sl, r4, r0
 80041fc:	ea45 0b01 	orr.w	fp, r5, r1
 8004200:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004204:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8004208:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800420c:	1c9a      	adds	r2, r3, #2
 800420e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004212:	4413      	add	r3, r2
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	b2da      	uxtb	r2, r3
 8004218:	f04f 0300 	mov.w	r3, #0
 800421c:	f04f 0000 	mov.w	r0, #0
 8004220:	f04f 0100 	mov.w	r1, #0
 8004224:	0419      	lsls	r1, r3, #16
 8004226:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 800422a:	0410      	lsls	r0, r2, #16
 800422c:	ea44 0300 	orr.w	r3, r4, r0
 8004230:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004234:	ea45 0301 	orr.w	r3, r5, r1
 8004238:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800423c:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8004240:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004244:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8004248:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800424c:	1cda      	adds	r2, r3, #3
 800424e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004252:	4413      	add	r3, r2
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	b2da      	uxtb	r2, r3
 8004258:	f04f 0300 	mov.w	r3, #0
 800425c:	ea4f 2912 	mov.w	r9, r2, lsr #8
 8004260:	ea4f 6802 	mov.w	r8, r2, lsl #24
 8004264:	ea40 0308 	orr.w	r3, r0, r8
 8004268:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800426c:	ea41 0309 	orr.w	r3, r1, r9
 8004270:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004274:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8004278:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800427c:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8004280:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004284:	1d1a      	adds	r2, r3, #4
 8004286:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800428a:	4413      	add	r3, r2
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	b2da      	uxtb	r2, r3
 8004290:	f04f 0300 	mov.w	r3, #0
 8004294:	f04f 0000 	mov.w	r0, #0
 8004298:	f04f 0100 	mov.w	r1, #0
 800429c:	0011      	movs	r1, r2
 800429e:	2000      	movs	r0, #0
 80042a0:	ea44 0300 	orr.w	r3, r4, r0
 80042a4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80042a8:	ea45 0301 	orr.w	r3, r5, r1
 80042ac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80042b0:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80042b4:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80042b8:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 80042bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80042c0:	1d5a      	adds	r2, r3, #5
 80042c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80042c6:	4413      	add	r3, r2
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	b2da      	uxtb	r2, r3
 80042cc:	f04f 0300 	mov.w	r3, #0
 80042d0:	f04f 0000 	mov.w	r0, #0
 80042d4:	f04f 0100 	mov.w	r1, #0
 80042d8:	0211      	lsls	r1, r2, #8
 80042da:	2000      	movs	r0, #0
 80042dc:	ea44 0300 	orr.w	r3, r4, r0
 80042e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80042e4:	ea45 0301 	orr.w	r3, r5, r1
 80042e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80042ec:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 80042f0:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80042f4:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 80042f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80042fc:	1d9a      	adds	r2, r3, #6
 80042fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004302:	4413      	add	r3, r2
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	b2da      	uxtb	r2, r3
 8004308:	f04f 0300 	mov.w	r3, #0
 800430c:	f04f 0000 	mov.w	r0, #0
 8004310:	f04f 0100 	mov.w	r1, #0
 8004314:	0411      	lsls	r1, r2, #16
 8004316:	2000      	movs	r0, #0
 8004318:	ea44 0300 	orr.w	r3, r4, r0
 800431c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004320:	ea45 0301 	orr.w	r3, r5, r1
 8004324:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004328:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800432c:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004330:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8004334:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004338:	1dda      	adds	r2, r3, #7
 800433a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800433e:	4413      	add	r3, r2
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	b2da      	uxtb	r2, r3
 8004344:	f04f 0300 	mov.w	r3, #0
 8004348:	f04f 0000 	mov.w	r0, #0
 800434c:	f04f 0100 	mov.w	r1, #0
 8004350:	0611      	lsls	r1, r2, #24
 8004352:	2000      	movs	r0, #0
 8004354:	ea44 0300 	orr.w	r3, r4, r0
 8004358:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800435c:	ea45 0301 	orr.w	r3, r5, r1
 8004360:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004364:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8004368:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
      this->x = u_x.real;
 800436c:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8004370:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004374:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8004378:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800437c:	3308      	adds	r3, #8
 800437e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8004382:	f04f 0200 	mov.w	r2, #0
 8004386:	f04f 0300 	mov.w	r3, #0
 800438a:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800438e:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8004392:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8004396:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800439a:	4413      	add	r3, r2
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	b2da      	uxtb	r2, r3
 80043a0:	f04f 0300 	mov.w	r3, #0
 80043a4:	ea40 0402 	orr.w	r4, r0, r2
 80043a8:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 80043ac:	430b      	orrs	r3, r1
 80043ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80043b2:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 80043b6:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80043ba:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 80043be:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80043c2:	1c5a      	adds	r2, r3, #1
 80043c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80043c8:	4413      	add	r3, r2
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	b2da      	uxtb	r2, r3
 80043ce:	f04f 0300 	mov.w	r3, #0
 80043d2:	f04f 0000 	mov.w	r0, #0
 80043d6:	f04f 0100 	mov.w	r1, #0
 80043da:	0219      	lsls	r1, r3, #8
 80043dc:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80043e0:	0210      	lsls	r0, r2, #8
 80043e2:	ea44 0300 	orr.w	r3, r4, r0
 80043e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80043ea:	ea45 0301 	orr.w	r3, r5, r1
 80043ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80043f2:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80043f6:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80043fa:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 80043fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004402:	1c9a      	adds	r2, r3, #2
 8004404:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004408:	4413      	add	r3, r2
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	b2da      	uxtb	r2, r3
 800440e:	f04f 0300 	mov.w	r3, #0
 8004412:	f04f 0000 	mov.w	r0, #0
 8004416:	f04f 0100 	mov.w	r1, #0
 800441a:	0419      	lsls	r1, r3, #16
 800441c:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8004420:	0410      	lsls	r0, r2, #16
 8004422:	ea44 0300 	orr.w	r3, r4, r0
 8004426:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800442a:	ea45 0301 	orr.w	r3, r5, r1
 800442e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004432:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8004436:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800443a:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800443e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004442:	1cda      	adds	r2, r3, #3
 8004444:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004448:	4413      	add	r3, r2
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	b2da      	uxtb	r2, r3
 800444e:	f04f 0300 	mov.w	r3, #0
 8004452:	0a14      	lsrs	r4, r2, #8
 8004454:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 8004458:	0613      	lsls	r3, r2, #24
 800445a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800445e:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8004462:	4623      	mov	r3, r4
 8004464:	4303      	orrs	r3, r0
 8004466:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800446a:	462b      	mov	r3, r5
 800446c:	430b      	orrs	r3, r1
 800446e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004472:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8004476:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800447a:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 800447e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004482:	1d1a      	adds	r2, r3, #4
 8004484:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004488:	4413      	add	r3, r2
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	b2da      	uxtb	r2, r3
 800448e:	f04f 0300 	mov.w	r3, #0
 8004492:	f04f 0000 	mov.w	r0, #0
 8004496:	f04f 0100 	mov.w	r1, #0
 800449a:	0011      	movs	r1, r2
 800449c:	2000      	movs	r0, #0
 800449e:	ea44 0300 	orr.w	r3, r4, r0
 80044a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80044a6:	ea45 0301 	orr.w	r3, r5, r1
 80044aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80044ae:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80044b2:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80044b6:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 80044ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80044be:	1d5a      	adds	r2, r3, #5
 80044c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80044c4:	4413      	add	r3, r2
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	f04f 0300 	mov.w	r3, #0
 80044ce:	f04f 0000 	mov.w	r0, #0
 80044d2:	f04f 0100 	mov.w	r1, #0
 80044d6:	0211      	lsls	r1, r2, #8
 80044d8:	2000      	movs	r0, #0
 80044da:	ea44 0300 	orr.w	r3, r4, r0
 80044de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80044e2:	ea45 0301 	orr.w	r3, r5, r1
 80044e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80044ea:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 80044ee:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80044f2:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 80044f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80044fa:	1d9a      	adds	r2, r3, #6
 80044fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004500:	4413      	add	r3, r2
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	b2da      	uxtb	r2, r3
 8004506:	f04f 0300 	mov.w	r3, #0
 800450a:	f04f 0000 	mov.w	r0, #0
 800450e:	f04f 0100 	mov.w	r1, #0
 8004512:	0411      	lsls	r1, r2, #16
 8004514:	2000      	movs	r0, #0
 8004516:	ea44 0300 	orr.w	r3, r4, r0
 800451a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800451e:	ea45 0301 	orr.w	r3, r5, r1
 8004522:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004526:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 800452a:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800452e:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 8004532:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004536:	1dda      	adds	r2, r3, #7
 8004538:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800453c:	4413      	add	r3, r2
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	b2da      	uxtb	r2, r3
 8004542:	f04f 0300 	mov.w	r3, #0
 8004546:	f04f 0000 	mov.w	r0, #0
 800454a:	f04f 0100 	mov.w	r1, #0
 800454e:	0611      	lsls	r1, r2, #24
 8004550:	2000      	movs	r0, #0
 8004552:	ea44 0300 	orr.w	r3, r4, r0
 8004556:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800455a:	ea45 0301 	orr.w	r3, r5, r1
 800455e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004562:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8004566:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      this->y = u_y.real;
 800456a:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800456e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004572:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8004576:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800457a:	3308      	adds	r3, #8
 800457c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8004580:	f04f 0200 	mov.w	r2, #0
 8004584:	f04f 0300 	mov.w	r3, #0
 8004588:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800458c:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8004590:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8004594:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004598:	4413      	add	r3, r2
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	b2da      	uxtb	r2, r3
 800459e:	f04f 0300 	mov.w	r3, #0
 80045a2:	ea40 0402 	orr.w	r4, r0, r2
 80045a6:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 80045aa:	430b      	orrs	r3, r1
 80045ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80045b0:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80045b4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80045b8:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 80045bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80045c0:	1c5a      	adds	r2, r3, #1
 80045c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80045c6:	4413      	add	r3, r2
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	b2da      	uxtb	r2, r3
 80045cc:	f04f 0300 	mov.w	r3, #0
 80045d0:	f04f 0000 	mov.w	r0, #0
 80045d4:	f04f 0100 	mov.w	r1, #0
 80045d8:	0219      	lsls	r1, r3, #8
 80045da:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80045de:	0210      	lsls	r0, r2, #8
 80045e0:	ea44 0300 	orr.w	r3, r4, r0
 80045e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80045e8:	ea45 0301 	orr.w	r3, r5, r1
 80045ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80045f0:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 80045f4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80045f8:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 80045fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004600:	1c9a      	adds	r2, r3, #2
 8004602:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004606:	4413      	add	r3, r2
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	b2da      	uxtb	r2, r3
 800460c:	f04f 0300 	mov.w	r3, #0
 8004610:	f04f 0000 	mov.w	r0, #0
 8004614:	f04f 0100 	mov.w	r1, #0
 8004618:	0419      	lsls	r1, r3, #16
 800461a:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 800461e:	0410      	lsls	r0, r2, #16
 8004620:	ea44 0300 	orr.w	r3, r4, r0
 8004624:	67bb      	str	r3, [r7, #120]	; 0x78
 8004626:	ea45 0301 	orr.w	r3, r5, r1
 800462a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800462c:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8004630:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004634:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8004638:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800463c:	1cda      	adds	r2, r3, #3
 800463e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004642:	4413      	add	r3, r2
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	b2da      	uxtb	r2, r3
 8004648:	f04f 0300 	mov.w	r3, #0
 800464c:	0a14      	lsrs	r4, r2, #8
 800464e:	677c      	str	r4, [r7, #116]	; 0x74
 8004650:	0613      	lsls	r3, r2, #24
 8004652:	673b      	str	r3, [r7, #112]	; 0x70
 8004654:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8004658:	4623      	mov	r3, r4
 800465a:	4303      	orrs	r3, r0
 800465c:	66bb      	str	r3, [r7, #104]	; 0x68
 800465e:	462b      	mov	r3, r5
 8004660:	430b      	orrs	r3, r1
 8004662:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004664:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8004668:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800466c:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8004670:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004674:	1d1a      	adds	r2, r3, #4
 8004676:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800467a:	4413      	add	r3, r2
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	b2da      	uxtb	r2, r3
 8004680:	f04f 0300 	mov.w	r3, #0
 8004684:	f04f 0000 	mov.w	r0, #0
 8004688:	f04f 0100 	mov.w	r1, #0
 800468c:	0011      	movs	r1, r2
 800468e:	2000      	movs	r0, #0
 8004690:	ea44 0300 	orr.w	r3, r4, r0
 8004694:	663b      	str	r3, [r7, #96]	; 0x60
 8004696:	ea45 0301 	orr.w	r3, r5, r1
 800469a:	667b      	str	r3, [r7, #100]	; 0x64
 800469c:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80046a0:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80046a4:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 80046a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80046ac:	1d5a      	adds	r2, r3, #5
 80046ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80046b2:	4413      	add	r3, r2
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	f04f 0300 	mov.w	r3, #0
 80046bc:	f04f 0000 	mov.w	r0, #0
 80046c0:	f04f 0100 	mov.w	r1, #0
 80046c4:	0211      	lsls	r1, r2, #8
 80046c6:	2000      	movs	r0, #0
 80046c8:	ea44 0300 	orr.w	r3, r4, r0
 80046cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80046ce:	ea45 0301 	orr.w	r3, r5, r1
 80046d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046d4:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80046d8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80046dc:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 80046e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80046e4:	1d9a      	adds	r2, r3, #6
 80046e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80046ea:	4413      	add	r3, r2
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	b2da      	uxtb	r2, r3
 80046f0:	f04f 0300 	mov.w	r3, #0
 80046f4:	f04f 0000 	mov.w	r0, #0
 80046f8:	f04f 0100 	mov.w	r1, #0
 80046fc:	0411      	lsls	r1, r2, #16
 80046fe:	2000      	movs	r0, #0
 8004700:	ea44 0300 	orr.w	r3, r4, r0
 8004704:	653b      	str	r3, [r7, #80]	; 0x50
 8004706:	ea45 0301 	orr.w	r3, r5, r1
 800470a:	657b      	str	r3, [r7, #84]	; 0x54
 800470c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8004710:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004714:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8004718:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800471c:	1dda      	adds	r2, r3, #7
 800471e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004722:	4413      	add	r3, r2
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	b2da      	uxtb	r2, r3
 8004728:	f04f 0300 	mov.w	r3, #0
 800472c:	f04f 0000 	mov.w	r0, #0
 8004730:	f04f 0100 	mov.w	r1, #0
 8004734:	0611      	lsls	r1, r2, #24
 8004736:	2000      	movs	r0, #0
 8004738:	ea44 0300 	orr.w	r3, r4, r0
 800473c:	64bb      	str	r3, [r7, #72]	; 0x48
 800473e:	ea45 0301 	orr.w	r3, r5, r1
 8004742:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004744:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8004748:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      this->z = u_z.real;
 800474c:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8004750:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004754:	e9c3 0106 	strd	r0, r1, [r3, #24]
      offset += sizeof(this->z);
 8004758:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800475c:	3308      	adds	r3, #8
 800475e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.base = 0;
 8004762:	f04f 0200 	mov.w	r2, #0
 8004766:	f04f 0300 	mov.w	r3, #0
 800476a:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800476e:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8004772:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8004776:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800477a:	4413      	add	r3, r2
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	b2da      	uxtb	r2, r3
 8004780:	f04f 0300 	mov.w	r3, #0
 8004784:	ea40 0402 	orr.w	r4, r0, r2
 8004788:	643c      	str	r4, [r7, #64]	; 0x40
 800478a:	430b      	orrs	r3, r1
 800478c:	647b      	str	r3, [r7, #68]	; 0x44
 800478e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8004792:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004796:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	; 0x110
 800479a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800479e:	1c5a      	adds	r2, r3, #1
 80047a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80047a4:	4413      	add	r3, r2
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	f04f 0300 	mov.w	r3, #0
 80047ae:	f04f 0000 	mov.w	r0, #0
 80047b2:	f04f 0100 	mov.w	r1, #0
 80047b6:	0219      	lsls	r1, r3, #8
 80047b8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80047bc:	0210      	lsls	r0, r2, #8
 80047be:	ea44 0300 	orr.w	r3, r4, r0
 80047c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80047c4:	ea45 0301 	orr.w	r3, r5, r1
 80047c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047ca:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80047ce:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80047d2:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	; 0x110
 80047d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80047da:	1c9a      	adds	r2, r3, #2
 80047dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80047e0:	4413      	add	r3, r2
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	b2da      	uxtb	r2, r3
 80047e6:	f04f 0300 	mov.w	r3, #0
 80047ea:	f04f 0000 	mov.w	r0, #0
 80047ee:	f04f 0100 	mov.w	r1, #0
 80047f2:	0419      	lsls	r1, r3, #16
 80047f4:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 80047f8:	0410      	lsls	r0, r2, #16
 80047fa:	ea44 0300 	orr.w	r3, r4, r0
 80047fe:	633b      	str	r3, [r7, #48]	; 0x30
 8004800:	ea45 0301 	orr.w	r3, r5, r1
 8004804:	637b      	str	r3, [r7, #52]	; 0x34
 8004806:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800480a:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800480e:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8004812:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004816:	1cda      	adds	r2, r3, #3
 8004818:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800481c:	4413      	add	r3, r2
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	b2da      	uxtb	r2, r3
 8004822:	f04f 0300 	mov.w	r3, #0
 8004826:	0a14      	lsrs	r4, r2, #8
 8004828:	62fc      	str	r4, [r7, #44]	; 0x2c
 800482a:	0613      	lsls	r3, r2, #24
 800482c:	62bb      	str	r3, [r7, #40]	; 0x28
 800482e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8004832:	4623      	mov	r3, r4
 8004834:	4303      	orrs	r3, r0
 8004836:	623b      	str	r3, [r7, #32]
 8004838:	462b      	mov	r3, r5
 800483a:	430b      	orrs	r3, r1
 800483c:	627b      	str	r3, [r7, #36]	; 0x24
 800483e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004842:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004846:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800484a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800484e:	3304      	adds	r3, #4
 8004850:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8004854:	4413      	add	r3, r2
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	b2dc      	uxtb	r4, r3
 800485a:	f04f 0500 	mov.w	r5, #0
 800485e:	f04f 0200 	mov.w	r2, #0
 8004862:	f04f 0300 	mov.w	r3, #0
 8004866:	0023      	movs	r3, r4
 8004868:	2200      	movs	r2, #0
 800486a:	ea40 0402 	orr.w	r4, r0, r2
 800486e:	61bc      	str	r4, [r7, #24]
 8004870:	430b      	orrs	r3, r1
 8004872:	61fb      	str	r3, [r7, #28]
 8004874:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8004878:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800487c:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8004880:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004884:	3305      	adds	r3, #5
 8004886:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800488a:	4413      	add	r3, r2
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	b2dc      	uxtb	r4, r3
 8004890:	f04f 0500 	mov.w	r5, #0
 8004894:	f04f 0200 	mov.w	r2, #0
 8004898:	f04f 0300 	mov.w	r3, #0
 800489c:	0223      	lsls	r3, r4, #8
 800489e:	2200      	movs	r2, #0
 80048a0:	ea40 0402 	orr.w	r4, r0, r2
 80048a4:	613c      	str	r4, [r7, #16]
 80048a6:	430b      	orrs	r3, r1
 80048a8:	617b      	str	r3, [r7, #20]
 80048aa:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80048ae:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80048b2:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80048b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80048ba:	3306      	adds	r3, #6
 80048bc:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80048c0:	4413      	add	r3, r2
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	b2dc      	uxtb	r4, r3
 80048c6:	f04f 0500 	mov.w	r5, #0
 80048ca:	f04f 0200 	mov.w	r2, #0
 80048ce:	f04f 0300 	mov.w	r3, #0
 80048d2:	0423      	lsls	r3, r4, #16
 80048d4:	2200      	movs	r2, #0
 80048d6:	ea40 0402 	orr.w	r4, r0, r2
 80048da:	60bc      	str	r4, [r7, #8]
 80048dc:	430b      	orrs	r3, r1
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80048e4:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80048e8:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80048ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80048f0:	3307      	adds	r3, #7
 80048f2:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80048f6:	4413      	add	r3, r2
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	b2dc      	uxtb	r4, r3
 80048fc:	f04f 0500 	mov.w	r5, #0
 8004900:	f04f 0200 	mov.w	r2, #0
 8004904:	f04f 0300 	mov.w	r3, #0
 8004908:	0623      	lsls	r3, r4, #24
 800490a:	2200      	movs	r2, #0
 800490c:	ea40 0402 	orr.w	r4, r0, r2
 8004910:	603c      	str	r4, [r7, #0]
 8004912:	430b      	orrs	r3, r1
 8004914:	607b      	str	r3, [r7, #4]
 8004916:	e9d7 3400 	ldrd	r3, r4, [r7]
 800491a:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      this->w = u_w.real;
 800491e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8004922:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8004926:	e9c1 2308 	strd	r2, r3, [r1, #32]
      offset += sizeof(this->w);
 800492a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800492e:	3308      	adds	r3, #8
 8004930:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
     return offset;
 8004934:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
    }
 8004938:	4618      	mov	r0, r3
 800493a:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800493e:	46bd      	mov	sp, r7
 8004940:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004944:	4770      	bx	lr
	...

08004948 <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Quaternion"; };
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	4b03      	ldr	r3, [pc, #12]	; (8004960 <_ZN13geometry_msgs10Quaternion7getTypeEv+0x18>)
 8004952:	4618      	mov	r0, r3
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	08010820 	.word	0x08010820

08004964 <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    virtual const char * getMD5() override { return "a779879fadf0160734f906b8c19c7004"; };
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	4b03      	ldr	r3, [pc, #12]	; (800497c <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x18>)
 800496e:	4618      	mov	r0, r3
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	0801083c 	.word	0x0801083c

08004980 <_ZN11sensor_msgs3ImuC1Ev>:
      double angular_velocity_covariance[9];
      typedef geometry_msgs::Vector3 _linear_acceleration_type;
      _linear_acceleration_type linear_acceleration;
      double linear_acceleration_covariance[9];

    Imu():
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
      orientation(),
      orientation_covariance(),
      angular_velocity(),
      angular_velocity_covariance(),
      linear_acceleration(),
      linear_acceleration_covariance()
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4618      	mov	r0, r3
 800498c:	f7fd fb2e 	bl	8001fec <_ZN3ros3MsgC1Ev>
 8004990:	4a24      	ldr	r2, [pc, #144]	; (8004a24 <_ZN11sensor_msgs3ImuC1Ev+0xa4>)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	601a      	str	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	3304      	adds	r3, #4
 800499a:	4618      	mov	r0, r3
 800499c:	f7ff f84a 	bl	8003a34 <_ZN8std_msgs6HeaderC1Ev>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	3318      	adds	r3, #24
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7ff f9d9 	bl	8003d5c <_ZN13geometry_msgs10QuaternionC1Ev>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80049b0:	2308      	movs	r3, #8
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	db08      	blt.n	80049c8 <_ZN11sensor_msgs3ImuC1Ev+0x48>
 80049b6:	f04f 0000 	mov.w	r0, #0
 80049ba:	f04f 0100 	mov.w	r1, #0
 80049be:	e9c2 0100 	strd	r0, r1, [r2]
 80049c2:	3208      	adds	r2, #8
 80049c4:	3b01      	subs	r3, #1
 80049c6:	e7f4      	b.n	80049b2 <_ZN11sensor_msgs3ImuC1Ev+0x32>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	3388      	adds	r3, #136	; 0x88
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7fe fb19 	bl	8003004 <_ZN13geometry_msgs7Vector3C1Ev>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 80049d8:	2308      	movs	r3, #8
 80049da:	2b00      	cmp	r3, #0
 80049dc:	db08      	blt.n	80049f0 <_ZN11sensor_msgs3ImuC1Ev+0x70>
 80049de:	f04f 0000 	mov.w	r0, #0
 80049e2:	f04f 0100 	mov.w	r1, #0
 80049e6:	e9c2 0100 	strd	r0, r1, [r2]
 80049ea:	3208      	adds	r2, #8
 80049ec:	3b01      	subs	r3, #1
 80049ee:	e7f4      	b.n	80049da <_ZN11sensor_msgs3ImuC1Ev+0x5a>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	33f0      	adds	r3, #240	; 0xf0
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7fe fb05 	bl	8003004 <_ZN13geometry_msgs7Vector3C1Ev>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f503 7288 	add.w	r2, r3, #272	; 0x110
 8004a00:	2308      	movs	r3, #8
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	db08      	blt.n	8004a18 <_ZN11sensor_msgs3ImuC1Ev+0x98>
 8004a06:	f04f 0000 	mov.w	r0, #0
 8004a0a:	f04f 0100 	mov.w	r1, #0
 8004a0e:	e9c2 0100 	strd	r0, r1, [r2]
 8004a12:	3208      	adds	r2, #8
 8004a14:	3b01      	subs	r3, #1
 8004a16:	e7f4      	b.n	8004a02 <_ZN11sensor_msgs3ImuC1Ev+0x82>
    {
    }
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3708      	adds	r7, #8
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	08010978 	.word	0x08010978

08004a28 <_ZNK11sensor_msgs3Imu9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b08c      	sub	sp, #48	; 0x30
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004a32:	2300      	movs	r3, #0
 8004a34:	62fb      	str	r3, [r7, #44]	; 0x2c
      offset += this->header.serialize(outbuffer + offset);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	1d18      	adds	r0, r3, #4
 8004a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	4413      	add	r3, r2
 8004a40:	4619      	mov	r1, r3
 8004a42:	f7ff f817 	bl	8003a74 <_ZNK8std_msgs6Header9serializeEPh>
 8004a46:	4602      	mov	r2, r0
 8004a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a4a:	4413      	add	r3, r2
 8004a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      offset += this->orientation.serialize(outbuffer + offset);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f103 0018 	add.w	r0, r3, #24
 8004a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a56:	683a      	ldr	r2, [r7, #0]
 8004a58:	4413      	add	r3, r2
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	f7ff f9ac 	bl	8003db8 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 8004a60:	4602      	mov	r2, r0
 8004a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a64:	4413      	add	r3, r2
 8004a66:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8004a68:	2300      	movs	r3, #0
 8004a6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6e:	2b08      	cmp	r3, #8
 8004a70:	d87e      	bhi.n	8004b70 <_ZNK11sensor_msgs3Imu9serializeEPh+0x148>
      union {
        double real;
        uint64_t base;
      } u_orientation_covariancei;
      u_orientation_covariancei.real = this->orientation_covariance[i];
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a76:	3308      	adds	r3, #8
 8004a78:	00db      	lsls	r3, r3, #3
 8004a7a:	4413      	add	r3, r2
 8004a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a80:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_orientation_covariancei.base >> (8 * 0)) & 0xFF;
 8004a84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a8a:	6838      	ldr	r0, [r7, #0]
 8004a8c:	4401      	add	r1, r0
 8004a8e:	b2d3      	uxtb	r3, r2
 8004a90:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_orientation_covariancei.base >> (8 * 1)) & 0xFF;
 8004a92:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004a96:	f04f 0200 	mov.w	r2, #0
 8004a9a:	f04f 0300 	mov.w	r3, #0
 8004a9e:	0a02      	lsrs	r2, r0, #8
 8004aa0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004aa4:	0a0b      	lsrs	r3, r1, #8
 8004aa6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004aa8:	3101      	adds	r1, #1
 8004aaa:	6838      	ldr	r0, [r7, #0]
 8004aac:	4401      	add	r1, r0
 8004aae:	b2d3      	uxtb	r3, r2
 8004ab0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_orientation_covariancei.base >> (8 * 2)) & 0xFF;
 8004ab2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004ab6:	f04f 0200 	mov.w	r2, #0
 8004aba:	f04f 0300 	mov.w	r3, #0
 8004abe:	0c02      	lsrs	r2, r0, #16
 8004ac0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004ac4:	0c0b      	lsrs	r3, r1, #16
 8004ac6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ac8:	3102      	adds	r1, #2
 8004aca:	6838      	ldr	r0, [r7, #0]
 8004acc:	4401      	add	r1, r0
 8004ace:	b2d3      	uxtb	r3, r2
 8004ad0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_orientation_covariancei.base >> (8 * 3)) & 0xFF;
 8004ad2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004ad6:	f04f 0200 	mov.w	r2, #0
 8004ada:	f04f 0300 	mov.w	r3, #0
 8004ade:	0e02      	lsrs	r2, r0, #24
 8004ae0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004ae4:	0e0b      	lsrs	r3, r1, #24
 8004ae6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ae8:	3103      	adds	r1, #3
 8004aea:	6838      	ldr	r0, [r7, #0]
 8004aec:	4401      	add	r1, r0
 8004aee:	b2d3      	uxtb	r3, r2
 8004af0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_orientation_covariancei.base >> (8 * 4)) & 0xFF;
 8004af2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004af6:	f04f 0200 	mov.w	r2, #0
 8004afa:	f04f 0300 	mov.w	r3, #0
 8004afe:	000a      	movs	r2, r1
 8004b00:	2300      	movs	r3, #0
 8004b02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b04:	3104      	adds	r1, #4
 8004b06:	6838      	ldr	r0, [r7, #0]
 8004b08:	4401      	add	r1, r0
 8004b0a:	b2d3      	uxtb	r3, r2
 8004b0c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_orientation_covariancei.base >> (8 * 5)) & 0xFF;
 8004b0e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004b12:	f04f 0200 	mov.w	r2, #0
 8004b16:	f04f 0300 	mov.w	r3, #0
 8004b1a:	0a0a      	lsrs	r2, r1, #8
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b20:	3105      	adds	r1, #5
 8004b22:	6838      	ldr	r0, [r7, #0]
 8004b24:	4401      	add	r1, r0
 8004b26:	b2d3      	uxtb	r3, r2
 8004b28:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_orientation_covariancei.base >> (8 * 6)) & 0xFF;
 8004b2a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004b2e:	f04f 0200 	mov.w	r2, #0
 8004b32:	f04f 0300 	mov.w	r3, #0
 8004b36:	0c0a      	lsrs	r2, r1, #16
 8004b38:	2300      	movs	r3, #0
 8004b3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b3c:	3106      	adds	r1, #6
 8004b3e:	6838      	ldr	r0, [r7, #0]
 8004b40:	4401      	add	r1, r0
 8004b42:	b2d3      	uxtb	r3, r2
 8004b44:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_orientation_covariancei.base >> (8 * 7)) & 0xFF;
 8004b46:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004b4a:	f04f 0200 	mov.w	r2, #0
 8004b4e:	f04f 0300 	mov.w	r3, #0
 8004b52:	0e0a      	lsrs	r2, r1, #24
 8004b54:	2300      	movs	r3, #0
 8004b56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b58:	3107      	adds	r1, #7
 8004b5a:	6838      	ldr	r0, [r7, #0]
 8004b5c:	4401      	add	r1, r0
 8004b5e:	b2d3      	uxtb	r3, r2
 8004b60:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->orientation_covariance[i]);
 8004b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b64:	3308      	adds	r3, #8
 8004b66:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8004b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b6e:	e77d      	b.n	8004a6c <_ZNK11sensor_msgs3Imu9serializeEPh+0x44>
      }
      offset += this->angular_velocity.serialize(outbuffer + offset);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f103 0088 	add.w	r0, r3, #136	; 0x88
 8004b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	f7fe fa69 	bl	8003054 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8004b82:	4602      	mov	r2, r0
 8004b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b86:	4413      	add	r3, r2
 8004b88:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b90:	2b08      	cmp	r3, #8
 8004b92:	d87e      	bhi.n	8004c92 <_ZNK11sensor_msgs3Imu9serializeEPh+0x26a>
      union {
        double real;
        uint64_t base;
      } u_angular_velocity_covariancei;
      u_angular_velocity_covariancei.real = this->angular_velocity_covariance[i];
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b98:	3315      	adds	r3, #21
 8004b9a:	00db      	lsls	r3, r3, #3
 8004b9c:	4413      	add	r3, r2
 8004b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba2:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_angular_velocity_covariancei.base >> (8 * 0)) & 0xFF;
 8004ba6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004baa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bac:	6838      	ldr	r0, [r7, #0]
 8004bae:	4401      	add	r1, r0
 8004bb0:	b2d3      	uxtb	r3, r2
 8004bb2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_angular_velocity_covariancei.base >> (8 * 1)) & 0xFF;
 8004bb4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004bb8:	f04f 0200 	mov.w	r2, #0
 8004bbc:	f04f 0300 	mov.w	r3, #0
 8004bc0:	0a02      	lsrs	r2, r0, #8
 8004bc2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004bc6:	0a0b      	lsrs	r3, r1, #8
 8004bc8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bca:	3101      	adds	r1, #1
 8004bcc:	6838      	ldr	r0, [r7, #0]
 8004bce:	4401      	add	r1, r0
 8004bd0:	b2d3      	uxtb	r3, r2
 8004bd2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_angular_velocity_covariancei.base >> (8 * 2)) & 0xFF;
 8004bd4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004bd8:	f04f 0200 	mov.w	r2, #0
 8004bdc:	f04f 0300 	mov.w	r3, #0
 8004be0:	0c02      	lsrs	r2, r0, #16
 8004be2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004be6:	0c0b      	lsrs	r3, r1, #16
 8004be8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bea:	3102      	adds	r1, #2
 8004bec:	6838      	ldr	r0, [r7, #0]
 8004bee:	4401      	add	r1, r0
 8004bf0:	b2d3      	uxtb	r3, r2
 8004bf2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_angular_velocity_covariancei.base >> (8 * 3)) & 0xFF;
 8004bf4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004bf8:	f04f 0200 	mov.w	r2, #0
 8004bfc:	f04f 0300 	mov.w	r3, #0
 8004c00:	0e02      	lsrs	r2, r0, #24
 8004c02:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004c06:	0e0b      	lsrs	r3, r1, #24
 8004c08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c0a:	3103      	adds	r1, #3
 8004c0c:	6838      	ldr	r0, [r7, #0]
 8004c0e:	4401      	add	r1, r0
 8004c10:	b2d3      	uxtb	r3, r2
 8004c12:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_angular_velocity_covariancei.base >> (8 * 4)) & 0xFF;
 8004c14:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004c18:	f04f 0200 	mov.w	r2, #0
 8004c1c:	f04f 0300 	mov.w	r3, #0
 8004c20:	000a      	movs	r2, r1
 8004c22:	2300      	movs	r3, #0
 8004c24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c26:	3104      	adds	r1, #4
 8004c28:	6838      	ldr	r0, [r7, #0]
 8004c2a:	4401      	add	r1, r0
 8004c2c:	b2d3      	uxtb	r3, r2
 8004c2e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_angular_velocity_covariancei.base >> (8 * 5)) & 0xFF;
 8004c30:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004c34:	f04f 0200 	mov.w	r2, #0
 8004c38:	f04f 0300 	mov.w	r3, #0
 8004c3c:	0a0a      	lsrs	r2, r1, #8
 8004c3e:	2300      	movs	r3, #0
 8004c40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c42:	3105      	adds	r1, #5
 8004c44:	6838      	ldr	r0, [r7, #0]
 8004c46:	4401      	add	r1, r0
 8004c48:	b2d3      	uxtb	r3, r2
 8004c4a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_angular_velocity_covariancei.base >> (8 * 6)) & 0xFF;
 8004c4c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004c50:	f04f 0200 	mov.w	r2, #0
 8004c54:	f04f 0300 	mov.w	r3, #0
 8004c58:	0c0a      	lsrs	r2, r1, #16
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c5e:	3106      	adds	r1, #6
 8004c60:	6838      	ldr	r0, [r7, #0]
 8004c62:	4401      	add	r1, r0
 8004c64:	b2d3      	uxtb	r3, r2
 8004c66:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_angular_velocity_covariancei.base >> (8 * 7)) & 0xFF;
 8004c68:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004c6c:	f04f 0200 	mov.w	r2, #0
 8004c70:	f04f 0300 	mov.w	r3, #0
 8004c74:	0e0a      	lsrs	r2, r1, #24
 8004c76:	2300      	movs	r3, #0
 8004c78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c7a:	3107      	adds	r1, #7
 8004c7c:	6838      	ldr	r0, [r7, #0]
 8004c7e:	4401      	add	r1, r0
 8004c80:	b2d3      	uxtb	r3, r2
 8004c82:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->angular_velocity_covariance[i]);
 8004c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c86:	3308      	adds	r3, #8
 8004c88:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c90:	e77d      	b.n	8004b8e <_ZNK11sensor_msgs3Imu9serializeEPh+0x166>
      }
      offset += this->linear_acceleration.serialize(outbuffer + offset);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 8004c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	f7fe f9d8 	bl	8003054 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca8:	4413      	add	r3, r2
 8004caa:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8004cac:	2300      	movs	r3, #0
 8004cae:	623b      	str	r3, [r7, #32]
 8004cb0:	6a3b      	ldr	r3, [r7, #32]
 8004cb2:	2b08      	cmp	r3, #8
 8004cb4:	d87e      	bhi.n	8004db4 <_ZNK11sensor_msgs3Imu9serializeEPh+0x38c>
      union {
        double real;
        uint64_t base;
      } u_linear_acceleration_covariancei;
      u_linear_acceleration_covariancei.real = this->linear_acceleration_covariance[i];
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	6a3b      	ldr	r3, [r7, #32]
 8004cba:	3322      	adds	r3, #34	; 0x22
 8004cbc:	00db      	lsls	r3, r3, #3
 8004cbe:	4413      	add	r3, r2
 8004cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc4:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_linear_acceleration_covariancei.base >> (8 * 0)) & 0xFF;
 8004cc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ccc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cce:	6838      	ldr	r0, [r7, #0]
 8004cd0:	4401      	add	r1, r0
 8004cd2:	b2d3      	uxtb	r3, r2
 8004cd4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_linear_acceleration_covariancei.base >> (8 * 1)) & 0xFF;
 8004cd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004cda:	f04f 0200 	mov.w	r2, #0
 8004cde:	f04f 0300 	mov.w	r3, #0
 8004ce2:	0a02      	lsrs	r2, r0, #8
 8004ce4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004ce8:	0a0b      	lsrs	r3, r1, #8
 8004cea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cec:	3101      	adds	r1, #1
 8004cee:	6838      	ldr	r0, [r7, #0]
 8004cf0:	4401      	add	r1, r0
 8004cf2:	b2d3      	uxtb	r3, r2
 8004cf4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_linear_acceleration_covariancei.base >> (8 * 2)) & 0xFF;
 8004cf6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004cfa:	f04f 0200 	mov.w	r2, #0
 8004cfe:	f04f 0300 	mov.w	r3, #0
 8004d02:	0c02      	lsrs	r2, r0, #16
 8004d04:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004d08:	0c0b      	lsrs	r3, r1, #16
 8004d0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d0c:	3102      	adds	r1, #2
 8004d0e:	6838      	ldr	r0, [r7, #0]
 8004d10:	4401      	add	r1, r0
 8004d12:	b2d3      	uxtb	r3, r2
 8004d14:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_linear_acceleration_covariancei.base >> (8 * 3)) & 0xFF;
 8004d16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d1a:	f04f 0200 	mov.w	r2, #0
 8004d1e:	f04f 0300 	mov.w	r3, #0
 8004d22:	0e02      	lsrs	r2, r0, #24
 8004d24:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004d28:	0e0b      	lsrs	r3, r1, #24
 8004d2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d2c:	3103      	adds	r1, #3
 8004d2e:	6838      	ldr	r0, [r7, #0]
 8004d30:	4401      	add	r1, r0
 8004d32:	b2d3      	uxtb	r3, r2
 8004d34:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_linear_acceleration_covariancei.base >> (8 * 4)) & 0xFF;
 8004d36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d3a:	f04f 0200 	mov.w	r2, #0
 8004d3e:	f04f 0300 	mov.w	r3, #0
 8004d42:	000a      	movs	r2, r1
 8004d44:	2300      	movs	r3, #0
 8004d46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d48:	3104      	adds	r1, #4
 8004d4a:	6838      	ldr	r0, [r7, #0]
 8004d4c:	4401      	add	r1, r0
 8004d4e:	b2d3      	uxtb	r3, r2
 8004d50:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_linear_acceleration_covariancei.base >> (8 * 5)) & 0xFF;
 8004d52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d56:	f04f 0200 	mov.w	r2, #0
 8004d5a:	f04f 0300 	mov.w	r3, #0
 8004d5e:	0a0a      	lsrs	r2, r1, #8
 8004d60:	2300      	movs	r3, #0
 8004d62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d64:	3105      	adds	r1, #5
 8004d66:	6838      	ldr	r0, [r7, #0]
 8004d68:	4401      	add	r1, r0
 8004d6a:	b2d3      	uxtb	r3, r2
 8004d6c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_linear_acceleration_covariancei.base >> (8 * 6)) & 0xFF;
 8004d6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d72:	f04f 0200 	mov.w	r2, #0
 8004d76:	f04f 0300 	mov.w	r3, #0
 8004d7a:	0c0a      	lsrs	r2, r1, #16
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d80:	3106      	adds	r1, #6
 8004d82:	6838      	ldr	r0, [r7, #0]
 8004d84:	4401      	add	r1, r0
 8004d86:	b2d3      	uxtb	r3, r2
 8004d88:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_linear_acceleration_covariancei.base >> (8 * 7)) & 0xFF;
 8004d8a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d8e:	f04f 0200 	mov.w	r2, #0
 8004d92:	f04f 0300 	mov.w	r3, #0
 8004d96:	0e0a      	lsrs	r2, r1, #24
 8004d98:	2300      	movs	r3, #0
 8004d9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d9c:	3107      	adds	r1, #7
 8004d9e:	6838      	ldr	r0, [r7, #0]
 8004da0:	4401      	add	r1, r0
 8004da2:	b2d3      	uxtb	r3, r2
 8004da4:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->linear_acceleration_covariance[i]);
 8004da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da8:	3308      	adds	r3, #8
 8004daa:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8004dac:	6a3b      	ldr	r3, [r7, #32]
 8004dae:	3301      	adds	r3, #1
 8004db0:	623b      	str	r3, [r7, #32]
 8004db2:	e77d      	b.n	8004cb0 <_ZNK11sensor_msgs3Imu9serializeEPh+0x288>
      }
      return offset;
 8004db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8004db6:	4618      	mov	r0, r3
 8004db8:	3730      	adds	r7, #48	; 0x30
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <_ZN11sensor_msgs3Imu11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004dbe:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dc2:	b0be      	sub	sp, #248	; 0xf8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 8004dca:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
    {
      int offset = 0;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      offset += this->header.deserialize(inbuffer + offset);
 8004dd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004dd8:	1d18      	adds	r0, r3, #4
 8004dda:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004dde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004de2:	4413      	add	r3, r2
 8004de4:	4619      	mov	r1, r3
 8004de6:	f7fe fedd 	bl	8003ba4 <_ZN8std_msgs6Header11deserializeEPh>
 8004dea:	4602      	mov	r2, r0
 8004dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df0:	4413      	add	r3, r2
 8004df2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      offset += this->orientation.deserialize(inbuffer + offset);
 8004df6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004dfa:	f103 0018 	add.w	r0, r3, #24
 8004dfe:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004e02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e06:	4413      	add	r3, r2
 8004e08:	4619      	mov	r1, r3
 8004e0a:	f7ff f9bf 	bl	800418c <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e14:	4413      	add	r3, r2
 8004e16:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      for( uint32_t i = 0; i < 9; i++){
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004e20:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004e24:	2b08      	cmp	r3, #8
 8004e26:	f200 8100 	bhi.w	800502a <_ZN11sensor_msgs3Imu11deserializeEPh+0x26c>
      union {
        double real;
        uint64_t base;
      } u_orientation_covariancei;
      u_orientation_covariancei.base = 0;
 8004e2a:	f04f 0200 	mov.w	r2, #0
 8004e2e:	f04f 0300 	mov.w	r3, #0
 8004e32:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004e36:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004e3a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004e3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e42:	4413      	add	r3, r2
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	b2da      	uxtb	r2, r3
 8004e48:	f04f 0300 	mov.w	r3, #0
 8004e4c:	ea40 0402 	orr.w	r4, r0, r2
 8004e50:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 8004e54:	430b      	orrs	r3, r1
 8004e56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e5a:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8004e5e:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004e62:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8004e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e6a:	1c5a      	adds	r2, r3, #1
 8004e6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e70:	4413      	add	r3, r2
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	b2da      	uxtb	r2, r3
 8004e76:	f04f 0300 	mov.w	r3, #0
 8004e7a:	f04f 0000 	mov.w	r0, #0
 8004e7e:	f04f 0100 	mov.w	r1, #0
 8004e82:	0219      	lsls	r1, r3, #8
 8004e84:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8004e88:	0210      	lsls	r0, r2, #8
 8004e8a:	ea44 0300 	orr.w	r3, r4, r0
 8004e8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e92:	ea45 0301 	orr.w	r3, r5, r1
 8004e96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004e9a:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8004e9e:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004ea2:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8004ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eaa:	1c9a      	adds	r2, r3, #2
 8004eac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004eb0:	4413      	add	r3, r2
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	b2da      	uxtb	r2, r3
 8004eb6:	f04f 0300 	mov.w	r3, #0
 8004eba:	f04f 0000 	mov.w	r0, #0
 8004ebe:	f04f 0100 	mov.w	r1, #0
 8004ec2:	0419      	lsls	r1, r3, #16
 8004ec4:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8004ec8:	0410      	lsls	r0, r2, #16
 8004eca:	ea44 0300 	orr.w	r3, r4, r0
 8004ece:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ed2:	ea45 0301 	orr.w	r3, r5, r1
 8004ed6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004eda:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8004ede:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004ee2:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eea:	1cda      	adds	r2, r3, #3
 8004eec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ef0:	4413      	add	r3, r2
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	b2da      	uxtb	r2, r3
 8004ef6:	f04f 0300 	mov.w	r3, #0
 8004efa:	ea4f 2912 	mov.w	r9, r2, lsr #8
 8004efe:	ea4f 6802 	mov.w	r8, r2, lsl #24
 8004f02:	ea40 0308 	orr.w	r3, r0, r8
 8004f06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f0a:	ea41 0309 	orr.w	r3, r1, r9
 8004f0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f12:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8004f16:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004f1a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8004f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f22:	1d1a      	adds	r2, r3, #4
 8004f24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004f28:	4413      	add	r3, r2
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	b2da      	uxtb	r2, r3
 8004f2e:	f04f 0300 	mov.w	r3, #0
 8004f32:	f04f 0000 	mov.w	r0, #0
 8004f36:	f04f 0100 	mov.w	r1, #0
 8004f3a:	0011      	movs	r1, r2
 8004f3c:	2000      	movs	r0, #0
 8004f3e:	ea44 0300 	orr.w	r3, r4, r0
 8004f42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f46:	ea45 0301 	orr.w	r3, r5, r1
 8004f4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004f4e:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8004f52:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004f56:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8004f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f5e:	1d5a      	adds	r2, r3, #5
 8004f60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004f64:	4413      	add	r3, r2
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	b2da      	uxtb	r2, r3
 8004f6a:	f04f 0300 	mov.w	r3, #0
 8004f6e:	f04f 0000 	mov.w	r0, #0
 8004f72:	f04f 0100 	mov.w	r1, #0
 8004f76:	0211      	lsls	r1, r2, #8
 8004f78:	2000      	movs	r0, #0
 8004f7a:	ea44 0300 	orr.w	r3, r4, r0
 8004f7e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f82:	ea45 0301 	orr.w	r3, r5, r1
 8004f86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f8a:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8004f8e:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004f92:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8004f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f9a:	1d9a      	adds	r2, r3, #6
 8004f9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004fa0:	4413      	add	r3, r2
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	b2da      	uxtb	r2, r3
 8004fa6:	f04f 0300 	mov.w	r3, #0
 8004faa:	f04f 0000 	mov.w	r0, #0
 8004fae:	f04f 0100 	mov.w	r1, #0
 8004fb2:	0411      	lsls	r1, r2, #16
 8004fb4:	2000      	movs	r0, #0
 8004fb6:	ea44 0300 	orr.w	r3, r4, r0
 8004fba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004fbe:	ea45 0301 	orr.w	r3, r5, r1
 8004fc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004fc6:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8004fca:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004fce:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8004fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fd6:	1dda      	adds	r2, r3, #7
 8004fd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004fdc:	4413      	add	r3, r2
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	b2da      	uxtb	r2, r3
 8004fe2:	f04f 0300 	mov.w	r3, #0
 8004fe6:	f04f 0000 	mov.w	r0, #0
 8004fea:	f04f 0100 	mov.w	r1, #0
 8004fee:	0611      	lsls	r1, r2, #24
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	ea44 0a00 	orr.w	sl, r4, r0
 8004ff6:	ea45 0b01 	orr.w	fp, r5, r1
 8004ffa:	e9c7 ab38 	strd	sl, fp, [r7, #224]	; 0xe0
      this->orientation_covariance[i] = u_orientation_covariancei.real;
 8004ffe:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005002:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8005006:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800500a:	3308      	adds	r3, #8
 800500c:	00db      	lsls	r3, r3, #3
 800500e:	4413      	add	r3, r2
 8005010:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->orientation_covariance[i]);
 8005014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005018:	3308      	adds	r3, #8
 800501a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      for( uint32_t i = 0; i < 9; i++){
 800501e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005022:	3301      	adds	r3, #1
 8005024:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005028:	e6fa      	b.n	8004e20 <_ZN11sensor_msgs3Imu11deserializeEPh+0x62>
      }
      offset += this->angular_velocity.deserialize(inbuffer + offset);
 800502a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800502e:	f103 0088 	add.w	r0, r3, #136	; 0x88
 8005032:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8005036:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800503a:	4413      	add	r3, r2
 800503c:	4619      	mov	r1, r3
 800503e:	f7fe f97c 	bl	800333a <_ZN13geometry_msgs7Vector311deserializeEPh>
 8005042:	4602      	mov	r2, r0
 8005044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005048:	4413      	add	r3, r2
 800504a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      for( uint32_t i = 0; i < 9; i++){
 800504e:	2300      	movs	r3, #0
 8005050:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005054:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005058:	2b08      	cmp	r3, #8
 800505a:	f200 80fc 	bhi.w	8005256 <_ZN11sensor_msgs3Imu11deserializeEPh+0x498>
      union {
        double real;
        uint64_t base;
      } u_angular_velocity_covariancei;
      u_angular_velocity_covariancei.base = 0;
 800505e:	f04f 0200 	mov.w	r2, #0
 8005062:	f04f 0300 	mov.w	r3, #0
 8005066:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800506a:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800506e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8005072:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005076:	4413      	add	r3, r2
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	b2da      	uxtb	r2, r3
 800507c:	f04f 0300 	mov.w	r3, #0
 8005080:	ea40 0402 	orr.w	r4, r0, r2
 8005084:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8005088:	430b      	orrs	r3, r1
 800508a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800508e:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8005092:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005096:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800509a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800509e:	1c5a      	adds	r2, r3, #1
 80050a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050a4:	4413      	add	r3, r2
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	b2da      	uxtb	r2, r3
 80050aa:	f04f 0300 	mov.w	r3, #0
 80050ae:	f04f 0000 	mov.w	r0, #0
 80050b2:	f04f 0100 	mov.w	r1, #0
 80050b6:	0219      	lsls	r1, r3, #8
 80050b8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80050bc:	0210      	lsls	r0, r2, #8
 80050be:	ea44 0300 	orr.w	r3, r4, r0
 80050c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80050c6:	ea45 0301 	orr.w	r3, r5, r1
 80050ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80050ce:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 80050d2:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80050d6:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80050da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050de:	1c9a      	adds	r2, r3, #2
 80050e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050e4:	4413      	add	r3, r2
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	b2da      	uxtb	r2, r3
 80050ea:	f04f 0300 	mov.w	r3, #0
 80050ee:	f04f 0000 	mov.w	r0, #0
 80050f2:	f04f 0100 	mov.w	r1, #0
 80050f6:	0419      	lsls	r1, r3, #16
 80050f8:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 80050fc:	0410      	lsls	r0, r2, #16
 80050fe:	ea44 0300 	orr.w	r3, r4, r0
 8005102:	67bb      	str	r3, [r7, #120]	; 0x78
 8005104:	ea45 0301 	orr.w	r3, r5, r1
 8005108:	67fb      	str	r3, [r7, #124]	; 0x7c
 800510a:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800510e:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005112:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8005116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800511a:	1cda      	adds	r2, r3, #3
 800511c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005120:	4413      	add	r3, r2
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	b2da      	uxtb	r2, r3
 8005126:	f04f 0300 	mov.w	r3, #0
 800512a:	0a14      	lsrs	r4, r2, #8
 800512c:	677c      	str	r4, [r7, #116]	; 0x74
 800512e:	0613      	lsls	r3, r2, #24
 8005130:	673b      	str	r3, [r7, #112]	; 0x70
 8005132:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8005136:	4623      	mov	r3, r4
 8005138:	4303      	orrs	r3, r0
 800513a:	66bb      	str	r3, [r7, #104]	; 0x68
 800513c:	462b      	mov	r3, r5
 800513e:	430b      	orrs	r3, r1
 8005140:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005142:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8005146:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800514a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800514e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005152:	1d1a      	adds	r2, r3, #4
 8005154:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005158:	4413      	add	r3, r2
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	b2da      	uxtb	r2, r3
 800515e:	f04f 0300 	mov.w	r3, #0
 8005162:	f04f 0000 	mov.w	r0, #0
 8005166:	f04f 0100 	mov.w	r1, #0
 800516a:	0011      	movs	r1, r2
 800516c:	2000      	movs	r0, #0
 800516e:	ea44 0300 	orr.w	r3, r4, r0
 8005172:	663b      	str	r3, [r7, #96]	; 0x60
 8005174:	ea45 0301 	orr.w	r3, r5, r1
 8005178:	667b      	str	r3, [r7, #100]	; 0x64
 800517a:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800517e:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005182:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8005186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800518a:	1d5a      	adds	r2, r3, #5
 800518c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005190:	4413      	add	r3, r2
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	b2da      	uxtb	r2, r3
 8005196:	f04f 0300 	mov.w	r3, #0
 800519a:	f04f 0000 	mov.w	r0, #0
 800519e:	f04f 0100 	mov.w	r1, #0
 80051a2:	0211      	lsls	r1, r2, #8
 80051a4:	2000      	movs	r0, #0
 80051a6:	ea44 0300 	orr.w	r3, r4, r0
 80051aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80051ac:	ea45 0301 	orr.w	r3, r5, r1
 80051b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051b2:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80051b6:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80051ba:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80051be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051c2:	1d9a      	adds	r2, r3, #6
 80051c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80051c8:	4413      	add	r3, r2
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	b2da      	uxtb	r2, r3
 80051ce:	f04f 0300 	mov.w	r3, #0
 80051d2:	f04f 0000 	mov.w	r0, #0
 80051d6:	f04f 0100 	mov.w	r1, #0
 80051da:	0411      	lsls	r1, r2, #16
 80051dc:	2000      	movs	r0, #0
 80051de:	ea44 0300 	orr.w	r3, r4, r0
 80051e2:	653b      	str	r3, [r7, #80]	; 0x50
 80051e4:	ea45 0301 	orr.w	r3, r5, r1
 80051e8:	657b      	str	r3, [r7, #84]	; 0x54
 80051ea:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80051ee:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80051f2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80051f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051fa:	1dda      	adds	r2, r3, #7
 80051fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005200:	4413      	add	r3, r2
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	b2da      	uxtb	r2, r3
 8005206:	f04f 0300 	mov.w	r3, #0
 800520a:	f04f 0000 	mov.w	r0, #0
 800520e:	f04f 0100 	mov.w	r1, #0
 8005212:	0611      	lsls	r1, r2, #24
 8005214:	2000      	movs	r0, #0
 8005216:	ea44 0300 	orr.w	r3, r4, r0
 800521a:	64bb      	str	r3, [r7, #72]	; 0x48
 800521c:	ea45 0301 	orr.w	r3, r5, r1
 8005220:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005222:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8005226:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      this->angular_velocity_covariance[i] = u_angular_velocity_covariancei.real;
 800522a:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800522e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8005232:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005236:	3315      	adds	r3, #21
 8005238:	00db      	lsls	r3, r3, #3
 800523a:	4413      	add	r3, r2
 800523c:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->angular_velocity_covariance[i]);
 8005240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005244:	3308      	adds	r3, #8
 8005246:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      for( uint32_t i = 0; i < 9; i++){
 800524a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800524e:	3301      	adds	r3, #1
 8005250:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005254:	e6fe      	b.n	8005054 <_ZN11sensor_msgs3Imu11deserializeEPh+0x296>
      }
      offset += this->linear_acceleration.deserialize(inbuffer + offset);
 8005256:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800525a:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 800525e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8005262:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005266:	4413      	add	r3, r2
 8005268:	4619      	mov	r1, r3
 800526a:	f7fe f866 	bl	800333a <_ZN13geometry_msgs7Vector311deserializeEPh>
 800526e:	4602      	mov	r2, r0
 8005270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005274:	4413      	add	r3, r2
 8005276:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      for( uint32_t i = 0; i < 9; i++){
 800527a:	2300      	movs	r3, #0
 800527c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005280:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005284:	2b08      	cmp	r3, #8
 8005286:	f200 80f8 	bhi.w	800547a <_ZN11sensor_msgs3Imu11deserializeEPh+0x6bc>
      union {
        double real;
        uint64_t base;
      } u_linear_acceleration_covariancei;
      u_linear_acceleration_covariancei.base = 0;
 800528a:	f04f 0200 	mov.w	r2, #0
 800528e:	f04f 0300 	mov.w	r3, #0
 8005292:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005296:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800529a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800529e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80052a2:	4413      	add	r3, r2
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	b2da      	uxtb	r2, r3
 80052a8:	f04f 0300 	mov.w	r3, #0
 80052ac:	ea40 0402 	orr.w	r4, r0, r2
 80052b0:	643c      	str	r4, [r7, #64]	; 0x40
 80052b2:	430b      	orrs	r3, r1
 80052b4:	647b      	str	r3, [r7, #68]	; 0x44
 80052b6:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80052ba:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80052be:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80052c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c6:	1c5a      	adds	r2, r3, #1
 80052c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80052cc:	4413      	add	r3, r2
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	b2da      	uxtb	r2, r3
 80052d2:	f04f 0300 	mov.w	r3, #0
 80052d6:	f04f 0000 	mov.w	r0, #0
 80052da:	f04f 0100 	mov.w	r1, #0
 80052de:	0219      	lsls	r1, r3, #8
 80052e0:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80052e4:	0210      	lsls	r0, r2, #8
 80052e6:	ea44 0300 	orr.w	r3, r4, r0
 80052ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80052ec:	ea45 0301 	orr.w	r3, r5, r1
 80052f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052f2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80052f6:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80052fa:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80052fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005302:	1c9a      	adds	r2, r3, #2
 8005304:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005308:	4413      	add	r3, r2
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	b2da      	uxtb	r2, r3
 800530e:	f04f 0300 	mov.w	r3, #0
 8005312:	f04f 0000 	mov.w	r0, #0
 8005316:	f04f 0100 	mov.w	r1, #0
 800531a:	0419      	lsls	r1, r3, #16
 800531c:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8005320:	0410      	lsls	r0, r2, #16
 8005322:	ea44 0300 	orr.w	r3, r4, r0
 8005326:	633b      	str	r3, [r7, #48]	; 0x30
 8005328:	ea45 0301 	orr.w	r3, r5, r1
 800532c:	637b      	str	r3, [r7, #52]	; 0x34
 800532e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8005332:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005336:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800533a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800533e:	1cda      	adds	r2, r3, #3
 8005340:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005344:	4413      	add	r3, r2
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	b2da      	uxtb	r2, r3
 800534a:	f04f 0300 	mov.w	r3, #0
 800534e:	0a14      	lsrs	r4, r2, #8
 8005350:	62fc      	str	r4, [r7, #44]	; 0x2c
 8005352:	0613      	lsls	r3, r2, #24
 8005354:	62bb      	str	r3, [r7, #40]	; 0x28
 8005356:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800535a:	4623      	mov	r3, r4
 800535c:	4303      	orrs	r3, r0
 800535e:	623b      	str	r3, [r7, #32]
 8005360:	462b      	mov	r3, r5
 8005362:	430b      	orrs	r3, r1
 8005364:	627b      	str	r3, [r7, #36]	; 0x24
 8005366:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800536a:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800536e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8005372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005376:	1d1a      	adds	r2, r3, #4
 8005378:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800537c:	4413      	add	r3, r2
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	b2da      	uxtb	r2, r3
 8005382:	f04f 0300 	mov.w	r3, #0
 8005386:	f04f 0000 	mov.w	r0, #0
 800538a:	f04f 0100 	mov.w	r1, #0
 800538e:	0011      	movs	r1, r2
 8005390:	2000      	movs	r0, #0
 8005392:	ea44 0300 	orr.w	r3, r4, r0
 8005396:	61bb      	str	r3, [r7, #24]
 8005398:	ea45 0301 	orr.w	r3, r5, r1
 800539c:	61fb      	str	r3, [r7, #28]
 800539e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80053a2:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80053a6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80053aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ae:	1d5a      	adds	r2, r3, #5
 80053b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80053b4:	4413      	add	r3, r2
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	b2da      	uxtb	r2, r3
 80053ba:	f04f 0300 	mov.w	r3, #0
 80053be:	f04f 0000 	mov.w	r0, #0
 80053c2:	f04f 0100 	mov.w	r1, #0
 80053c6:	0211      	lsls	r1, r2, #8
 80053c8:	2000      	movs	r0, #0
 80053ca:	ea44 0300 	orr.w	r3, r4, r0
 80053ce:	613b      	str	r3, [r7, #16]
 80053d0:	ea45 0301 	orr.w	r3, r5, r1
 80053d4:	617b      	str	r3, [r7, #20]
 80053d6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80053da:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80053de:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80053e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053e6:	1d9a      	adds	r2, r3, #6
 80053e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80053ec:	4413      	add	r3, r2
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	b2da      	uxtb	r2, r3
 80053f2:	f04f 0300 	mov.w	r3, #0
 80053f6:	f04f 0000 	mov.w	r0, #0
 80053fa:	f04f 0100 	mov.w	r1, #0
 80053fe:	0411      	lsls	r1, r2, #16
 8005400:	2000      	movs	r0, #0
 8005402:	ea44 0300 	orr.w	r3, r4, r0
 8005406:	60bb      	str	r3, [r7, #8]
 8005408:	ea45 0301 	orr.w	r3, r5, r1
 800540c:	60fb      	str	r3, [r7, #12]
 800540e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005412:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005416:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800541a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800541e:	1dda      	adds	r2, r3, #7
 8005420:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005424:	4413      	add	r3, r2
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	b2da      	uxtb	r2, r3
 800542a:	f04f 0300 	mov.w	r3, #0
 800542e:	f04f 0000 	mov.w	r0, #0
 8005432:	f04f 0100 	mov.w	r1, #0
 8005436:	0611      	lsls	r1, r2, #24
 8005438:	2000      	movs	r0, #0
 800543a:	ea44 0300 	orr.w	r3, r4, r0
 800543e:	603b      	str	r3, [r7, #0]
 8005440:	ea45 0301 	orr.w	r3, r5, r1
 8005444:	607b      	str	r3, [r7, #4]
 8005446:	e9d7 3400 	ldrd	r3, r4, [r7]
 800544a:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      this->linear_acceleration_covariance[i] = u_linear_acceleration_covariancei.real;
 800544e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8005452:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8005456:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800545a:	3322      	adds	r3, #34	; 0x22
 800545c:	00db      	lsls	r3, r3, #3
 800545e:	4413      	add	r3, r2
 8005460:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->linear_acceleration_covariance[i]);
 8005464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005468:	3308      	adds	r3, #8
 800546a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      for( uint32_t i = 0; i < 9; i++){
 800546e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005472:	3301      	adds	r3, #1
 8005474:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005478:	e702      	b.n	8005280 <_ZN11sensor_msgs3Imu11deserializeEPh+0x4c2>
      }
     return offset;
 800547a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
    }
 800547e:	4618      	mov	r0, r3
 8005480:	37f8      	adds	r7, #248	; 0xf8
 8005482:	46bd      	mov	sp, r7
 8005484:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005488 <_ZN11sensor_msgs3Imu7getTypeEv>:

    virtual const char * getType() override { return "sensor_msgs/Imu"; };
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	4b03      	ldr	r3, [pc, #12]	; (80054a0 <_ZN11sensor_msgs3Imu7getTypeEv+0x18>)
 8005492:	4618      	mov	r0, r3
 8005494:	370c      	adds	r7, #12
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	08010860 	.word	0x08010860

080054a4 <_ZN11sensor_msgs3Imu6getMD5Ev>:
    virtual const char * getMD5() override { return "6a62c6daae103f4ff57a132d6f95cec2"; };
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	4b03      	ldr	r3, [pc, #12]	; (80054bc <_ZN11sensor_msgs3Imu6getMD5Ev+0x18>)
 80054ae:	4618      	mov	r0, r3
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	08010870 	.word	0x08010870

080054c0 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	4a04      	ldr	r2, [pc, #16]	; (80054dc <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	601a      	str	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4618      	mov	r0, r3
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr
 80054dc:	08010a20 	.word	0x08010a20

080054e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7ff ffe8 	bl	80054c0 <_ZN3ros15NodeHandleBase_C1Ev>
 80054f0:	4a36      	ldr	r2, [pc, #216]	; (80055cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	601a      	str	r2, [r3, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	3304      	adds	r3, #4
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7fd fc00 	bl	8002d00 <_ZN13STM32HardwareC1Ev>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8005526:	f44f 7200 	mov.w	r2, #512	; 0x200
 800552a:	2100      	movs	r1, #0
 800552c:	4618      	mov	r0, r3
 800552e:	f006 fc0f 	bl	800bd50 <memset>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8005538:	f44f 7200 	mov.w	r2, #512	; 0x200
 800553c:	2100      	movs	r1, #0
 800553e:	4618      	mov	r0, r3
 8005540:	f006 fc06 	bl	800bd50 <memset>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f603 0324 	addw	r3, r3, #2084	; 0x824
 800554a:	2264      	movs	r2, #100	; 0x64
 800554c:	2100      	movs	r1, #0
 800554e:	4618      	mov	r0, r3
 8005550:	f006 fbfe 	bl	800bd50 <memset>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f603 0388 	addw	r3, r3, #2184	; 0x888
 800555a:	2264      	movs	r2, #100	; 0x64
 800555c:	2100      	movs	r1, #0
 800555e:	4618      	mov	r0, r3
 8005560:	f006 fbf6 	bl	800bd50 <memset>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f603 1314 	addw	r3, r3, #2324	; 0x914
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7fd f88a 	bl	80026d4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4618      	mov	r0, r3
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	08010964 	.word	0x08010964

080055d0 <HAL_UART_TxCpltCallback>:
ros::Publisher raw_vel_pub("raw_vel",&raw_vel_msg);
ros::Subscriber<geometry_msgs::Twist> sub_vel("cmd_vel", messageCb);
//Subcribe dock station
ros::Subscriber<std_msgs::Int8> sub_pos("check_dock_pos", messageCb_dock);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 80055d8:	4805      	ldr	r0, [pc, #20]	; (80055f0 <HAL_UART_TxCpltCallback+0x20>)
 80055da:	f000 fb85 	bl	8005ce8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80055de:	4603      	mov	r3, r0
 80055e0:	4618      	mov	r0, r3
 80055e2:	f7fd fbf3 	bl	8002dcc <_ZN13STM32Hardware5flushEv>
}
 80055e6:	bf00      	nop
 80055e8:	3708      	adds	r7, #8
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	20000314 	.word	0x20000314

080055f4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80055f4:	b590      	push	{r4, r7, lr}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 80055fc:	4833      	ldr	r0, [pc, #204]	; (80056cc <HAL_UART_RxCpltCallback+0xd8>)
 80055fe:	f000 fb73 	bl	8005ce8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8005602:	4603      	mov	r3, r0
 8005604:	4618      	mov	r0, r3
 8005606:	f7fd fba2 	bl	8002d4e <_ZN13STM32Hardware10reset_rbufEv>
  if(huart->Instance == huart1.Instance)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	4b30      	ldr	r3, [pc, #192]	; (80056d0 <HAL_UART_RxCpltCallback+0xdc>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	429a      	cmp	r2, r3
 8005614:	d155      	bne.n	80056c2 <HAL_UART_RxCpltCallback+0xce>
  	{
  		if(pData != 'A')
 8005616:	4b2f      	ldr	r3, [pc, #188]	; (80056d4 <HAL_UART_RxCpltCallback+0xe0>)
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	2b41      	cmp	r3, #65	; 0x41
 800561c:	d01e      	beq.n	800565c <HAL_UART_RxCpltCallback+0x68>
  		{
  			if(pData != 'B')
 800561e:	4b2d      	ldr	r3, [pc, #180]	; (80056d4 <HAL_UART_RxCpltCallback+0xe0>)
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	2b42      	cmp	r3, #66	; 0x42
 8005624:	d01a      	beq.n	800565c <HAL_UART_RxCpltCallback+0x68>
  			{
  				if((pData >= 46 && pData <= 57) || pData == 32 || pData == 45)
 8005626:	4b2b      	ldr	r3, [pc, #172]	; (80056d4 <HAL_UART_RxCpltCallback+0xe0>)
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	2b2d      	cmp	r3, #45	; 0x2d
 800562c:	d903      	bls.n	8005636 <HAL_UART_RxCpltCallback+0x42>
 800562e:	4b29      	ldr	r3, [pc, #164]	; (80056d4 <HAL_UART_RxCpltCallback+0xe0>)
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	2b39      	cmp	r3, #57	; 0x39
 8005634:	d907      	bls.n	8005646 <HAL_UART_RxCpltCallback+0x52>
 8005636:	4b27      	ldr	r3, [pc, #156]	; (80056d4 <HAL_UART_RxCpltCallback+0xe0>)
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	2b20      	cmp	r3, #32
 800563c:	d003      	beq.n	8005646 <HAL_UART_RxCpltCallback+0x52>
 800563e:	4b25      	ldr	r3, [pc, #148]	; (80056d4 <HAL_UART_RxCpltCallback+0xe0>)
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	2b2d      	cmp	r3, #45	; 0x2d
 8005644:	d10a      	bne.n	800565c <HAL_UART_RxCpltCallback+0x68>
  				{
  					dataTX[i] = pData;
 8005646:	4b24      	ldr	r3, [pc, #144]	; (80056d8 <HAL_UART_RxCpltCallback+0xe4>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a22      	ldr	r2, [pc, #136]	; (80056d4 <HAL_UART_RxCpltCallback+0xe0>)
 800564c:	7811      	ldrb	r1, [r2, #0]
 800564e:	4a23      	ldr	r2, [pc, #140]	; (80056dc <HAL_UART_RxCpltCallback+0xe8>)
 8005650:	54d1      	strb	r1, [r2, r3]
  					i++;
 8005652:	4b21      	ldr	r3, [pc, #132]	; (80056d8 <HAL_UART_RxCpltCallback+0xe4>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	3301      	adds	r3, #1
 8005658:	4a1f      	ldr	r2, [pc, #124]	; (80056d8 <HAL_UART_RxCpltCallback+0xe4>)
 800565a:	6013      	str	r3, [r2, #0]
  				}
  			}
  		}

  		if(pData == 'B')
 800565c:	4b1d      	ldr	r3, [pc, #116]	; (80056d4 <HAL_UART_RxCpltCallback+0xe0>)
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	2b42      	cmp	r3, #66	; 0x42
 8005662:	d129      	bne.n	80056b8 <HAL_UART_RxCpltCallback+0xc4>
  		{
  			i = 0;
 8005664:	4b1c      	ldr	r3, [pc, #112]	; (80056d8 <HAL_UART_RxCpltCallback+0xe4>)
 8005666:	2200      	movs	r2, #0
 8005668:	601a      	str	r2, [r3, #0]
  			char *ptr;
  			ptr = strtok(dataTX," ");
 800566a:	491d      	ldr	r1, [pc, #116]	; (80056e0 <HAL_UART_RxCpltCallback+0xec>)
 800566c:	481b      	ldr	r0, [pc, #108]	; (80056dc <HAL_UART_RxCpltCallback+0xe8>)
 800566e:	f008 f89b 	bl	800d7a8 <strtok>
 8005672:	60f8      	str	r0, [r7, #12]
  			while(ptr != NULL)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d01e      	beq.n	80056b8 <HAL_UART_RxCpltCallback+0xc4>
  			{
  				num[j] = atof(ptr);
 800567a:	68f8      	ldr	r0, [r7, #12]
 800567c:	f006 fb2d 	bl	800bcda <atof>
 8005680:	ec51 0b10 	vmov	r0, r1, d0
 8005684:	4b17      	ldr	r3, [pc, #92]	; (80056e4 <HAL_UART_RxCpltCallback+0xf0>)
 8005686:	681c      	ldr	r4, [r3, #0]
 8005688:	f7fb faae 	bl	8000be8 <__aeabi_d2f>
 800568c:	4602      	mov	r2, r0
 800568e:	4916      	ldr	r1, [pc, #88]	; (80056e8 <HAL_UART_RxCpltCallback+0xf4>)
 8005690:	00a3      	lsls	r3, r4, #2
 8005692:	440b      	add	r3, r1
 8005694:	601a      	str	r2, [r3, #0]
  				ptr = strtok(NULL," ");
 8005696:	4912      	ldr	r1, [pc, #72]	; (80056e0 <HAL_UART_RxCpltCallback+0xec>)
 8005698:	2000      	movs	r0, #0
 800569a:	f008 f885 	bl	800d7a8 <strtok>
 800569e:	60f8      	str	r0, [r7, #12]
  				j++;
 80056a0:	4b10      	ldr	r3, [pc, #64]	; (80056e4 <HAL_UART_RxCpltCallback+0xf0>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	3301      	adds	r3, #1
 80056a6:	4a0f      	ldr	r2, [pc, #60]	; (80056e4 <HAL_UART_RxCpltCallback+0xf0>)
 80056a8:	6013      	str	r3, [r2, #0]
  				if(j == 10)
 80056aa:	4b0e      	ldr	r3, [pc, #56]	; (80056e4 <HAL_UART_RxCpltCallback+0xf0>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2b0a      	cmp	r3, #10
 80056b0:	d1e0      	bne.n	8005674 <HAL_UART_RxCpltCallback+0x80>
  				{
  					j = 0;
 80056b2:	4b0c      	ldr	r3, [pc, #48]	; (80056e4 <HAL_UART_RxCpltCallback+0xf0>)
 80056b4:	2200      	movs	r2, #0
 80056b6:	601a      	str	r2, [r3, #0]
  					break;
  				}
  			}
  		}
  		HAL_UART_Receive_IT(&huart1, &pData, 1);
 80056b8:	2201      	movs	r2, #1
 80056ba:	4906      	ldr	r1, [pc, #24]	; (80056d4 <HAL_UART_RxCpltCallback+0xe0>)
 80056bc:	4804      	ldr	r0, [pc, #16]	; (80056d0 <HAL_UART_RxCpltCallback+0xdc>)
 80056be:	f005 f8f2 	bl	800a8a6 <HAL_UART_Receive_IT>
  	}

}
 80056c2:	bf00      	nop
 80056c4:	3714      	adds	r7, #20
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd90      	pop	{r4, r7, pc}
 80056ca:	bf00      	nop
 80056cc:	20000314 	.word	0x20000314
 80056d0:	200011b0 	.word	0x200011b0
 80056d4:	20000289 	.word	0x20000289
 80056d8:	200002f4 	.word	0x200002f4
 80056dc:	2000028c 	.word	0x2000028c
 80056e0:	08010894 	.word	0x08010894
 80056e4:	200002f8 	.word	0x200002f8
 80056e8:	200002cc 	.word	0x200002cc

080056ec <setup>:
	}
	inx_data_process = 0;
}

void setup(void)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	af00      	add	r7, sp, #0
  nh.initNode();
 80056f0:	480c      	ldr	r0, [pc, #48]	; (8005724 <setup+0x38>)
 80056f2:	f000 fb05 	bl	8005d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.subscribe(sub_vel);
 80056f6:	490c      	ldr	r1, [pc, #48]	; (8005728 <setup+0x3c>)
 80056f8:	480a      	ldr	r0, [pc, #40]	; (8005724 <setup+0x38>)
 80056fa:	f000 fb1e 	bl	8005d3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
  nh.subscribe(sub_pos);
 80056fe:	490b      	ldr	r1, [pc, #44]	; (800572c <setup+0x40>)
 8005700:	4808      	ldr	r0, [pc, #32]	; (8005724 <setup+0x38>)
 8005702:	f000 fb1a 	bl	8005d3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
  HAL_UART_Receive_IT(&huart1, &pData, 1);
 8005706:	2201      	movs	r2, #1
 8005708:	4909      	ldr	r1, [pc, #36]	; (8005730 <setup+0x44>)
 800570a:	480a      	ldr	r0, [pc, #40]	; (8005734 <setup+0x48>)
 800570c:	f005 f8cb 	bl	800a8a6 <HAL_UART_Receive_IT>
  nh.advertise(raw_vel_pub);
 8005710:	4909      	ldr	r1, [pc, #36]	; (8005738 <setup+0x4c>)
 8005712:	4804      	ldr	r0, [pc, #16]	; (8005724 <setup+0x38>)
 8005714:	f000 fb3c 	bl	8005d90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.advertise(pub_imu);
 8005718:	4908      	ldr	r1, [pc, #32]	; (800573c <setup+0x50>)
 800571a:	4802      	ldr	r0, [pc, #8]	; (8005724 <setup+0x38>)
 800571c:	f000 fb38 	bl	8005d90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 8005720:	bf00      	nop
 8005722:	bd80      	pop	{r7, pc}
 8005724:	20000314 	.word	0x20000314
 8005728:	20000e20 	.word	0x20000e20
 800572c:	20000e80 	.word	0x20000e80
 8005730:	20000289 	.word	0x20000289
 8005734:	200011b0 	.word	0x200011b0
 8005738:	20000e08 	.word	0x20000e08
 800573c:	20000da8 	.word	0x20000da8

08005740 <loop>:


void loop(void)
{
 8005740:	b590      	push	{r4, r7, lr}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
	if(g_vel_angular_right > 0 && g_vel_angular_left > 0){
 8005746:	4b90      	ldr	r3, [pc, #576]	; (8005988 <loop+0x248>)
 8005748:	e9d3 0100 	ldrd	r0, r1, [r3]
 800574c:	f04f 0200 	mov.w	r2, #0
 8005750:	f04f 0300 	mov.w	r3, #0
 8005754:	f7fb f9e0 	bl	8000b18 <__aeabi_dcmpgt>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00e      	beq.n	800577c <loop+0x3c>
 800575e:	4b8b      	ldr	r3, [pc, #556]	; (800598c <loop+0x24c>)
 8005760:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005764:	f04f 0200 	mov.w	r2, #0
 8005768:	f04f 0300 	mov.w	r3, #0
 800576c:	f7fb f9d4 	bl	8000b18 <__aeabi_dcmpgt>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d002      	beq.n	800577c <loop+0x3c>
		tien();
 8005776:	f7fb fed9 	bl	800152c <tien>
 800577a:	e052      	b.n	8005822 <loop+0xe2>
	}
	else if(g_vel_angular_right < 0 && g_vel_angular_left < 0){
 800577c:	4b82      	ldr	r3, [pc, #520]	; (8005988 <loop+0x248>)
 800577e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005782:	f04f 0200 	mov.w	r2, #0
 8005786:	f04f 0300 	mov.w	r3, #0
 800578a:	f7fb f9a7 	bl	8000adc <__aeabi_dcmplt>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d00e      	beq.n	80057b2 <loop+0x72>
 8005794:	4b7d      	ldr	r3, [pc, #500]	; (800598c <loop+0x24c>)
 8005796:	e9d3 0100 	ldrd	r0, r1, [r3]
 800579a:	f04f 0200 	mov.w	r2, #0
 800579e:	f04f 0300 	mov.w	r3, #0
 80057a2:	f7fb f99b 	bl	8000adc <__aeabi_dcmplt>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d002      	beq.n	80057b2 <loop+0x72>
		lui();
 80057ac:	f7fb feac 	bl	8001508 <lui>
 80057b0:	e037      	b.n	8005822 <loop+0xe2>
	}
	else if(g_vel_angular_right > 0 && g_vel_angular_left < 0){
 80057b2:	4b75      	ldr	r3, [pc, #468]	; (8005988 <loop+0x248>)
 80057b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80057b8:	f04f 0200 	mov.w	r2, #0
 80057bc:	f04f 0300 	mov.w	r3, #0
 80057c0:	f7fb f9aa 	bl	8000b18 <__aeabi_dcmpgt>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00e      	beq.n	80057e8 <loop+0xa8>
 80057ca:	4b70      	ldr	r3, [pc, #448]	; (800598c <loop+0x24c>)
 80057cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80057d0:	f04f 0200 	mov.w	r2, #0
 80057d4:	f04f 0300 	mov.w	r3, #0
 80057d8:	f7fb f980 	bl	8000adc <__aeabi_dcmplt>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d002      	beq.n	80057e8 <loop+0xa8>
		Xoay_Trai();
 80057e2:	f7fb feb5 	bl	8001550 <Xoay_Trai>
 80057e6:	e01c      	b.n	8005822 <loop+0xe2>
	}
	else if(g_vel_angular_right < 0 && g_vel_angular_left > 0){
 80057e8:	4b67      	ldr	r3, [pc, #412]	; (8005988 <loop+0x248>)
 80057ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80057ee:	f04f 0200 	mov.w	r2, #0
 80057f2:	f04f 0300 	mov.w	r3, #0
 80057f6:	f7fb f971 	bl	8000adc <__aeabi_dcmplt>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00e      	beq.n	800581e <loop+0xde>
 8005800:	4b62      	ldr	r3, [pc, #392]	; (800598c <loop+0x24c>)
 8005802:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005806:	f04f 0200 	mov.w	r2, #0
 800580a:	f04f 0300 	mov.w	r3, #0
 800580e:	f7fb f983 	bl	8000b18 <__aeabi_dcmpgt>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d002      	beq.n	800581e <loop+0xde>
		Xoay_Phai();
 8005818:	f7fb feac 	bl	8001574 <Xoay_Phai>
 800581c:	e001      	b.n	8005822 <loop+0xe2>
	}
	else{
		dung();
 800581e:	f7fb febb 	bl	8001598 <dung>
	}

	#ifdef __IR_WITH_ROS__
		if(HAL_GetTick() - countTick > 100){
 8005822:	f001 ffd3 	bl	80077cc <HAL_GetTick>
 8005826:	4603      	mov	r3, r0
 8005828:	4a59      	ldr	r2, [pc, #356]	; (8005990 <loop+0x250>)
 800582a:	6812      	ldr	r2, [r2, #0]
 800582c:	1a9b      	subs	r3, r3, r2
 800582e:	2b64      	cmp	r3, #100	; 0x64
 8005830:	bf8c      	ite	hi
 8005832:	2301      	movhi	r3, #1
 8005834:	2300      	movls	r3, #0
 8005836:	b2db      	uxtb	r3, r3
 8005838:	2b00      	cmp	r3, #0
 800583a:	f000 809e 	beq.w	800597a <loop+0x23a>
			//publish velocity
			convert_vel_linear_2_wheel_to_vel_linear_and_angular(w1, w2);
 800583e:	4b55      	ldr	r3, [pc, #340]	; (8005994 <loop+0x254>)
 8005840:	ed93 7b00 	vldr	d7, [r3]
 8005844:	4b54      	ldr	r3, [pc, #336]	; (8005998 <loop+0x258>)
 8005846:	ed93 6b00 	vldr	d6, [r3]
 800584a:	eeb0 1a46 	vmov.f32	s2, s12
 800584e:	eef0 1a66 	vmov.f32	s3, s13
 8005852:	eeb0 0a47 	vmov.f32	s0, s14
 8005856:	eef0 0a67 	vmov.f32	s1, s15
 800585a:	f000 f951 	bl	8005b00 <convert_vel_linear_2_wheel_to_vel_linear_and_angular>
			raw_vel_msg.linear.x = vx;
 800585e:	4b4f      	ldr	r3, [pc, #316]	; (800599c <loop+0x25c>)
 8005860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005864:	494e      	ldr	r1, [pc, #312]	; (80059a0 <loop+0x260>)
 8005866:	e9c1 2304 	strd	r2, r3, [r1, #16]
			raw_vel_msg.angular.z = wz;
 800586a:	4b4e      	ldr	r3, [pc, #312]	; (80059a4 <loop+0x264>)
 800586c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005870:	494b      	ldr	r1, [pc, #300]	; (80059a0 <loop+0x260>)
 8005872:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
			raw_vel_pub.publish(&raw_vel_msg);
 8005876:	494a      	ldr	r1, [pc, #296]	; (80059a0 <loop+0x260>)
 8005878:	484b      	ldr	r0, [pc, #300]	; (80059a8 <loop+0x268>)
 800587a:	f7fd fa0e 	bl	8002c9a <_ZN3ros9Publisher7publishEPKNS_3MsgE>
			//publish imu/data
			imu.header.frame_id = "imu_link";
 800587e:	4b4b      	ldr	r3, [pc, #300]	; (80059ac <loop+0x26c>)
 8005880:	4a4b      	ldr	r2, [pc, #300]	; (80059b0 <loop+0x270>)
 8005882:	615a      	str	r2, [r3, #20]
			imu.header.stamp = nh.now();
 8005884:	4c49      	ldr	r4, [pc, #292]	; (80059ac <loop+0x26c>)
 8005886:	463b      	mov	r3, r7
 8005888:	494a      	ldr	r1, [pc, #296]	; (80059b4 <loop+0x274>)
 800588a:	4618      	mov	r0, r3
 800588c:	f000 fab0 	bl	8005df0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>
 8005890:	f104 030c 	add.w	r3, r4, #12
 8005894:	463a      	mov	r2, r7
 8005896:	e892 0003 	ldmia.w	r2, {r0, r1}
 800589a:	e883 0003 	stmia.w	r3, {r0, r1}
			imu.orientation.w = num[0];
 800589e:	4b46      	ldr	r3, [pc, #280]	; (80059b8 <loop+0x278>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7fa fe50 	bl	8000548 <__aeabi_f2d>
 80058a8:	4602      	mov	r2, r0
 80058aa:	460b      	mov	r3, r1
 80058ac:	493f      	ldr	r1, [pc, #252]	; (80059ac <loop+0x26c>)
 80058ae:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			imu.orientation.x = num[1];
 80058b2:	4b41      	ldr	r3, [pc, #260]	; (80059b8 <loop+0x278>)
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7fa fe46 	bl	8000548 <__aeabi_f2d>
 80058bc:	4602      	mov	r2, r0
 80058be:	460b      	mov	r3, r1
 80058c0:	493a      	ldr	r1, [pc, #232]	; (80059ac <loop+0x26c>)
 80058c2:	e9c1 2308 	strd	r2, r3, [r1, #32]
			imu.orientation.y = num[2];
 80058c6:	4b3c      	ldr	r3, [pc, #240]	; (80059b8 <loop+0x278>)
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f7fa fe3c 	bl	8000548 <__aeabi_f2d>
 80058d0:	4602      	mov	r2, r0
 80058d2:	460b      	mov	r3, r1
 80058d4:	4935      	ldr	r1, [pc, #212]	; (80059ac <loop+0x26c>)
 80058d6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
			imu.orientation.z = num[3];
 80058da:	4b37      	ldr	r3, [pc, #220]	; (80059b8 <loop+0x278>)
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	4618      	mov	r0, r3
 80058e0:	f7fa fe32 	bl	8000548 <__aeabi_f2d>
 80058e4:	4602      	mov	r2, r0
 80058e6:	460b      	mov	r3, r1
 80058e8:	4930      	ldr	r1, [pc, #192]	; (80059ac <loop+0x26c>)
 80058ea:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
			imu.angular_velocity.x = num[7];
 80058ee:	4b32      	ldr	r3, [pc, #200]	; (80059b8 <loop+0x278>)
 80058f0:	69db      	ldr	r3, [r3, #28]
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7fa fe28 	bl	8000548 <__aeabi_f2d>
 80058f8:	4602      	mov	r2, r0
 80058fa:	460b      	mov	r3, r1
 80058fc:	492b      	ldr	r1, [pc, #172]	; (80059ac <loop+0x26c>)
 80058fe:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
			imu.angular_velocity.y = num[8];
 8005902:	4b2d      	ldr	r3, [pc, #180]	; (80059b8 <loop+0x278>)
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	4618      	mov	r0, r3
 8005908:	f7fa fe1e 	bl	8000548 <__aeabi_f2d>
 800590c:	4602      	mov	r2, r0
 800590e:	460b      	mov	r3, r1
 8005910:	4926      	ldr	r1, [pc, #152]	; (80059ac <loop+0x26c>)
 8005912:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
			imu.angular_velocity.z = num[9];
 8005916:	4b28      	ldr	r3, [pc, #160]	; (80059b8 <loop+0x278>)
 8005918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591a:	4618      	mov	r0, r3
 800591c:	f7fa fe14 	bl	8000548 <__aeabi_f2d>
 8005920:	4602      	mov	r2, r0
 8005922:	460b      	mov	r3, r1
 8005924:	4921      	ldr	r1, [pc, #132]	; (80059ac <loop+0x26c>)
 8005926:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
			imu.linear_acceleration.x = num[4];
 800592a:	4b23      	ldr	r3, [pc, #140]	; (80059b8 <loop+0x278>)
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	4618      	mov	r0, r3
 8005930:	f7fa fe0a 	bl	8000548 <__aeabi_f2d>
 8005934:	4602      	mov	r2, r0
 8005936:	460b      	mov	r3, r1
 8005938:	491c      	ldr	r1, [pc, #112]	; (80059ac <loop+0x26c>)
 800593a:	e9c1 233e 	strd	r2, r3, [r1, #248]	; 0xf8
			imu.linear_acceleration.y = num[5];
 800593e:	4b1e      	ldr	r3, [pc, #120]	; (80059b8 <loop+0x278>)
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	4618      	mov	r0, r3
 8005944:	f7fa fe00 	bl	8000548 <__aeabi_f2d>
 8005948:	4602      	mov	r2, r0
 800594a:	460b      	mov	r3, r1
 800594c:	4917      	ldr	r1, [pc, #92]	; (80059ac <loop+0x26c>)
 800594e:	e9c1 2340 	strd	r2, r3, [r1, #256]	; 0x100
			imu.linear_acceleration.z = num[6];
 8005952:	4b19      	ldr	r3, [pc, #100]	; (80059b8 <loop+0x278>)
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	4618      	mov	r0, r3
 8005958:	f7fa fdf6 	bl	8000548 <__aeabi_f2d>
 800595c:	4602      	mov	r2, r0
 800595e:	460b      	mov	r3, r1
 8005960:	4912      	ldr	r1, [pc, #72]	; (80059ac <loop+0x26c>)
 8005962:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108
			pub_imu.publish(&imu);
 8005966:	4911      	ldr	r1, [pc, #68]	; (80059ac <loop+0x26c>)
 8005968:	4814      	ldr	r0, [pc, #80]	; (80059bc <loop+0x27c>)
 800596a:	f7fd f996 	bl	8002c9a <_ZN3ros9Publisher7publishEPKNS_3MsgE>
			countTick = HAL_GetTick();
 800596e:	f001 ff2d 	bl	80077cc <HAL_GetTick>
 8005972:	4603      	mov	r3, r0
 8005974:	461a      	mov	r2, r3
 8005976:	4b06      	ldr	r3, [pc, #24]	; (8005990 <loop+0x250>)
 8005978:	601a      	str	r2, [r3, #0]
		}

		nh.spinOnce();
 800597a:	480e      	ldr	r0, [pc, #56]	; (80059b4 <loop+0x274>)
 800597c:	f000 fa74 	bl	8005e68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	#endif
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	bd90      	pop	{r4, r7, pc}
 8005988:	20000280 	.word	0x20000280
 800598c:	20000278 	.word	0x20000278
 8005990:	20000310 	.word	0x20000310
 8005994:	20000250 	.word	0x20000250
 8005998:	20000258 	.word	0x20000258
 800599c:	20000260 	.word	0x20000260
 80059a0:	20000dc0 	.word	0x20000dc0
 80059a4:	20000268 	.word	0x20000268
 80059a8:	20000e08 	.word	0x20000e08
 80059ac:	20000c50 	.word	0x20000c50
 80059b0:	0801089c 	.word	0x0801089c
 80059b4:	20000314 	.word	0x20000314
 80059b8:	200002cc 	.word	0x200002cc
 80059bc:	20000da8 	.word	0x20000da8

080059c0 <_Z14messageCb_dockRKN8std_msgs4Int8E>:

void messageCb_dock( const std_msgs::Int8& toggle_msg){
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  docking_status = toggle_msg.data;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f993 2004 	ldrsb.w	r2, [r3, #4]
 80059ce:	4b04      	ldr	r3, [pc, #16]	; (80059e0 <_Z14messageCb_dockRKN8std_msgs4Int8E+0x20>)
 80059d0:	701a      	strb	r2, [r3, #0]
}
 80059d2:	bf00      	nop
 80059d4:	370c      	adds	r7, #12
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	20000288 	.word	0x20000288

080059e4 <_Z9messageCbRKN13geometry_msgs5TwistE>:

void messageCb( const geometry_msgs::Twist& cmd_msg)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
	vxRE = cmd_msg.linear.x; //m/s
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80059f2:	490e      	ldr	r1, [pc, #56]	; (8005a2c <_Z9messageCbRKN13geometry_msgs5TwistE+0x48>)
 80059f4:	e9c1 2300 	strd	r2, r3, [r1]
	wzRE = cmd_msg.angular.z; //rad/s
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80059fe:	490c      	ldr	r1, [pc, #48]	; (8005a30 <_Z9messageCbRKN13geometry_msgs5TwistE+0x4c>)
 8005a00:	e9c1 2300 	strd	r2, r3, [r1]
	convert_vel_linear_and_angular_to_vel_linear_2_wheel(vxRE, wzRE);
 8005a04:	4b09      	ldr	r3, [pc, #36]	; (8005a2c <_Z9messageCbRKN13geometry_msgs5TwistE+0x48>)
 8005a06:	ed93 7b00 	vldr	d7, [r3]
 8005a0a:	4b09      	ldr	r3, [pc, #36]	; (8005a30 <_Z9messageCbRKN13geometry_msgs5TwistE+0x4c>)
 8005a0c:	ed93 6b00 	vldr	d6, [r3]
 8005a10:	eeb0 1a46 	vmov.f32	s2, s12
 8005a14:	eef0 1a66 	vmov.f32	s3, s13
 8005a18:	eeb0 0a47 	vmov.f32	s0, s14
 8005a1c:	eef0 0a67 	vmov.f32	s1, s15
 8005a20:	f000 f80a 	bl	8005a38 <_Z52convert_vel_linear_and_angular_to_vel_linear_2_wheeldd>
}
 8005a24:	bf00      	nop
 8005a26:	3708      	adds	r7, #8
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	20000300 	.word	0x20000300
 8005a30:	20000308 	.word	0x20000308
 8005a34:	00000000 	.word	0x00000000

08005a38 <_Z52convert_vel_linear_and_angular_to_vel_linear_2_wheeldd>:

void convert_vel_linear_and_angular_to_vel_linear_2_wheel(double Vx, double Wz)
{
 8005a38:	b5b0      	push	{r4, r5, r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	ed87 0b02 	vstr	d0, [r7, #8]
 8005a42:	ed87 1b00 	vstr	d1, [r7]
	g_vel_angular_right = (2*Vx + Wz*LENGTH_BETWEEN_2_WHEEL)/(2*WHEEL_RADIUS*haiPI);  //vòng/giây
 8005a46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	f7fa fc1d 	bl	800028c <__adddf3>
 8005a52:	4602      	mov	r2, r0
 8005a54:	460b      	mov	r3, r1
 8005a56:	4614      	mov	r4, r2
 8005a58:	461d      	mov	r5, r3
 8005a5a:	a323      	add	r3, pc, #140	; (adr r3, 8005ae8 <_Z52convert_vel_linear_and_angular_to_vel_linear_2_wheeldd+0xb0>)
 8005a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a64:	f7fa fdc8 	bl	80005f8 <__aeabi_dmul>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	4620      	mov	r0, r4
 8005a6e:	4629      	mov	r1, r5
 8005a70:	f7fa fc0c 	bl	800028c <__adddf3>
 8005a74:	4602      	mov	r2, r0
 8005a76:	460b      	mov	r3, r1
 8005a78:	4610      	mov	r0, r2
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	a31c      	add	r3, pc, #112	; (adr r3, 8005af0 <_Z52convert_vel_linear_and_angular_to_vel_linear_2_wheeldd+0xb8>)
 8005a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a82:	f7fa fee3 	bl	800084c <__aeabi_ddiv>
 8005a86:	4602      	mov	r2, r0
 8005a88:	460b      	mov	r3, r1
 8005a8a:	491b      	ldr	r1, [pc, #108]	; (8005af8 <_Z52convert_vel_linear_and_angular_to_vel_linear_2_wheeldd+0xc0>)
 8005a8c:	e9c1 2300 	strd	r2, r3, [r1]
	g_vel_angular_left = (2*Vx - Wz*LENGTH_BETWEEN_2_WHEEL)/(2*WHEEL_RADIUS*haiPI);   //vòng/giây
 8005a90:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a94:	4602      	mov	r2, r0
 8005a96:	460b      	mov	r3, r1
 8005a98:	f7fa fbf8 	bl	800028c <__adddf3>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	4614      	mov	r4, r2
 8005aa2:	461d      	mov	r5, r3
 8005aa4:	a310      	add	r3, pc, #64	; (adr r3, 8005ae8 <_Z52convert_vel_linear_and_angular_to_vel_linear_2_wheeldd+0xb0>)
 8005aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aaa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005aae:	f7fa fda3 	bl	80005f8 <__aeabi_dmul>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	4629      	mov	r1, r5
 8005aba:	f7fa fbe5 	bl	8000288 <__aeabi_dsub>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	4610      	mov	r0, r2
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	a30a      	add	r3, pc, #40	; (adr r3, 8005af0 <_Z52convert_vel_linear_and_angular_to_vel_linear_2_wheeldd+0xb8>)
 8005ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005acc:	f7fa febe 	bl	800084c <__aeabi_ddiv>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	4909      	ldr	r1, [pc, #36]	; (8005afc <_Z52convert_vel_linear_and_angular_to_vel_linear_2_wheeldd+0xc4>)
 8005ad6:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005ada:	bf00      	nop
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bdb0      	pop	{r4, r5, r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	f3af 8000 	nop.w
 8005ae8:	16872b02 	.word	0x16872b02
 8005aec:	3fd7ced9 	.word	0x3fd7ced9
 8005af0:	7d79262a 	.word	0x7d79262a
 8005af4:	3fe319d3 	.word	0x3fe319d3
 8005af8:	20000280 	.word	0x20000280
 8005afc:	20000278 	.word	0x20000278

08005b00 <convert_vel_linear_2_wheel_to_vel_linear_and_angular>:

void convert_vel_linear_2_wheel_to_vel_linear_and_angular(double angular_right, double angular_left)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	ed87 0b02 	vstr	d0, [r7, #8]
 8005b0a:	ed87 1b00 	vstr	d1, [r7]
	vx = (WHEEL_RADIUS/2)*(angular_right + angular_left)*haiPI; //rad/s
 8005b0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b16:	f7fa fbb9 	bl	800028c <__adddf3>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	4610      	mov	r0, r2
 8005b20:	4619      	mov	r1, r3
 8005b22:	a321      	add	r3, pc, #132	; (adr r3, 8005ba8 <convert_vel_linear_2_wheel_to_vel_linear_and_angular+0xa8>)
 8005b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b28:	f7fa fd66 	bl	80005f8 <__aeabi_dmul>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	460b      	mov	r3, r1
 8005b30:	4610      	mov	r0, r2
 8005b32:	4619      	mov	r1, r3
 8005b34:	a318      	add	r3, pc, #96	; (adr r3, 8005b98 <convert_vel_linear_2_wheel_to_vel_linear_and_angular+0x98>)
 8005b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3a:	f7fa fd5d 	bl	80005f8 <__aeabi_dmul>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	460b      	mov	r3, r1
 8005b42:	4917      	ldr	r1, [pc, #92]	; (8005ba0 <convert_vel_linear_2_wheel_to_vel_linear_and_angular+0xa0>)
 8005b44:	e9c1 2300 	strd	r2, r3, [r1]
	wz = (WHEEL_RADIUS/LENGTH_BETWEEN_2_WHEEL)*(angular_right - angular_left)*haiPI; //rad/s
 8005b48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b4c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b50:	f7fa fb9a 	bl	8000288 <__aeabi_dsub>
 8005b54:	4602      	mov	r2, r0
 8005b56:	460b      	mov	r3, r1
 8005b58:	4610      	mov	r0, r2
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	a30c      	add	r3, pc, #48	; (adr r3, 8005b90 <convert_vel_linear_2_wheel_to_vel_linear_and_angular+0x90>)
 8005b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b62:	f7fa fd49 	bl	80005f8 <__aeabi_dmul>
 8005b66:	4602      	mov	r2, r0
 8005b68:	460b      	mov	r3, r1
 8005b6a:	4610      	mov	r0, r2
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	a30a      	add	r3, pc, #40	; (adr r3, 8005b98 <convert_vel_linear_2_wheel_to_vel_linear_and_angular+0x98>)
 8005b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b74:	f7fa fd40 	bl	80005f8 <__aeabi_dmul>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	4909      	ldr	r1, [pc, #36]	; (8005ba4 <convert_vel_linear_2_wheel_to_vel_linear_and_angular+0xa4>)
 8005b7e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005b82:	bf00      	nop
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	f3af 8000 	nop.w
 8005b90:	05816058 	.word	0x05816058
 8005b94:	3fc05816 	.word	0x3fc05816
 8005b98:	54411744 	.word	0x54411744
 8005b9c:	401921fb 	.word	0x401921fb
 8005ba0:	20000260 	.word	0x20000260
 8005ba4:	20000268 	.word	0x20000268
 8005ba8:	851eb852 	.word	0x851eb852
 8005bac:	3f9851eb 	.word	0x3f9851eb

08005bb0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8005bba:	2300      	movs	r3, #0
 8005bbc:	60fb      	str	r3, [r7, #12]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2b03      	cmp	r3, #3
 8005bc2:	d80d      	bhi.n	8005be0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	00db      	lsls	r3, r3, #3
 8005bc8:	683a      	ldr	r2, [r7, #0]
 8005bca:	fa22 f103 	lsr.w	r1, r2, r3
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	b2ca      	uxtb	r2, r1
 8005bd6:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	3301      	adds	r3, #1
 8005bdc:	60fb      	str	r3, [r7, #12]
 8005bde:	e7ee      	b.n	8005bbe <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8005be0:	bf00      	nop
 8005be2:	3714      	adds	r7, #20
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	60fb      	str	r3, [r7, #12]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2b03      	cmp	r3, #3
 8005c04:	d811      	bhi.n	8005c2a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	6839      	ldr	r1, [r7, #0]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	440a      	add	r2, r1
 8005c10:	7812      	ldrb	r2, [r2, #0]
 8005c12:	4611      	mov	r1, r2
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	00d2      	lsls	r2, r2, #3
 8005c18:	fa01 f202 	lsl.w	r2, r1, r2
 8005c1c:	431a      	orrs	r2, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	3301      	adds	r3, #1
 8005c26:	60fb      	str	r3, [r7, #12]
 8005c28:	e7ea      	b.n	8005c00 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8005c2a:	bf00      	nop
 8005c2c:	3714      	adds	r7, #20
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
	...

08005c38 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	4a04      	ldr	r2, [pc, #16]	; (8005c54 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	601a      	str	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr
 8005c54:	08010a08 	.word	0x08010a08

08005c58 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
 8005c64:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f7ff ffe5 	bl	8005c38 <_ZN3ros11Subscriber_C1Ev>
 8005c6e:	4a0b      	ldr	r2, [pc, #44]	; (8005c9c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	601a      	str	r2, [r3, #0]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	3310      	adds	r3, #16
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f7fd fe57 	bl	800392c <_ZN13geometry_msgs5TwistC1Ev>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	659a      	str	r2, [r3, #88]	; 0x58
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	683a      	ldr	r2, [r7, #0]
 8005c88:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	68ba      	ldr	r2, [r7, #8]
 8005c8e:	609a      	str	r2, [r3, #8]
  };
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	4618      	mov	r0, r3
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	0801094c 	.word	0x0801094c

08005ca0 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
 8005cac:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7ff ffc1 	bl	8005c38 <_ZN3ros11Subscriber_C1Ev>
 8005cb6:	4a0b      	ldr	r2, [pc, #44]	; (8005ce4 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei+0x44>)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	601a      	str	r2, [r3, #0]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	330c      	adds	r3, #12
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f7fd f933 	bl	8002f2c <_ZN8std_msgs4Int8C1Ev>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	615a      	str	r2, [r3, #20]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	683a      	ldr	r2, [r7, #0]
 8005cd0:	619a      	str	r2, [r3, #24]
    topic_ = topic_name;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	68ba      	ldr	r2, [r7, #8]
 8005cd6:	609a      	str	r2, [r3, #8]
  };
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	08010934 	.word	0x08010934

08005ce8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	3304      	adds	r3, #4
  }
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	3304      	adds	r3, #4
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f7fd f813 	bl	8002d38 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8005d32:	bf00      	nop
 8005d34:	3708      	adds	r7, #8
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:
    }
    return false;
  }

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 8005d3a:	b480      	push	{r7}
 8005d3c:	b085      	sub	sp, #20
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
 8005d42:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8005d44:	2300      	movs	r3, #0
 8005d46:	60fb      	str	r3, [r7, #12]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2b18      	cmp	r3, #24
 8005d4c:	dc19      	bgt.n	8005d82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10d      	bne.n	8005d7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005d66:	6839      	ldr	r1, [r7, #0]
 8005d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	605a      	str	r2, [r3, #4]
        return true;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e004      	b.n	8005d84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	60fb      	str	r3, [r7, #12]
 8005d80:	e7e2      	b.n	8005d48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0xe>
      }
    }
    return false;
 8005d82:	2300      	movs	r3, #0
  }
 8005d84:	4618      	mov	r0, r3
 8005d86:	3714      	adds	r7, #20
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8005d90:	b480      	push	{r7}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	60fb      	str	r3, [r7, #12]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2b18      	cmp	r3, #24
 8005da2:	dc1e      	bgt.n	8005de2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	4413      	add	r3, r2
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d111      	bne.n	8005dda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	683a      	ldr	r2, [r7, #0]
 8005dc4:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	60da      	str	r2, [r3, #12]
        return true;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e004      	b.n	8005de4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	3301      	adds	r3, #1
 8005dde:	60fb      	str	r3, [r7, #12]
 8005de0:	e7dd      	b.n	8005d9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 8005de2:	2300      	movs	r3, #0
  }
 8005de4:	4618      	mov	r0, r3
 8005de6:	3714      	adds	r7, #20
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>:
  Time now()
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	3304      	adds	r3, #4
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7fd f888 	bl	8002f14 <_ZN13STM32Hardware4timeEv>
 8005e04:	60f8      	str	r0, [r7, #12]
    Time current_time;
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f7fc f8df 	bl	8001fca <_ZN3ros4TimeC1Ev>
    current_time.sec = ms / 1000 + sec_offset;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	4a14      	ldr	r2, [pc, #80]	; (8005e60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv+0x70>)
 8005e10:	fba2 2303 	umull	r2, r3, r2, r3
 8005e14:	099a      	lsrs	r2, r3, #6
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8005e1c:	441a      	add	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	601a      	str	r2, [r3, #0]
    current_time.nsec = (ms % 1000) * 1000000UL + nsec_offset;
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	4b0e      	ldr	r3, [pc, #56]	; (8005e60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv+0x70>)
 8005e26:	fba3 1302 	umull	r1, r3, r3, r2
 8005e2a:	099b      	lsrs	r3, r3, #6
 8005e2c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005e30:	fb01 f303 	mul.w	r3, r1, r3
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	4a0b      	ldr	r2, [pc, #44]	; (8005e64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv+0x74>)
 8005e38:	fb02 f203 	mul.w	r2, r2, r3
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8005e42:	441a      	add	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	605a      	str	r2, [r3, #4]
    normalizeSecNSec(current_time.sec, current_time.nsec);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	3304      	adds	r3, #4
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f001 fc00 	bl	8007654 <_ZN3ros16normalizeSecNSecERmS0_>
    return current_time;
 8005e54:	bf00      	nop
  }
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	10624dd3 	.word	0x10624dd3
 8005e64:	000f4240 	.word	0x000f4240

08005e68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	3304      	adds	r3, #4
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7fd f84d 	bl	8002f14 <_ZN13STM32Hardware4timeEv>
 8005e7a:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d903      	bls.n	8005e96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d009      	beq.n	8005eb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d903      	bls.n	8005eb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d014      	beq.n	8005ee8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	3304      	adds	r3, #4
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7fd f826 	bl	8002f14 <_ZN13STM32Hardware4timeEv>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	1ad2      	subs	r2, r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	bf8c      	ite	hi
 8005ed8:	2301      	movhi	r3, #1
 8005eda:	2300      	movls	r3, #0
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d002      	beq.n	8005ee8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8005ee2:	f06f 0301 	mvn.w	r3, #1
 8005ee6:	e194      	b.n	8006212 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	3304      	adds	r3, #4
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7fc ff3f 	bl	8002d70 <_ZN13STM32Hardware4readEv>
 8005ef2:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	f2c0 8174 	blt.w	80061e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	441a      	add	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005f12:	2b07      	cmp	r3, #7
 8005f14:	d11e      	bne.n	8005f54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8005f1c:	1c59      	adds	r1, r3, #1
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	b2d1      	uxtb	r1, r2
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	460a      	mov	r2, r1
 8005f2e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8005f38:	1e5a      	subs	r2, r3, #1
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1b4      	bne.n	8005eb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2208      	movs	r2, #8
 8005f4e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8005f52:	e7af      	b.n	8005eb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d128      	bne.n	8005fb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	2bff      	cmp	r3, #255	; 0xff
 8005f62:	d10d      	bne.n	8005f80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005f6a:	1c5a      	adds	r2, r3, #1
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f103 0214 	add.w	r2, r3, #20
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8005f7e:	e799      	b.n	8005eb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	3304      	adds	r3, #4
 8005f84:	4618      	mov	r0, r3
 8005f86:	f7fc ffc5 	bl	8002f14 <_ZN13STM32Hardware4timeEv>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f94:	4293      	cmp	r3, r2
 8005f96:	bf8c      	ite	hi
 8005f98:	2301      	movhi	r3, #1
 8005f9a:	2300      	movls	r3, #0
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d088      	beq.n	8005eb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8005faa:	f06f 0301 	mvn.w	r3, #1
 8005fae:	e130      	b.n	8006212 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d118      	bne.n	8005fec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	2bfe      	cmp	r3, #254	; 0xfe
 8005fbe:	d107      	bne.n	8005fd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005fc6:	1c5a      	adds	r2, r3, #1
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8005fce:	e771      	b.n	8005eb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	f47f af68 	bne.w	8005eb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 f918 	bl	800621a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8005fea:	e763      	b.n	8005eb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d113      	bne.n	800601e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800600c:	1c5a      	adds	r2, r3, #1
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	68ba      	ldr	r2, [r7, #8]
 8006018:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 800601c:	e74a      	b.n	8005eb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8006024:	2b03      	cmp	r3, #3
 8006026:	d110      	bne.n	800604a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	021b      	lsls	r3, r3, #8
 8006032:	441a      	add	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8006040:	1c5a      	adds	r2, r3, #1
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8006048:	e734      	b.n	8005eb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8006050:	2b04      	cmp	r3, #4
 8006052:	d116      	bne.n	8006082 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800605a:	425a      	negs	r2, r3
 800605c:	b2db      	uxtb	r3, r3
 800605e:	b2d2      	uxtb	r2, r2
 8006060:	bf58      	it	pl
 8006062:	4253      	negpl	r3, r2
 8006064:	2bff      	cmp	r3, #255	; 0xff
 8006066:	d107      	bne.n	8006078 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800606e:	1c5a      	adds	r2, r3, #1
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8006076:	e71d      	b.n	8005eb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8006080:	e718      	b.n	8005eb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8006088:	2b05      	cmp	r3, #5
 800608a:	d10f      	bne.n	80060ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800609a:	1c5a      	adds	r2, r3, #1
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68ba      	ldr	r2, [r7, #8]
 80060a6:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80060aa:	e703      	b.n	8005eb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80060b2:	2b06      	cmp	r3, #6
 80060b4:	d117      	bne.n	80060e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	021b      	lsls	r3, r3, #8
 80060c0:	441a      	add	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2207      	movs	r2, #7
 80060cc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	f47f aeec 	bne.w	8005eb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2208      	movs	r2, #8
 80060e0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80060e4:	e6e6      	b.n	8005eb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80060ec:	2b08      	cmp	r3, #8
 80060ee:	f47f aee1 	bne.w	8005eb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8006100:	425a      	negs	r2, r3
 8006102:	b2db      	uxtb	r3, r3
 8006104:	b2d2      	uxtb	r2, r2
 8006106:	bf58      	it	pl
 8006108:	4253      	negpl	r3, r2
 800610a:	2bff      	cmp	r3, #255	; 0xff
 800610c:	f47f aed2 	bne.w	8005eb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8006116:	2b00      	cmp	r3, #0
 8006118:	d110      	bne.n	800613c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 f87d 	bl	800621a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 f898 	bl	8006256 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8006136:	f04f 33ff 	mov.w	r3, #4294967295
 800613a:	e06a      	b.n	8006212 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8006142:	2b0a      	cmp	r3, #10
 8006144:	d107      	bne.n	8006156 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800614c:	4619      	mov	r1, r3
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 f960 	bl	8006414 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8006154:	e6ae      	b.n	8005eb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800615c:	2b06      	cmp	r3, #6
 800615e:	d10e      	bne.n	800617e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800616c:	4619      	mov	r1, r3
 800616e:	4610      	mov	r0, r2
 8006170:	f7fc fbef 	bl	8002952 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 800617c:	e69a      	b.n	8005eb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8006184:	2b0b      	cmp	r3, #11
 8006186:	d104      	bne.n	8006192 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8006190:	e690      	b.n	8005eb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8006198:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f202 2222 	addw	r2, r2, #546	; 0x222
 80061a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f43f ae84 	beq.w	8005eb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80061b2:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80061bc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80061c6:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f202 2222 	addw	r2, r2, #546	; 0x222
 80061d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	f202 4224 	addw	r2, r2, #1060	; 0x424
 80061de:	4611      	mov	r1, r2
 80061e0:	4798      	blx	r3
    while (true)
 80061e2:	e667      	b.n	8005eb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 80061e4:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00f      	beq.n	8006210 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80061fe:	4293      	cmp	r3, r2
 8006200:	d906      	bls.n	8006210 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f809 	bl	800621a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8006210:	2300      	movs	r3, #0
  }
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 800621a:	b580      	push	{r7, lr}
 800621c:	b086      	sub	sp, #24
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8006222:	f107 030c 	add.w	r3, r7, #12
 8006226:	4618      	mov	r0, r3
 8006228:	f7fb fef0 	bl	800200c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f107 020c 	add.w	r2, r7, #12
 8006236:	210a      	movs	r1, #10
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	4798      	blx	r3
    rt_time = hardware_.time();
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	3304      	adds	r3, #4
 8006240:	4618      	mov	r0, r3
 8006242:	f7fc fe67 	bl	8002f14 <_ZN13STM32Hardware4timeEv>
 8006246:	4602      	mov	r2, r0
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 800624e:	bf00      	nop
 8006250:	3718      	adds	r7, #24
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}

08006256 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8006256:	b590      	push	{r4, r7, lr}
 8006258:	b08b      	sub	sp, #44	; 0x2c
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 800625e:	f107 030c 	add.w	r3, r7, #12
 8006262:	4618      	mov	r0, r3
 8006264:	f7fb ffc2 	bl	80021ec <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8006268:	2300      	movs	r3, #0
 800626a:	627b      	str	r3, [r7, #36]	; 0x24
 800626c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626e:	2b18      	cmp	r3, #24
 8006270:	dc63      	bgt.n	800633a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006276:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	4413      	add	r3, r2
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d056      	beq.n	8006332 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006288:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	4413      	add	r3, r2
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	b29b      	uxth	r3, r3
 8006296:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4413      	add	r3, r2
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	4413      	add	r3, r2
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	6859      	ldr	r1, [r3, #4]
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062be:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4413      	add	r3, r2
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	3308      	adds	r3, #8
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4608      	mov	r0, r1
 80062d2:	4798      	blx	r3
 80062d4:	4603      	mov	r3, r0
 80062d6:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4413      	add	r3, r2
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	6859      	ldr	r1, [r3, #4]
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	4413      	add	r3, r2
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	330c      	adds	r3, #12
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4608      	mov	r0, r1
 8006300:	4798      	blx	r3
 8006302:	4603      	mov	r3, r0
 8006304:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8006306:	f44f 7300 	mov.w	r3, #512	; 0x200
 800630a:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681c      	ldr	r4, [r3, #0]
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006316:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	4413      	add	r3, r2
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	4618      	mov	r0, r3
 8006322:	f7fc fcce 	bl	8002cc2 <_ZN3ros9Publisher15getEndpointTypeEv>
 8006326:	4601      	mov	r1, r0
 8006328:	f107 030c 	add.w	r3, r7, #12
 800632c:	461a      	mov	r2, r3
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8006332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006334:	3301      	adds	r3, #1
 8006336:	627b      	str	r3, [r7, #36]	; 0x24
 8006338:	e798      	b.n	800626c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800633a:	2300      	movs	r3, #0
 800633c:	627b      	str	r3, [r7, #36]	; 0x24
 800633e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006340:	2b18      	cmp	r3, #24
 8006342:	dc5f      	bgt.n	8006404 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006348:	f202 2222 	addw	r2, r2, #546	; 0x222
 800634c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d053      	beq.n	80063fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006358:	f202 2222 	addw	r2, r2, #546	; 0x222
 800635c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	b29b      	uxth	r3, r3
 8006364:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800636a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800636e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800637a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800637e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006386:	f202 2222 	addw	r2, r2, #546	; 0x222
 800638a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	3308      	adds	r3, #8
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4608      	mov	r0, r1
 8006396:	4798      	blx	r3
 8006398:	4603      	mov	r3, r0
 800639a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063a0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80063a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063ac:	f202 2222 	addw	r2, r2, #546	; 0x222
 80063b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	330c      	adds	r3, #12
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4608      	mov	r0, r1
 80063bc:	4798      	blx	r3
 80063be:	4603      	mov	r3, r0
 80063c0:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80063c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063c6:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681c      	ldr	r4, [r3, #0]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063d2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80063d6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063de:	f202 2222 	addw	r2, r2, #546	; 0x222
 80063e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	3304      	adds	r3, #4
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4608      	mov	r0, r1
 80063ee:	4798      	blx	r3
 80063f0:	4601      	mov	r1, r0
 80063f2:	f107 030c 	add.w	r3, r7, #12
 80063f6:	461a      	mov	r2, r3
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80063fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fe:	3301      	adds	r3, #1
 8006400:	627b      	str	r3, [r7, #36]	; 0x24
 8006402:	e79c      	b.n	800633e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 800640c:	bf00      	nop
 800640e:	372c      	adds	r7, #44	; 0x2c
 8006410:	46bd      	mov	sp, r7
 8006412:	bd90      	pop	{r4, r7, pc}

08006414 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8006414:	b580      	push	{r7, lr}
 8006416:	b086      	sub	sp, #24
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800641e:	f107 0308 	add.w	r3, r7, #8
 8006422:	4618      	mov	r0, r3
 8006424:	f7fb fdf2 	bl	800200c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	3304      	adds	r3, #4
 800642c:	4618      	mov	r0, r3
 800642e:	f7fc fd71 	bl	8002f14 <_ZN13STM32Hardware4timeEv>
 8006432:	4602      	mov	r2, r0
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 800643e:	f107 0308 	add.w	r3, r7, #8
 8006442:	6839      	ldr	r1, [r7, #0]
 8006444:	4618      	mov	r0, r3
 8006446:	f7fb fe51 	bl	80020ec <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	4915      	ldr	r1, [pc, #84]	; (80064a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8006450:	fba1 1303 	umull	r1, r3, r1, r3
 8006454:	099b      	lsrs	r3, r3, #6
 8006456:	4413      	add	r3, r2
 8006458:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 800645a:	6939      	ldr	r1, [r7, #16]
 800645c:	697a      	ldr	r2, [r7, #20]
 800645e:	4b11      	ldr	r3, [pc, #68]	; (80064a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8006460:	fba3 0302 	umull	r0, r3, r3, r2
 8006464:	099b      	lsrs	r3, r3, #6
 8006466:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800646a:	fb00 f303 	mul.w	r3, r0, r3
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	4a0d      	ldr	r2, [pc, #52]	; (80064a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8006472:	fb02 f303 	mul.w	r3, r2, r3
 8006476:	440b      	add	r3, r1
 8006478:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800647a:	f107 0308 	add.w	r3, r7, #8
 800647e:	3304      	adds	r3, #4
 8006480:	4619      	mov	r1, r3
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 f8a4 	bl	80065d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	3304      	adds	r3, #4
 800648c:	4618      	mov	r0, r3
 800648e:	f7fc fd41 	bl	8002f14 <_ZN13STM32Hardware4timeEv>
 8006492:	4602      	mov	r2, r0
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 800649a:	bf00      	nop
 800649c:	3718      	adds	r7, #24
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	10624dd3 	.word	0x10624dd3
 80064a8:	000f4240 	.word	0x000f4240

080064ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b088      	sub	sp, #32
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	2b63      	cmp	r3, #99	; 0x63
 80064bc:	dd09      	ble.n	80064d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80064c4:	f083 0301 	eor.w	r3, r3, #1
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d001      	beq.n	80064d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 80064ce:	2300      	movs	r3, #0
 80064d0:	e077      	b.n	80065c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	f202 6224 	addw	r2, r2, #1572	; 0x624
 80064de:	3207      	adds	r2, #7
 80064e0:	4611      	mov	r1, r2
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	4798      	blx	r3
 80064e6:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	22ff      	movs	r2, #255	; 0xff
 80064ec:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	22fe      	movs	r2, #254	; 0xfe
 80064f4:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	b2da      	uxtb	r2, r3
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	b29b      	uxth	r3, r3
 8006506:	121b      	asrs	r3, r3, #8
 8006508:	b2da      	uxtb	r2, r3
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 800651c:	4413      	add	r3, r2
 800651e:	b2db      	uxtb	r3, r3
 8006520:	43db      	mvns	r3, r3
 8006522:	b2da      	uxtb	r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	b2da      	uxtb	r2, r3
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	b21b      	sxth	r3, r3
 8006538:	121b      	asrs	r3, r3, #8
 800653a:	b2da      	uxtb	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8006542:	2300      	movs	r3, #0
 8006544:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8006546:	2305      	movs	r3, #5
 8006548:	61bb      	str	r3, [r7, #24]
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	3306      	adds	r3, #6
 800654e:	69ba      	ldr	r2, [r7, #24]
 8006550:	429a      	cmp	r2, r3
 8006552:	dc0d      	bgt.n	8006570 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	4413      	add	r3, r2
 800655a:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	461a      	mov	r2, r3
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	4413      	add	r3, r2
 8006566:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	3301      	adds	r3, #1
 800656c:	61bb      	str	r3, [r7, #24]
 800656e:	e7ec      	b.n	800654a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	3307      	adds	r3, #7
 8006574:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	425a      	negs	r2, r3
 800657a:	b2db      	uxtb	r3, r3
 800657c:	b2d2      	uxtb	r2, r2
 800657e:	bf58      	it	pl
 8006580:	4253      	negpl	r3, r2
 8006582:	b2da      	uxtb	r2, r3
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	1c59      	adds	r1, r3, #1
 8006588:	6179      	str	r1, [r7, #20]
 800658a:	43d2      	mvns	r2, r2
 800658c:	b2d1      	uxtb	r1, r2
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	4413      	add	r3, r2
 8006592:	460a      	mov	r2, r1
 8006594:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800659e:	dc0a      	bgt.n	80065b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	1d18      	adds	r0, r3, #4
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80065aa:	697a      	ldr	r2, [r7, #20]
 80065ac:	4619      	mov	r1, r3
 80065ae:	f7fc fc6b 	bl	8002e88 <_ZN13STM32Hardware5writeEPhi>
      return l;
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	e005      	b.n	80065c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80065b6:	4905      	ldr	r1, [pc, #20]	; (80065cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f000 f849 	bl	8006650 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 80065be:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 80065c2:	4618      	mov	r0, r3
 80065c4:	3720      	adds	r7, #32
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	080108a8 	.word	0x080108a8

080065d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	3304      	adds	r3, #4
 80065de:	4618      	mov	r0, r3
 80065e0:	f7fc fc98 	bl	8002f14 <_ZN13STM32Hardware4timeEv>
 80065e4:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	4915      	ldr	r1, [pc, #84]	; (8006644 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 80065ee:	fba1 1303 	umull	r1, r3, r1, r3
 80065f2:	099b      	lsrs	r3, r3, #6
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	1e5a      	subs	r2, r3, #1
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	6859      	ldr	r1, [r3, #4]
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	4b0f      	ldr	r3, [pc, #60]	; (8006644 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8006606:	fba3 0302 	umull	r0, r3, r3, r2
 800660a:	099b      	lsrs	r3, r3, #6
 800660c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006610:	fb00 f303 	mul.w	r3, r0, r3
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	4a0c      	ldr	r2, [pc, #48]	; (8006648 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8006618:	fb02 f303 	mul.w	r3, r2, r3
 800661c:	1aca      	subs	r2, r1, r3
 800661e:	4b0b      	ldr	r3, [pc, #44]	; (800664c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8006620:	4413      	add	r3, r2
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8006634:	4619      	mov	r1, r3
 8006636:	4610      	mov	r0, r2
 8006638:	f001 f80c 	bl	8007654 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 800663c:	bf00      	nop
 800663e:	3710      	adds	r7, #16
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}
 8006644:	10624dd3 	.word	0x10624dd3
 8006648:	000f4240 	.word	0x000f4240
 800664c:	3b9aca00 	.word	0x3b9aca00

08006650 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 800665a:	683a      	ldr	r2, [r7, #0]
 800665c:	2103      	movs	r1, #3
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 f804 	bl	800666c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8006664:	bf00      	nop
 8006666:	3708      	adds	r7, #8
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 800666c:	b580      	push	{r7, lr}
 800666e:	b088      	sub	sp, #32
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	460b      	mov	r3, r1
 8006676:	607a      	str	r2, [r7, #4]
 8006678:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800667a:	f107 0314 	add.w	r3, r7, #20
 800667e:	4618      	mov	r0, r3
 8006680:	f7fb ff78 	bl	8002574 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8006684:	7afb      	ldrb	r3, [r7, #11]
 8006686:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f107 0214 	add.w	r2, r7, #20
 8006696:	2107      	movs	r1, #7
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	4798      	blx	r3
  }
 800669c:	bf00      	nop
 800669e:	3720      	adds	r7, #32
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <_Z41__static_initialization_and_destruction_0ii>:
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d12b      	bne.n	800670c <_Z41__static_initialization_and_destruction_0ii+0x68>
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d126      	bne.n	800670c <_Z41__static_initialization_and_destruction_0ii+0x68>
int countTick = HAL_GetTick();
 80066be:	f001 f885 	bl	80077cc <HAL_GetTick>
 80066c2:	4603      	mov	r3, r0
 80066c4:	461a      	mov	r2, r3
 80066c6:	4b13      	ldr	r3, [pc, #76]	; (8006714 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80066c8:	601a      	str	r2, [r3, #0]
ros::NodeHandle nh;
 80066ca:	4813      	ldr	r0, [pc, #76]	; (8006718 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80066cc:	f7fe ff08 	bl	80054e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
sensor_msgs::Imu imu;
 80066d0:	4812      	ldr	r0, [pc, #72]	; (800671c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80066d2:	f7fe f955 	bl	8004980 <_ZN11sensor_msgs3ImuC1Ev>
ros::Publisher pub_imu("imu/data", &imu);
 80066d6:	2300      	movs	r3, #0
 80066d8:	4a10      	ldr	r2, [pc, #64]	; (800671c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80066da:	4911      	ldr	r1, [pc, #68]	; (8006720 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80066dc:	4811      	ldr	r0, [pc, #68]	; (8006724 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80066de:	f7fc fac5 	bl	8002c6c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
geometry_msgs::Twist raw_vel_msg;
 80066e2:	4811      	ldr	r0, [pc, #68]	; (8006728 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80066e4:	f7fd f922 	bl	800392c <_ZN13geometry_msgs5TwistC1Ev>
ros::Publisher raw_vel_pub("raw_vel",&raw_vel_msg);
 80066e8:	2300      	movs	r3, #0
 80066ea:	4a0f      	ldr	r2, [pc, #60]	; (8006728 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80066ec:	490f      	ldr	r1, [pc, #60]	; (800672c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80066ee:	4810      	ldr	r0, [pc, #64]	; (8006730 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80066f0:	f7fc fabc 	bl	8002c6c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<geometry_msgs::Twist> sub_vel("cmd_vel", messageCb);
 80066f4:	2301      	movs	r3, #1
 80066f6:	4a0f      	ldr	r2, [pc, #60]	; (8006734 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80066f8:	490f      	ldr	r1, [pc, #60]	; (8006738 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80066fa:	4810      	ldr	r0, [pc, #64]	; (800673c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80066fc:	f7ff faac 	bl	8005c58 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int8> sub_pos("check_dock_pos", messageCb_dock);
 8006700:	2301      	movs	r3, #1
 8006702:	4a0f      	ldr	r2, [pc, #60]	; (8006740 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8006704:	490f      	ldr	r1, [pc, #60]	; (8006744 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8006706:	4810      	ldr	r0, [pc, #64]	; (8006748 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8006708:	f7ff faca 	bl	8005ca0 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>
}
 800670c:	bf00      	nop
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	20000310 	.word	0x20000310
 8006718:	20000314 	.word	0x20000314
 800671c:	20000c50 	.word	0x20000c50
 8006720:	080108e4 	.word	0x080108e4
 8006724:	20000da8 	.word	0x20000da8
 8006728:	20000dc0 	.word	0x20000dc0
 800672c:	080108f0 	.word	0x080108f0
 8006730:	20000e08 	.word	0x20000e08
 8006734:	080059e5 	.word	0x080059e5
 8006738:	080108f8 	.word	0x080108f8
 800673c:	20000e20 	.word	0x20000e20
 8006740:	080059c1 	.word	0x080059c1
 8006744:	08010900 	.word	0x08010900
 8006748:	20000e80 	.word	0x20000e80

0800674c <_ZN3ros10SubscriberIN8std_msgs4Int8EvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	330c      	adds	r3, #12
 800675a:	6839      	ldr	r1, [r7, #0]
 800675c:	4618      	mov	r0, r3
 800675e:	f7fc fc15 	bl	8002f8c <_ZN8std_msgs4Int811deserializeEPh>
    this->cb_(msg);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	320c      	adds	r2, #12
 800676a:	4610      	mov	r0, r2
 800676c:	4798      	blx	r3
  }
 800676e:	bf00      	nop
 8006770:	3708      	adds	r7, #8
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8006776:	b480      	push	{r7}
 8006778:	b083      	sub	sp, #12
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	699b      	ldr	r3, [r3, #24]
  }
 8006782:	4618      	mov	r0, r3
 8006784:	370c      	adds	r7, #12
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr

0800678e <_ZN3ros10SubscriberIN8std_msgs4Int8EvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 800678e:	b580      	push	{r7, lr}
 8006790:	b082      	sub	sp, #8
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	330c      	adds	r3, #12
 800679a:	4618      	mov	r0, r3
 800679c:	f7fc fc16 	bl	8002fcc <_ZN8std_msgs4Int87getTypeEv>
 80067a0:	4603      	mov	r3, r0
  }
 80067a2:	4618      	mov	r0, r3
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}

080067aa <_ZN3ros10SubscriberIN8std_msgs4Int8EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b082      	sub	sp, #8
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	330c      	adds	r3, #12
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7fc fc16 	bl	8002fe8 <_ZN8std_msgs4Int86getMD5Ev>
 80067bc:	4603      	mov	r3, r0
  }
 80067be:	4618      	mov	r0, r3
 80067c0:	3708      	adds	r7, #8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:
  virtual void callback(unsigned char* data) override
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b082      	sub	sp, #8
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
 80067ce:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	3310      	adds	r3, #16
 80067d4:	6839      	ldr	r1, [r7, #0]
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7fd f8ea 	bl	80039b0 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	3210      	adds	r2, #16
 80067e4:	4610      	mov	r0, r2
 80067e6:	4798      	blx	r3
  }
 80067e8:	bf00      	nop
 80067ea:	3708      	adds	r7, #8
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  virtual int getEndpointType() override
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
    return endpoint_;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 80067fc:	4618      	mov	r0, r3
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	3310      	adds	r3, #16
 8006814:	4618      	mov	r0, r3
 8006816:	f7fd f8f1 	bl	80039fc <_ZN13geometry_msgs5Twist7getTypeEv>
 800681a:	4603      	mov	r3, r0
  }
 800681c:	4618      	mov	r0, r3
 800681e:	3708      	adds	r7, #8
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8006824:	b580      	push	{r7, lr}
 8006826:	b082      	sub	sp, #8
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	3310      	adds	r3, #16
 8006830:	4618      	mov	r0, r3
 8006832:	f7fd f8f1 	bl	8003a18 <_ZN13geometry_msgs5Twist6getMD5Ev>
 8006836:	4603      	mov	r3, r0
  }
 8006838:	4618      	mov	r0, r3
 800683a:	3708      	adds	r7, #8
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
    return configured_;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 800684e:	4618      	mov	r0, r3
 8006850:	370c      	adds	r7, #12
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr

0800685a <_GLOBAL__sub_I_Vx>:
 800685a:	b580      	push	{r7, lr}
 800685c:	af00      	add	r7, sp, #0
 800685e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006862:	2001      	movs	r0, #1
 8006864:	f7ff ff1e 	bl	80066a4 <_Z41__static_initialization_and_destruction_0ii>
 8006868:	bd80      	pop	{r7, pc}
	...

0800686c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006872:	2300      	movs	r3, #0
 8006874:	607b      	str	r3, [r7, #4]
 8006876:	4b10      	ldr	r3, [pc, #64]	; (80068b8 <HAL_MspInit+0x4c>)
 8006878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800687a:	4a0f      	ldr	r2, [pc, #60]	; (80068b8 <HAL_MspInit+0x4c>)
 800687c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006880:	6453      	str	r3, [r2, #68]	; 0x44
 8006882:	4b0d      	ldr	r3, [pc, #52]	; (80068b8 <HAL_MspInit+0x4c>)
 8006884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800688a:	607b      	str	r3, [r7, #4]
 800688c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800688e:	2300      	movs	r3, #0
 8006890:	603b      	str	r3, [r7, #0]
 8006892:	4b09      	ldr	r3, [pc, #36]	; (80068b8 <HAL_MspInit+0x4c>)
 8006894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006896:	4a08      	ldr	r2, [pc, #32]	; (80068b8 <HAL_MspInit+0x4c>)
 8006898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800689c:	6413      	str	r3, [r2, #64]	; 0x40
 800689e:	4b06      	ldr	r3, [pc, #24]	; (80068b8 <HAL_MspInit+0x4c>)
 80068a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068a6:	603b      	str	r3, [r7, #0]
 80068a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80068aa:	bf00      	nop
 80068ac:	370c      	adds	r7, #12
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	40023800 	.word	0x40023800

080068bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b092      	sub	sp, #72	; 0x48
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80068c8:	2200      	movs	r2, #0
 80068ca:	601a      	str	r2, [r3, #0]
 80068cc:	605a      	str	r2, [r3, #4]
 80068ce:	609a      	str	r2, [r3, #8]
 80068d0:	60da      	str	r2, [r3, #12]
 80068d2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a8b      	ldr	r2, [pc, #556]	; (8006b08 <HAL_TIM_Base_MspInit+0x24c>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d116      	bne.n	800690c <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80068de:	2300      	movs	r3, #0
 80068e0:	633b      	str	r3, [r7, #48]	; 0x30
 80068e2:	4b8a      	ldr	r3, [pc, #552]	; (8006b0c <HAL_TIM_Base_MspInit+0x250>)
 80068e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e6:	4a89      	ldr	r2, [pc, #548]	; (8006b0c <HAL_TIM_Base_MspInit+0x250>)
 80068e8:	f043 0301 	orr.w	r3, r3, #1
 80068ec:	6453      	str	r3, [r2, #68]	; 0x44
 80068ee:	4b87      	ldr	r3, [pc, #540]	; (8006b0c <HAL_TIM_Base_MspInit+0x250>)
 80068f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f2:	f003 0301 	and.w	r3, r3, #1
 80068f6:	633b      	str	r3, [r7, #48]	; 0x30
 80068f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80068fa:	2200      	movs	r2, #0
 80068fc:	2100      	movs	r1, #0
 80068fe:	2018      	movs	r0, #24
 8006900:	f001 f84b 	bl	800799a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8006904:	2018      	movs	r0, #24
 8006906:	f001 f864 	bl	80079d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 800690a:	e0f9      	b.n	8006b00 <HAL_TIM_Base_MspInit+0x244>
  else if(htim_base->Instance==TIM2)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006914:	d134      	bne.n	8006980 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006916:	2300      	movs	r3, #0
 8006918:	62fb      	str	r3, [r7, #44]	; 0x2c
 800691a:	4b7c      	ldr	r3, [pc, #496]	; (8006b0c <HAL_TIM_Base_MspInit+0x250>)
 800691c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691e:	4a7b      	ldr	r2, [pc, #492]	; (8006b0c <HAL_TIM_Base_MspInit+0x250>)
 8006920:	f043 0301 	orr.w	r3, r3, #1
 8006924:	6413      	str	r3, [r2, #64]	; 0x40
 8006926:	4b79      	ldr	r3, [pc, #484]	; (8006b0c <HAL_TIM_Base_MspInit+0x250>)
 8006928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692a:	f003 0301 	and.w	r3, r3, #1
 800692e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006932:	2300      	movs	r3, #0
 8006934:	62bb      	str	r3, [r7, #40]	; 0x28
 8006936:	4b75      	ldr	r3, [pc, #468]	; (8006b0c <HAL_TIM_Base_MspInit+0x250>)
 8006938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800693a:	4a74      	ldr	r2, [pc, #464]	; (8006b0c <HAL_TIM_Base_MspInit+0x250>)
 800693c:	f043 0301 	orr.w	r3, r3, #1
 8006940:	6313      	str	r3, [r2, #48]	; 0x30
 8006942:	4b72      	ldr	r3, [pc, #456]	; (8006b0c <HAL_TIM_Base_MspInit+0x250>)
 8006944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006946:	f003 0301 	and.w	r3, r3, #1
 800694a:	62bb      	str	r3, [r7, #40]	; 0x28
 800694c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800694e:	2320      	movs	r3, #32
 8006950:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006952:	2302      	movs	r3, #2
 8006954:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006956:	2300      	movs	r3, #0
 8006958:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800695a:	2300      	movs	r3, #0
 800695c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800695e:	2301      	movs	r3, #1
 8006960:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006962:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006966:	4619      	mov	r1, r3
 8006968:	4869      	ldr	r0, [pc, #420]	; (8006b10 <HAL_TIM_Base_MspInit+0x254>)
 800696a:	f001 fc4f 	bl	800820c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800696e:	2200      	movs	r2, #0
 8006970:	2100      	movs	r1, #0
 8006972:	201c      	movs	r0, #28
 8006974:	f001 f811 	bl	800799a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006978:	201c      	movs	r0, #28
 800697a:	f001 f82a 	bl	80079d2 <HAL_NVIC_EnableIRQ>
}
 800697e:	e0bf      	b.n	8006b00 <HAL_TIM_Base_MspInit+0x244>
  else if(htim_base->Instance==TIM3)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a63      	ldr	r2, [pc, #396]	; (8006b14 <HAL_TIM_Base_MspInit+0x258>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d116      	bne.n	80069b8 <HAL_TIM_Base_MspInit+0xfc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800698a:	2300      	movs	r3, #0
 800698c:	627b      	str	r3, [r7, #36]	; 0x24
 800698e:	4b5f      	ldr	r3, [pc, #380]	; (8006b0c <HAL_TIM_Base_MspInit+0x250>)
 8006990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006992:	4a5e      	ldr	r2, [pc, #376]	; (8006b0c <HAL_TIM_Base_MspInit+0x250>)
 8006994:	f043 0302 	orr.w	r3, r3, #2
 8006998:	6413      	str	r3, [r2, #64]	; 0x40
 800699a:	4b5c      	ldr	r3, [pc, #368]	; (8006b0c <HAL_TIM_Base_MspInit+0x250>)
 800699c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699e:	f003 0302 	and.w	r3, r3, #2
 80069a2:	627b      	str	r3, [r7, #36]	; 0x24
 80069a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80069a6:	2200      	movs	r2, #0
 80069a8:	2100      	movs	r1, #0
 80069aa:	201d      	movs	r0, #29
 80069ac:	f000 fff5 	bl	800799a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80069b0:	201d      	movs	r0, #29
 80069b2:	f001 f80e 	bl	80079d2 <HAL_NVIC_EnableIRQ>
}
 80069b6:	e0a3      	b.n	8006b00 <HAL_TIM_Base_MspInit+0x244>
  else if(htim_base->Instance==TIM4)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a56      	ldr	r2, [pc, #344]	; (8006b18 <HAL_TIM_Base_MspInit+0x25c>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d135      	bne.n	8006a2e <HAL_TIM_Base_MspInit+0x172>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80069c2:	2300      	movs	r3, #0
 80069c4:	623b      	str	r3, [r7, #32]
 80069c6:	4b51      	ldr	r3, [pc, #324]	; (8006b0c <HAL_TIM_Base_MspInit+0x250>)
 80069c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ca:	4a50      	ldr	r2, [pc, #320]	; (8006b0c <HAL_TIM_Base_MspInit+0x250>)
 80069cc:	f043 0304 	orr.w	r3, r3, #4
 80069d0:	6413      	str	r3, [r2, #64]	; 0x40
 80069d2:	4b4e      	ldr	r3, [pc, #312]	; (8006b0c <HAL_TIM_Base_MspInit+0x250>)
 80069d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d6:	f003 0304 	and.w	r3, r3, #4
 80069da:	623b      	str	r3, [r7, #32]
 80069dc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80069de:	2300      	movs	r3, #0
 80069e0:	61fb      	str	r3, [r7, #28]
 80069e2:	4b4a      	ldr	r3, [pc, #296]	; (8006b0c <HAL_TIM_Base_MspInit+0x250>)
 80069e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e6:	4a49      	ldr	r2, [pc, #292]	; (8006b0c <HAL_TIM_Base_MspInit+0x250>)
 80069e8:	f043 0308 	orr.w	r3, r3, #8
 80069ec:	6313      	str	r3, [r2, #48]	; 0x30
 80069ee:	4b47      	ldr	r3, [pc, #284]	; (8006b0c <HAL_TIM_Base_MspInit+0x250>)
 80069f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f2:	f003 0308 	and.w	r3, r3, #8
 80069f6:	61fb      	str	r3, [r7, #28]
 80069f8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80069fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069fe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a00:	2302      	movs	r3, #2
 8006a02:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a04:	2300      	movs	r3, #0
 8006a06:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006a10:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006a14:	4619      	mov	r1, r3
 8006a16:	4841      	ldr	r0, [pc, #260]	; (8006b1c <HAL_TIM_Base_MspInit+0x260>)
 8006a18:	f001 fbf8 	bl	800820c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	2100      	movs	r1, #0
 8006a20:	201e      	movs	r0, #30
 8006a22:	f000 ffba 	bl	800799a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8006a26:	201e      	movs	r0, #30
 8006a28:	f000 ffd3 	bl	80079d2 <HAL_NVIC_EnableIRQ>
}
 8006a2c:	e068      	b.n	8006b00 <HAL_TIM_Base_MspInit+0x244>
  else if(htim_base->Instance==TIM5)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a3b      	ldr	r2, [pc, #236]	; (8006b20 <HAL_TIM_Base_MspInit+0x264>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d134      	bne.n	8006aa2 <HAL_TIM_Base_MspInit+0x1e6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006a38:	2300      	movs	r3, #0
 8006a3a:	61bb      	str	r3, [r7, #24]
 8006a3c:	4b33      	ldr	r3, [pc, #204]	; (8006b0c <HAL_TIM_Base_MspInit+0x250>)
 8006a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a40:	4a32      	ldr	r2, [pc, #200]	; (8006b0c <HAL_TIM_Base_MspInit+0x250>)
 8006a42:	f043 0308 	orr.w	r3, r3, #8
 8006a46:	6413      	str	r3, [r2, #64]	; 0x40
 8006a48:	4b30      	ldr	r3, [pc, #192]	; (8006b0c <HAL_TIM_Base_MspInit+0x250>)
 8006a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4c:	f003 0308 	and.w	r3, r3, #8
 8006a50:	61bb      	str	r3, [r7, #24]
 8006a52:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a54:	2300      	movs	r3, #0
 8006a56:	617b      	str	r3, [r7, #20]
 8006a58:	4b2c      	ldr	r3, [pc, #176]	; (8006b0c <HAL_TIM_Base_MspInit+0x250>)
 8006a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a5c:	4a2b      	ldr	r2, [pc, #172]	; (8006b0c <HAL_TIM_Base_MspInit+0x250>)
 8006a5e:	f043 0301 	orr.w	r3, r3, #1
 8006a62:	6313      	str	r3, [r2, #48]	; 0x30
 8006a64:	4b29      	ldr	r3, [pc, #164]	; (8006b0c <HAL_TIM_Base_MspInit+0x250>)
 8006a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a68:	f003 0301 	and.w	r3, r3, #1
 8006a6c:	617b      	str	r3, [r7, #20]
 8006a6e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006a70:	2301      	movs	r3, #1
 8006a72:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a74:	2302      	movs	r3, #2
 8006a76:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8006a80:	2302      	movs	r3, #2
 8006a82:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a84:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006a88:	4619      	mov	r1, r3
 8006a8a:	4821      	ldr	r0, [pc, #132]	; (8006b10 <HAL_TIM_Base_MspInit+0x254>)
 8006a8c:	f001 fbbe 	bl	800820c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8006a90:	2200      	movs	r2, #0
 8006a92:	2100      	movs	r1, #0
 8006a94:	2032      	movs	r0, #50	; 0x32
 8006a96:	f000 ff80 	bl	800799a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8006a9a:	2032      	movs	r0, #50	; 0x32
 8006a9c:	f000 ff99 	bl	80079d2 <HAL_NVIC_EnableIRQ>
}
 8006aa0:	e02e      	b.n	8006b00 <HAL_TIM_Base_MspInit+0x244>
  else if(htim_base->Instance==TIM6)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a1f      	ldr	r2, [pc, #124]	; (8006b24 <HAL_TIM_Base_MspInit+0x268>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d10e      	bne.n	8006aca <HAL_TIM_Base_MspInit+0x20e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006aac:	2300      	movs	r3, #0
 8006aae:	613b      	str	r3, [r7, #16]
 8006ab0:	4b16      	ldr	r3, [pc, #88]	; (8006b0c <HAL_TIM_Base_MspInit+0x250>)
 8006ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab4:	4a15      	ldr	r2, [pc, #84]	; (8006b0c <HAL_TIM_Base_MspInit+0x250>)
 8006ab6:	f043 0310 	orr.w	r3, r3, #16
 8006aba:	6413      	str	r3, [r2, #64]	; 0x40
 8006abc:	4b13      	ldr	r3, [pc, #76]	; (8006b0c <HAL_TIM_Base_MspInit+0x250>)
 8006abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac0:	f003 0310 	and.w	r3, r3, #16
 8006ac4:	613b      	str	r3, [r7, #16]
 8006ac6:	693b      	ldr	r3, [r7, #16]
}
 8006ac8:	e01a      	b.n	8006b00 <HAL_TIM_Base_MspInit+0x244>
  else if(htim_base->Instance==TIM9)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a16      	ldr	r2, [pc, #88]	; (8006b28 <HAL_TIM_Base_MspInit+0x26c>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d115      	bne.n	8006b00 <HAL_TIM_Base_MspInit+0x244>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	60fb      	str	r3, [r7, #12]
 8006ad8:	4b0c      	ldr	r3, [pc, #48]	; (8006b0c <HAL_TIM_Base_MspInit+0x250>)
 8006ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006adc:	4a0b      	ldr	r2, [pc, #44]	; (8006b0c <HAL_TIM_Base_MspInit+0x250>)
 8006ade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ae2:	6453      	str	r3, [r2, #68]	; 0x44
 8006ae4:	4b09      	ldr	r3, [pc, #36]	; (8006b0c <HAL_TIM_Base_MspInit+0x250>)
 8006ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aec:	60fb      	str	r3, [r7, #12]
 8006aee:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8006af0:	2200      	movs	r2, #0
 8006af2:	2100      	movs	r1, #0
 8006af4:	2018      	movs	r0, #24
 8006af6:	f000 ff50 	bl	800799a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8006afa:	2018      	movs	r0, #24
 8006afc:	f000 ff69 	bl	80079d2 <HAL_NVIC_EnableIRQ>
}
 8006b00:	bf00      	nop
 8006b02:	3748      	adds	r7, #72	; 0x48
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	40010000 	.word	0x40010000
 8006b0c:	40023800 	.word	0x40023800
 8006b10:	40020000 	.word	0x40020000
 8006b14:	40000400 	.word	0x40000400
 8006b18:	40000800 	.word	0x40000800
 8006b1c:	40020c00 	.word	0x40020c00
 8006b20:	40000c00 	.word	0x40000c00
 8006b24:	40001000 	.word	0x40001000
 8006b28:	40014000 	.word	0x40014000

08006b2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b08a      	sub	sp, #40	; 0x28
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b34:	f107 0314 	add.w	r3, r7, #20
 8006b38:	2200      	movs	r2, #0
 8006b3a:	601a      	str	r2, [r3, #0]
 8006b3c:	605a      	str	r2, [r3, #4]
 8006b3e:	609a      	str	r2, [r3, #8]
 8006b40:	60da      	str	r2, [r3, #12]
 8006b42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a22      	ldr	r2, [pc, #136]	; (8006bd4 <HAL_TIM_MspPostInit+0xa8>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d13d      	bne.n	8006bca <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006b4e:	2300      	movs	r3, #0
 8006b50:	613b      	str	r3, [r7, #16]
 8006b52:	4b21      	ldr	r3, [pc, #132]	; (8006bd8 <HAL_TIM_MspPostInit+0xac>)
 8006b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b56:	4a20      	ldr	r2, [pc, #128]	; (8006bd8 <HAL_TIM_MspPostInit+0xac>)
 8006b58:	f043 0310 	orr.w	r3, r3, #16
 8006b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8006b5e:	4b1e      	ldr	r3, [pc, #120]	; (8006bd8 <HAL_TIM_MspPostInit+0xac>)
 8006b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b62:	f003 0310 	and.w	r3, r3, #16
 8006b66:	613b      	str	r3, [r7, #16]
 8006b68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	60fb      	str	r3, [r7, #12]
 8006b6e:	4b1a      	ldr	r3, [pc, #104]	; (8006bd8 <HAL_TIM_MspPostInit+0xac>)
 8006b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b72:	4a19      	ldr	r2, [pc, #100]	; (8006bd8 <HAL_TIM_MspPostInit+0xac>)
 8006b74:	f043 0301 	orr.w	r3, r3, #1
 8006b78:	6313      	str	r3, [r2, #48]	; 0x30
 8006b7a:	4b17      	ldr	r3, [pc, #92]	; (8006bd8 <HAL_TIM_MspPostInit+0xac>)
 8006b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b7e:	f003 0301 	and.w	r3, r3, #1
 8006b82:	60fb      	str	r3, [r7, #12]
 8006b84:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8006b86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b90:	2300      	movs	r3, #0
 8006b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b94:	2300      	movs	r3, #0
 8006b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006b9c:	f107 0314 	add.w	r3, r7, #20
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	480e      	ldr	r0, [pc, #56]	; (8006bdc <HAL_TIM_MspPostInit+0xb0>)
 8006ba4:	f001 fb32 	bl	800820c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006ba8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bae:	2302      	movs	r3, #2
 8006bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bbe:	f107 0314 	add.w	r3, r7, #20
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	4806      	ldr	r0, [pc, #24]	; (8006be0 <HAL_TIM_MspPostInit+0xb4>)
 8006bc6:	f001 fb21 	bl	800820c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8006bca:	bf00      	nop
 8006bcc:	3728      	adds	r7, #40	; 0x28
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	40010000 	.word	0x40010000
 8006bd8:	40023800 	.word	0x40023800
 8006bdc:	40021000 	.word	0x40021000
 8006be0:	40020000 	.word	0x40020000

08006be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b08e      	sub	sp, #56	; 0x38
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	601a      	str	r2, [r3, #0]
 8006bf4:	605a      	str	r2, [r3, #4]
 8006bf6:	609a      	str	r2, [r3, #8]
 8006bf8:	60da      	str	r2, [r3, #12]
 8006bfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a86      	ldr	r2, [pc, #536]	; (8006e1c <HAL_UART_MspInit+0x238>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d134      	bne.n	8006c70 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006c06:	2300      	movs	r3, #0
 8006c08:	623b      	str	r3, [r7, #32]
 8006c0a:	4b85      	ldr	r3, [pc, #532]	; (8006e20 <HAL_UART_MspInit+0x23c>)
 8006c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c0e:	4a84      	ldr	r2, [pc, #528]	; (8006e20 <HAL_UART_MspInit+0x23c>)
 8006c10:	f043 0310 	orr.w	r3, r3, #16
 8006c14:	6453      	str	r3, [r2, #68]	; 0x44
 8006c16:	4b82      	ldr	r3, [pc, #520]	; (8006e20 <HAL_UART_MspInit+0x23c>)
 8006c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c1a:	f003 0310 	and.w	r3, r3, #16
 8006c1e:	623b      	str	r3, [r7, #32]
 8006c20:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c22:	2300      	movs	r3, #0
 8006c24:	61fb      	str	r3, [r7, #28]
 8006c26:	4b7e      	ldr	r3, [pc, #504]	; (8006e20 <HAL_UART_MspInit+0x23c>)
 8006c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c2a:	4a7d      	ldr	r2, [pc, #500]	; (8006e20 <HAL_UART_MspInit+0x23c>)
 8006c2c:	f043 0302 	orr.w	r3, r3, #2
 8006c30:	6313      	str	r3, [r2, #48]	; 0x30
 8006c32:	4b7b      	ldr	r3, [pc, #492]	; (8006e20 <HAL_UART_MspInit+0x23c>)
 8006c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c36:	f003 0302 	and.w	r3, r3, #2
 8006c3a:	61fb      	str	r3, [r7, #28]
 8006c3c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006c3e:	23c0      	movs	r3, #192	; 0xc0
 8006c40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c42:	2302      	movs	r3, #2
 8006c44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c46:	2300      	movs	r3, #0
 8006c48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006c4e:	2307      	movs	r3, #7
 8006c50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c56:	4619      	mov	r1, r3
 8006c58:	4872      	ldr	r0, [pc, #456]	; (8006e24 <HAL_UART_MspInit+0x240>)
 8006c5a:	f001 fad7 	bl	800820c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006c5e:	2200      	movs	r2, #0
 8006c60:	2100      	movs	r1, #0
 8006c62:	2025      	movs	r0, #37	; 0x25
 8006c64:	f000 fe99 	bl	800799a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006c68:	2025      	movs	r0, #37	; 0x25
 8006c6a:	f000 feb2 	bl	80079d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006c6e:	e0d1      	b.n	8006e14 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART2)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a6c      	ldr	r2, [pc, #432]	; (8006e28 <HAL_UART_MspInit+0x244>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	f040 8092 	bne.w	8006da0 <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	61bb      	str	r3, [r7, #24]
 8006c80:	4b67      	ldr	r3, [pc, #412]	; (8006e20 <HAL_UART_MspInit+0x23c>)
 8006c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c84:	4a66      	ldr	r2, [pc, #408]	; (8006e20 <HAL_UART_MspInit+0x23c>)
 8006c86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c8a:	6413      	str	r3, [r2, #64]	; 0x40
 8006c8c:	4b64      	ldr	r3, [pc, #400]	; (8006e20 <HAL_UART_MspInit+0x23c>)
 8006c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c94:	61bb      	str	r3, [r7, #24]
 8006c96:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c98:	2300      	movs	r3, #0
 8006c9a:	617b      	str	r3, [r7, #20]
 8006c9c:	4b60      	ldr	r3, [pc, #384]	; (8006e20 <HAL_UART_MspInit+0x23c>)
 8006c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca0:	4a5f      	ldr	r2, [pc, #380]	; (8006e20 <HAL_UART_MspInit+0x23c>)
 8006ca2:	f043 0301 	orr.w	r3, r3, #1
 8006ca6:	6313      	str	r3, [r2, #48]	; 0x30
 8006ca8:	4b5d      	ldr	r3, [pc, #372]	; (8006e20 <HAL_UART_MspInit+0x23c>)
 8006caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cac:	f003 0301 	and.w	r3, r3, #1
 8006cb0:	617b      	str	r3, [r7, #20]
 8006cb2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006cb4:	230c      	movs	r3, #12
 8006cb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cb8:	2302      	movs	r3, #2
 8006cba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cc0:	2303      	movs	r3, #3
 8006cc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006cc4:	2307      	movs	r3, #7
 8006cc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ccc:	4619      	mov	r1, r3
 8006cce:	4857      	ldr	r0, [pc, #348]	; (8006e2c <HAL_UART_MspInit+0x248>)
 8006cd0:	f001 fa9c 	bl	800820c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8006cd4:	4b56      	ldr	r3, [pc, #344]	; (8006e30 <HAL_UART_MspInit+0x24c>)
 8006cd6:	4a57      	ldr	r2, [pc, #348]	; (8006e34 <HAL_UART_MspInit+0x250>)
 8006cd8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8006cda:	4b55      	ldr	r3, [pc, #340]	; (8006e30 <HAL_UART_MspInit+0x24c>)
 8006cdc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006ce0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006ce2:	4b53      	ldr	r3, [pc, #332]	; (8006e30 <HAL_UART_MspInit+0x24c>)
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006ce8:	4b51      	ldr	r3, [pc, #324]	; (8006e30 <HAL_UART_MspInit+0x24c>)
 8006cea:	2200      	movs	r2, #0
 8006cec:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006cee:	4b50      	ldr	r3, [pc, #320]	; (8006e30 <HAL_UART_MspInit+0x24c>)
 8006cf0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006cf4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006cf6:	4b4e      	ldr	r3, [pc, #312]	; (8006e30 <HAL_UART_MspInit+0x24c>)
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006cfc:	4b4c      	ldr	r3, [pc, #304]	; (8006e30 <HAL_UART_MspInit+0x24c>)
 8006cfe:	2200      	movs	r2, #0
 8006d00:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8006d02:	4b4b      	ldr	r3, [pc, #300]	; (8006e30 <HAL_UART_MspInit+0x24c>)
 8006d04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d08:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006d0a:	4b49      	ldr	r3, [pc, #292]	; (8006e30 <HAL_UART_MspInit+0x24c>)
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006d10:	4b47      	ldr	r3, [pc, #284]	; (8006e30 <HAL_UART_MspInit+0x24c>)
 8006d12:	2200      	movs	r2, #0
 8006d14:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006d16:	4846      	ldr	r0, [pc, #280]	; (8006e30 <HAL_UART_MspInit+0x24c>)
 8006d18:	f000 fe76 	bl	8007a08 <HAL_DMA_Init>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d001      	beq.n	8006d26 <HAL_UART_MspInit+0x142>
      Error_Handler();
 8006d22:	f7fb f94d 	bl	8001fc0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a41      	ldr	r2, [pc, #260]	; (8006e30 <HAL_UART_MspInit+0x24c>)
 8006d2a:	639a      	str	r2, [r3, #56]	; 0x38
 8006d2c:	4a40      	ldr	r2, [pc, #256]	; (8006e30 <HAL_UART_MspInit+0x24c>)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8006d32:	4b41      	ldr	r3, [pc, #260]	; (8006e38 <HAL_UART_MspInit+0x254>)
 8006d34:	4a41      	ldr	r2, [pc, #260]	; (8006e3c <HAL_UART_MspInit+0x258>)
 8006d36:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8006d38:	4b3f      	ldr	r3, [pc, #252]	; (8006e38 <HAL_UART_MspInit+0x254>)
 8006d3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006d3e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006d40:	4b3d      	ldr	r3, [pc, #244]	; (8006e38 <HAL_UART_MspInit+0x254>)
 8006d42:	2240      	movs	r2, #64	; 0x40
 8006d44:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d46:	4b3c      	ldr	r3, [pc, #240]	; (8006e38 <HAL_UART_MspInit+0x254>)
 8006d48:	2200      	movs	r2, #0
 8006d4a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006d4c:	4b3a      	ldr	r3, [pc, #232]	; (8006e38 <HAL_UART_MspInit+0x254>)
 8006d4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006d52:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006d54:	4b38      	ldr	r3, [pc, #224]	; (8006e38 <HAL_UART_MspInit+0x254>)
 8006d56:	2200      	movs	r2, #0
 8006d58:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006d5a:	4b37      	ldr	r3, [pc, #220]	; (8006e38 <HAL_UART_MspInit+0x254>)
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8006d60:	4b35      	ldr	r3, [pc, #212]	; (8006e38 <HAL_UART_MspInit+0x254>)
 8006d62:	2200      	movs	r2, #0
 8006d64:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006d66:	4b34      	ldr	r3, [pc, #208]	; (8006e38 <HAL_UART_MspInit+0x254>)
 8006d68:	2200      	movs	r2, #0
 8006d6a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006d6c:	4b32      	ldr	r3, [pc, #200]	; (8006e38 <HAL_UART_MspInit+0x254>)
 8006d6e:	2200      	movs	r2, #0
 8006d70:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006d72:	4831      	ldr	r0, [pc, #196]	; (8006e38 <HAL_UART_MspInit+0x254>)
 8006d74:	f000 fe48 	bl	8007a08 <HAL_DMA_Init>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d001      	beq.n	8006d82 <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8006d7e:	f7fb f91f 	bl	8001fc0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4a2c      	ldr	r2, [pc, #176]	; (8006e38 <HAL_UART_MspInit+0x254>)
 8006d86:	635a      	str	r2, [r3, #52]	; 0x34
 8006d88:	4a2b      	ldr	r2, [pc, #172]	; (8006e38 <HAL_UART_MspInit+0x254>)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006d8e:	2200      	movs	r2, #0
 8006d90:	2100      	movs	r1, #0
 8006d92:	2026      	movs	r0, #38	; 0x26
 8006d94:	f000 fe01 	bl	800799a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006d98:	2026      	movs	r0, #38	; 0x26
 8006d9a:	f000 fe1a 	bl	80079d2 <HAL_NVIC_EnableIRQ>
}
 8006d9e:	e039      	b.n	8006e14 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART3)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a26      	ldr	r2, [pc, #152]	; (8006e40 <HAL_UART_MspInit+0x25c>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d134      	bne.n	8006e14 <HAL_UART_MspInit+0x230>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006daa:	2300      	movs	r3, #0
 8006dac:	613b      	str	r3, [r7, #16]
 8006dae:	4b1c      	ldr	r3, [pc, #112]	; (8006e20 <HAL_UART_MspInit+0x23c>)
 8006db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db2:	4a1b      	ldr	r2, [pc, #108]	; (8006e20 <HAL_UART_MspInit+0x23c>)
 8006db4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006db8:	6413      	str	r3, [r2, #64]	; 0x40
 8006dba:	4b19      	ldr	r3, [pc, #100]	; (8006e20 <HAL_UART_MspInit+0x23c>)
 8006dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dc2:	613b      	str	r3, [r7, #16]
 8006dc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	60fb      	str	r3, [r7, #12]
 8006dca:	4b15      	ldr	r3, [pc, #84]	; (8006e20 <HAL_UART_MspInit+0x23c>)
 8006dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dce:	4a14      	ldr	r2, [pc, #80]	; (8006e20 <HAL_UART_MspInit+0x23c>)
 8006dd0:	f043 0302 	orr.w	r3, r3, #2
 8006dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8006dd6:	4b12      	ldr	r3, [pc, #72]	; (8006e20 <HAL_UART_MspInit+0x23c>)
 8006dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dda:	f003 0302 	and.w	r3, r3, #2
 8006dde:	60fb      	str	r3, [r7, #12]
 8006de0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006de2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006de6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006de8:	2302      	movs	r3, #2
 8006dea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dec:	2300      	movs	r3, #0
 8006dee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006df0:	2303      	movs	r3, #3
 8006df2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006df4:	2307      	movs	r3, #7
 8006df6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006df8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	4809      	ldr	r0, [pc, #36]	; (8006e24 <HAL_UART_MspInit+0x240>)
 8006e00:	f001 fa04 	bl	800820c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006e04:	2200      	movs	r2, #0
 8006e06:	2100      	movs	r1, #0
 8006e08:	2027      	movs	r0, #39	; 0x27
 8006e0a:	f000 fdc6 	bl	800799a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006e0e:	2027      	movs	r0, #39	; 0x27
 8006e10:	f000 fddf 	bl	80079d2 <HAL_NVIC_EnableIRQ>
}
 8006e14:	bf00      	nop
 8006e16:	3738      	adds	r7, #56	; 0x38
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	40011000 	.word	0x40011000
 8006e20:	40023800 	.word	0x40023800
 8006e24:	40020400 	.word	0x40020400
 8006e28:	40004400 	.word	0x40004400
 8006e2c:	40020000 	.word	0x40020000
 8006e30:	20000fd4 	.word	0x20000fd4
 8006e34:	40026088 	.word	0x40026088
 8006e38:	20001150 	.word	0x20001150
 8006e3c:	400260a0 	.word	0x400260a0
 8006e40:	40004800 	.word	0x40004800
 8006e44:	00000000 	.word	0x00000000

08006e48 <PID_control_DC1>:
extern UART_HandleTypeDef huart2;
extern UART_HandleTypeDef huart3;
/* USER CODE BEGIN EV */

void PID_control_DC1(double speed_des1_rps)
{
 8006e48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006e4c:	b082      	sub	sp, #8
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	ed87 0b00 	vstr	d0, [r7]
	Speed_des1_rps = round(fabs(speed_des1_rps*330*0.01));
 8006e54:	a385      	add	r3, pc, #532	; (adr r3, 800706c <PID_control_DC1+0x224>)
 8006e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e5e:	f7f9 fbcb 	bl	80005f8 <__aeabi_dmul>
 8006e62:	4602      	mov	r2, r0
 8006e64:	460b      	mov	r3, r1
 8006e66:	4610      	mov	r0, r2
 8006e68:	4619      	mov	r1, r3
 8006e6a:	a382      	add	r3, pc, #520	; (adr r3, 8007074 <PID_control_DC1+0x22c>)
 8006e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e70:	f7f9 fbc2 	bl	80005f8 <__aeabi_dmul>
 8006e74:	4602      	mov	r2, r0
 8006e76:	460b      	mov	r3, r1
 8006e78:	4690      	mov	r8, r2
 8006e7a:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8006e7e:	ec49 8b10 	vmov	d0, r8, r9
 8006e82:	f004 fedd 	bl	800bc40 <round>
 8006e86:	ec53 2b10 	vmov	r2, r3, d0
 8006e8a:	4610      	mov	r0, r2
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	f7f9 fe63 	bl	8000b58 <__aeabi_d2iz>
 8006e92:	4603      	mov	r3, r0
 8006e94:	4a64      	ldr	r2, [pc, #400]	; (8007028 <PID_control_DC1+0x1e0>)
 8006e96:	6013      	str	r3, [r2, #0]
	rSpeed1 = pluse1 - pluse_pre1;
 8006e98:	4b64      	ldr	r3, [pc, #400]	; (800702c <PID_control_DC1+0x1e4>)
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	4b64      	ldr	r3, [pc, #400]	; (8007030 <PID_control_DC1+0x1e8>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	4a64      	ldr	r2, [pc, #400]	; (8007034 <PID_control_DC1+0x1ec>)
 8006ea4:	6013      	str	r3, [r2, #0]
	pluse_pre1 = pluse1;
 8006ea6:	4b61      	ldr	r3, [pc, #388]	; (800702c <PID_control_DC1+0x1e4>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a61      	ldr	r2, [pc, #388]	; (8007030 <PID_control_DC1+0x1e8>)
 8006eac:	6013      	str	r3, [r2, #0]
	Err1 = Speed_des1_rps - fabs(rSpeed1);
 8006eae:	4b5e      	ldr	r3, [pc, #376]	; (8007028 <PID_control_DC1+0x1e0>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7f9 fb36 	bl	8000524 <__aeabi_i2d>
 8006eb8:	4680      	mov	r8, r0
 8006eba:	4689      	mov	r9, r1
 8006ebc:	4b5d      	ldr	r3, [pc, #372]	; (8007034 <PID_control_DC1+0x1ec>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f7f9 fb2f 	bl	8000524 <__aeabi_i2d>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	460b      	mov	r3, r1
 8006eca:	4614      	mov	r4, r2
 8006ecc:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8006ed0:	4622      	mov	r2, r4
 8006ed2:	462b      	mov	r3, r5
 8006ed4:	4640      	mov	r0, r8
 8006ed6:	4649      	mov	r1, r9
 8006ed8:	f7f9 f9d6 	bl	8000288 <__aeabi_dsub>
 8006edc:	4602      	mov	r2, r0
 8006ede:	460b      	mov	r3, r1
 8006ee0:	4610      	mov	r0, r2
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	f7f9 fe38 	bl	8000b58 <__aeabi_d2iz>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	4a53      	ldr	r2, [pc, #332]	; (8007038 <PID_control_DC1+0x1f0>)
 8006eec:	6013      	str	r3, [r2, #0]

	pPart1 = (float)(Kp1*(Err1));
 8006eee:	4b52      	ldr	r3, [pc, #328]	; (8007038 <PID_control_DC1+0x1f0>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	ee07 3a90 	vmov	s15, r3
 8006ef6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006efa:	4b50      	ldr	r3, [pc, #320]	; (800703c <PID_control_DC1+0x1f4>)
 8006efc:	edd3 7a00 	vldr	s15, [r3]
 8006f00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f04:	4b4e      	ldr	r3, [pc, #312]	; (8007040 <PID_control_DC1+0x1f8>)
 8006f06:	edc3 7a00 	vstr	s15, [r3]
	dPart1 = (float)(Kd1*(Err1 - pre_Err1)*inv_sampling_Time);
 8006f0a:	4b4b      	ldr	r3, [pc, #300]	; (8007038 <PID_control_DC1+0x1f0>)
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	4b4d      	ldr	r3, [pc, #308]	; (8007044 <PID_control_DC1+0x1fc>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	ee07 3a90 	vmov	s15, r3
 8006f18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f1c:	4b4a      	ldr	r3, [pc, #296]	; (8007048 <PID_control_DC1+0x200>)
 8006f1e:	edd3 7a00 	vldr	s15, [r3]
 8006f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f26:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800704c <PID_control_DC1+0x204>
 8006f2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006f2e:	4b48      	ldr	r3, [pc, #288]	; (8007050 <PID_control_DC1+0x208>)
 8006f30:	edc3 7a00 	vstr	s15, [r3]
	iPart1 += (float)((Ki1*sampling_Time*Err1)/1000);
 8006f34:	4b47      	ldr	r3, [pc, #284]	; (8007054 <PID_control_DC1+0x20c>)
 8006f36:	edd3 7a00 	vldr	s15, [r3]
 8006f3a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006f3e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006f42:	4b3d      	ldr	r3, [pc, #244]	; (8007038 <PID_control_DC1+0x1f0>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	ee07 3a90 	vmov	s15, r3
 8006f4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f52:	eddf 6a41 	vldr	s13, [pc, #260]	; 8007058 <PID_control_DC1+0x210>
 8006f56:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006f5a:	4b40      	ldr	r3, [pc, #256]	; (800705c <PID_control_DC1+0x214>)
 8006f5c:	edd3 7a00 	vldr	s15, [r3]
 8006f60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f64:	4b3d      	ldr	r3, [pc, #244]	; (800705c <PID_control_DC1+0x214>)
 8006f66:	edc3 7a00 	vstr	s15, [r3]
	Output1 += round(pPart1 + dPart1 + iPart1);
 8006f6a:	4b35      	ldr	r3, [pc, #212]	; (8007040 <PID_control_DC1+0x1f8>)
 8006f6c:	ed93 7a00 	vldr	s14, [r3]
 8006f70:	4b37      	ldr	r3, [pc, #220]	; (8007050 <PID_control_DC1+0x208>)
 8006f72:	edd3 7a00 	vldr	s15, [r3]
 8006f76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006f7a:	4b38      	ldr	r3, [pc, #224]	; (800705c <PID_control_DC1+0x214>)
 8006f7c:	edd3 7a00 	vldr	s15, [r3]
 8006f80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f84:	ee17 0a90 	vmov	r0, s15
 8006f88:	f7f9 fade 	bl	8000548 <__aeabi_f2d>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	460b      	mov	r3, r1
 8006f90:	ec43 2b10 	vmov	d0, r2, r3
 8006f94:	f004 fe54 	bl	800bc40 <round>
 8006f98:	ec55 4b10 	vmov	r4, r5, d0
 8006f9c:	4b30      	ldr	r3, [pc, #192]	; (8007060 <PID_control_DC1+0x218>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f7f9 fabf 	bl	8000524 <__aeabi_i2d>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	460b      	mov	r3, r1
 8006faa:	4620      	mov	r0, r4
 8006fac:	4629      	mov	r1, r5
 8006fae:	f7f9 f96d 	bl	800028c <__adddf3>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	4610      	mov	r0, r2
 8006fb8:	4619      	mov	r1, r3
 8006fba:	f7f9 fdcd 	bl	8000b58 <__aeabi_d2iz>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	4a27      	ldr	r2, [pc, #156]	; (8007060 <PID_control_DC1+0x218>)
 8006fc2:	6013      	str	r3, [r2, #0]


	if(Output1 > 400)
 8006fc4:	4b26      	ldr	r3, [pc, #152]	; (8007060 <PID_control_DC1+0x218>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8006fcc:	dd03      	ble.n	8006fd6 <PID_control_DC1+0x18e>
		Output1 = 400-1;
 8006fce:	4b24      	ldr	r3, [pc, #144]	; (8007060 <PID_control_DC1+0x218>)
 8006fd0:	f240 128f 	movw	r2, #399	; 0x18f
 8006fd4:	601a      	str	r2, [r3, #0]
	if(Output1 <= 0)
 8006fd6:	4b22      	ldr	r3, [pc, #136]	; (8007060 <PID_control_DC1+0x218>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	dc02      	bgt.n	8006fe4 <PID_control_DC1+0x19c>
		Output1 = 1;
 8006fde:	4b20      	ldr	r3, [pc, #128]	; (8007060 <PID_control_DC1+0x218>)
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	601a      	str	r2, [r3, #0]

	PWM1 = Output1;
 8006fe4:	4b1e      	ldr	r3, [pc, #120]	; (8007060 <PID_control_DC1+0x218>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a1e      	ldr	r2, [pc, #120]	; (8007064 <PID_control_DC1+0x21c>)
 8006fea:	6013      	str	r3, [r2, #0]
	pre_Err1 = Err1;
 8006fec:	4b12      	ldr	r3, [pc, #72]	; (8007038 <PID_control_DC1+0x1f0>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a14      	ldr	r2, [pc, #80]	; (8007044 <PID_control_DC1+0x1fc>)
 8006ff2:	6013      	str	r3, [r2, #0]
	w1  = (rSpeed1)/(3.3); // rspeed1/0.01*330
 8006ff4:	4b0f      	ldr	r3, [pc, #60]	; (8007034 <PID_control_DC1+0x1ec>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f7f9 fa93 	bl	8000524 <__aeabi_i2d>
 8006ffe:	a308      	add	r3, pc, #32	; (adr r3, 8007020 <PID_control_DC1+0x1d8>)
 8007000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007004:	f7f9 fc22 	bl	800084c <__aeabi_ddiv>
 8007008:	4602      	mov	r2, r0
 800700a:	460b      	mov	r3, r1
 800700c:	4916      	ldr	r1, [pc, #88]	; (8007068 <PID_control_DC1+0x220>)
 800700e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8007012:	bf00      	nop
 8007014:	3708      	adds	r7, #8
 8007016:	46bd      	mov	sp, r7
 8007018:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800701c:	f3af 8000 	nop.w
 8007020:	66666666 	.word	0x66666666
 8007024:	400a6666 	.word	0x400a6666
 8007028:	20000ecc 	.word	0x20000ecc
 800702c:	20000ea8 	.word	0x20000ea8
 8007030:	20000eac 	.word	0x20000eac
 8007034:	20000eb0 	.word	0x20000eb0
 8007038:	20000eb4 	.word	0x20000eb4
 800703c:	20000000 	.word	0x20000000
 8007040:	20000ebc 	.word	0x20000ebc
 8007044:	20000eb8 	.word	0x20000eb8
 8007048:	20000004 	.word	0x20000004
 800704c:	42c80000 	.word	0x42c80000
 8007050:	20000ec0 	.word	0x20000ec0
 8007054:	20000e9c 	.word	0x20000e9c
 8007058:	447a0000 	.word	0x447a0000
 800705c:	20000ec4 	.word	0x20000ec4
 8007060:	20000ec8 	.word	0x20000ec8
 8007064:	20000ef8 	.word	0x20000ef8
 8007068:	20000250 	.word	0x20000250
 800706c:	00000000 	.word	0x00000000
 8007070:	4074a000 	.word	0x4074a000
 8007074:	47ae147b 	.word	0x47ae147b
 8007078:	3f847ae1 	.word	0x3f847ae1
 800707c:	00000000 	.word	0x00000000

08007080 <PID_control_DC2>:

void PID_control_DC2(double speed_des2_rps)
{
 8007080:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007084:	b082      	sub	sp, #8
 8007086:	af00      	add	r7, sp, #0
 8007088:	ed87 0b00 	vstr	d0, [r7]
	Speed_des2_rps = round(fabs(speed_des2_rps*330*0.01));
 800708c:	a385      	add	r3, pc, #532	; (adr r3, 80072a4 <PID_control_DC2+0x224>)
 800708e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007092:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007096:	f7f9 faaf 	bl	80005f8 <__aeabi_dmul>
 800709a:	4602      	mov	r2, r0
 800709c:	460b      	mov	r3, r1
 800709e:	4610      	mov	r0, r2
 80070a0:	4619      	mov	r1, r3
 80070a2:	a382      	add	r3, pc, #520	; (adr r3, 80072ac <PID_control_DC2+0x22c>)
 80070a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a8:	f7f9 faa6 	bl	80005f8 <__aeabi_dmul>
 80070ac:	4602      	mov	r2, r0
 80070ae:	460b      	mov	r3, r1
 80070b0:	4690      	mov	r8, r2
 80070b2:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80070b6:	ec49 8b10 	vmov	d0, r8, r9
 80070ba:	f004 fdc1 	bl	800bc40 <round>
 80070be:	ec53 2b10 	vmov	r2, r3, d0
 80070c2:	4610      	mov	r0, r2
 80070c4:	4619      	mov	r1, r3
 80070c6:	f7f9 fd47 	bl	8000b58 <__aeabi_d2iz>
 80070ca:	4603      	mov	r3, r0
 80070cc:	4a64      	ldr	r2, [pc, #400]	; (8007260 <PID_control_DC2+0x1e0>)
 80070ce:	6013      	str	r3, [r2, #0]
	rSpeed2 = pluse2 - pluse_pre2;
 80070d0:	4b64      	ldr	r3, [pc, #400]	; (8007264 <PID_control_DC2+0x1e4>)
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	4b64      	ldr	r3, [pc, #400]	; (8007268 <PID_control_DC2+0x1e8>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	4a64      	ldr	r2, [pc, #400]	; (800726c <PID_control_DC2+0x1ec>)
 80070dc:	6013      	str	r3, [r2, #0]
	pluse_pre2 = pluse2;
 80070de:	4b61      	ldr	r3, [pc, #388]	; (8007264 <PID_control_DC2+0x1e4>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a61      	ldr	r2, [pc, #388]	; (8007268 <PID_control_DC2+0x1e8>)
 80070e4:	6013      	str	r3, [r2, #0]
	Err2 = Speed_des2_rps - fabs(rSpeed2);
 80070e6:	4b5e      	ldr	r3, [pc, #376]	; (8007260 <PID_control_DC2+0x1e0>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7f9 fa1a 	bl	8000524 <__aeabi_i2d>
 80070f0:	4680      	mov	r8, r0
 80070f2:	4689      	mov	r9, r1
 80070f4:	4b5d      	ldr	r3, [pc, #372]	; (800726c <PID_control_DC2+0x1ec>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4618      	mov	r0, r3
 80070fa:	f7f9 fa13 	bl	8000524 <__aeabi_i2d>
 80070fe:	4602      	mov	r2, r0
 8007100:	460b      	mov	r3, r1
 8007102:	4614      	mov	r4, r2
 8007104:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8007108:	4622      	mov	r2, r4
 800710a:	462b      	mov	r3, r5
 800710c:	4640      	mov	r0, r8
 800710e:	4649      	mov	r1, r9
 8007110:	f7f9 f8ba 	bl	8000288 <__aeabi_dsub>
 8007114:	4602      	mov	r2, r0
 8007116:	460b      	mov	r3, r1
 8007118:	4610      	mov	r0, r2
 800711a:	4619      	mov	r1, r3
 800711c:	f7f9 fd1c 	bl	8000b58 <__aeabi_d2iz>
 8007120:	4603      	mov	r3, r0
 8007122:	4a53      	ldr	r2, [pc, #332]	; (8007270 <PID_control_DC2+0x1f0>)
 8007124:	6013      	str	r3, [r2, #0]

	pPart2 = (float)(Kp2*(Err2));
 8007126:	4b52      	ldr	r3, [pc, #328]	; (8007270 <PID_control_DC2+0x1f0>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	ee07 3a90 	vmov	s15, r3
 800712e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007132:	4b50      	ldr	r3, [pc, #320]	; (8007274 <PID_control_DC2+0x1f4>)
 8007134:	edd3 7a00 	vldr	s15, [r3]
 8007138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800713c:	4b4e      	ldr	r3, [pc, #312]	; (8007278 <PID_control_DC2+0x1f8>)
 800713e:	edc3 7a00 	vstr	s15, [r3]
	dPart2 = (float)(Kd2*(Err2 - pre_Err2)*inv_sampling_Time);
 8007142:	4b4b      	ldr	r3, [pc, #300]	; (8007270 <PID_control_DC2+0x1f0>)
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	4b4d      	ldr	r3, [pc, #308]	; (800727c <PID_control_DC2+0x1fc>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	1ad3      	subs	r3, r2, r3
 800714c:	ee07 3a90 	vmov	s15, r3
 8007150:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007154:	4b4a      	ldr	r3, [pc, #296]	; (8007280 <PID_control_DC2+0x200>)
 8007156:	edd3 7a00 	vldr	s15, [r3]
 800715a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800715e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8007284 <PID_control_DC2+0x204>
 8007162:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007166:	4b48      	ldr	r3, [pc, #288]	; (8007288 <PID_control_DC2+0x208>)
 8007168:	edc3 7a00 	vstr	s15, [r3]
	iPart2 += (float)((Ki2*sampling_Time*Err2)/1000);
 800716c:	4b47      	ldr	r3, [pc, #284]	; (800728c <PID_control_DC2+0x20c>)
 800716e:	edd3 7a00 	vldr	s15, [r3]
 8007172:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8007176:	ee27 7a87 	vmul.f32	s14, s15, s14
 800717a:	4b3d      	ldr	r3, [pc, #244]	; (8007270 <PID_control_DC2+0x1f0>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	ee07 3a90 	vmov	s15, r3
 8007182:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800718a:	eddf 6a41 	vldr	s13, [pc, #260]	; 8007290 <PID_control_DC2+0x210>
 800718e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007192:	4b40      	ldr	r3, [pc, #256]	; (8007294 <PID_control_DC2+0x214>)
 8007194:	edd3 7a00 	vldr	s15, [r3]
 8007198:	ee77 7a27 	vadd.f32	s15, s14, s15
 800719c:	4b3d      	ldr	r3, [pc, #244]	; (8007294 <PID_control_DC2+0x214>)
 800719e:	edc3 7a00 	vstr	s15, [r3]
	Output2 += round(pPart2 + dPart2 + iPart2);
 80071a2:	4b35      	ldr	r3, [pc, #212]	; (8007278 <PID_control_DC2+0x1f8>)
 80071a4:	ed93 7a00 	vldr	s14, [r3]
 80071a8:	4b37      	ldr	r3, [pc, #220]	; (8007288 <PID_control_DC2+0x208>)
 80071aa:	edd3 7a00 	vldr	s15, [r3]
 80071ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80071b2:	4b38      	ldr	r3, [pc, #224]	; (8007294 <PID_control_DC2+0x214>)
 80071b4:	edd3 7a00 	vldr	s15, [r3]
 80071b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80071bc:	ee17 0a90 	vmov	r0, s15
 80071c0:	f7f9 f9c2 	bl	8000548 <__aeabi_f2d>
 80071c4:	4602      	mov	r2, r0
 80071c6:	460b      	mov	r3, r1
 80071c8:	ec43 2b10 	vmov	d0, r2, r3
 80071cc:	f004 fd38 	bl	800bc40 <round>
 80071d0:	ec55 4b10 	vmov	r4, r5, d0
 80071d4:	4b30      	ldr	r3, [pc, #192]	; (8007298 <PID_control_DC2+0x218>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4618      	mov	r0, r3
 80071da:	f7f9 f9a3 	bl	8000524 <__aeabi_i2d>
 80071de:	4602      	mov	r2, r0
 80071e0:	460b      	mov	r3, r1
 80071e2:	4620      	mov	r0, r4
 80071e4:	4629      	mov	r1, r5
 80071e6:	f7f9 f851 	bl	800028c <__adddf3>
 80071ea:	4602      	mov	r2, r0
 80071ec:	460b      	mov	r3, r1
 80071ee:	4610      	mov	r0, r2
 80071f0:	4619      	mov	r1, r3
 80071f2:	f7f9 fcb1 	bl	8000b58 <__aeabi_d2iz>
 80071f6:	4603      	mov	r3, r0
 80071f8:	4a27      	ldr	r2, [pc, #156]	; (8007298 <PID_control_DC2+0x218>)
 80071fa:	6013      	str	r3, [r2, #0]

	if(Output2 > 400)
 80071fc:	4b26      	ldr	r3, [pc, #152]	; (8007298 <PID_control_DC2+0x218>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8007204:	dd03      	ble.n	800720e <PID_control_DC2+0x18e>
		Output2 = 400-1;
 8007206:	4b24      	ldr	r3, [pc, #144]	; (8007298 <PID_control_DC2+0x218>)
 8007208:	f240 128f 	movw	r2, #399	; 0x18f
 800720c:	601a      	str	r2, [r3, #0]
	if(Output2 <= 0)
 800720e:	4b22      	ldr	r3, [pc, #136]	; (8007298 <PID_control_DC2+0x218>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2b00      	cmp	r3, #0
 8007214:	dc02      	bgt.n	800721c <PID_control_DC2+0x19c>
		Output2 = 1;
 8007216:	4b20      	ldr	r3, [pc, #128]	; (8007298 <PID_control_DC2+0x218>)
 8007218:	2201      	movs	r2, #1
 800721a:	601a      	str	r2, [r3, #0]

	PWM2 = Output2;
 800721c:	4b1e      	ldr	r3, [pc, #120]	; (8007298 <PID_control_DC2+0x218>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a1e      	ldr	r2, [pc, #120]	; (800729c <PID_control_DC2+0x21c>)
 8007222:	6013      	str	r3, [r2, #0]
	pre_Err2 = Err2;
 8007224:	4b12      	ldr	r3, [pc, #72]	; (8007270 <PID_control_DC2+0x1f0>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a14      	ldr	r2, [pc, #80]	; (800727c <PID_control_DC2+0x1fc>)
 800722a:	6013      	str	r3, [r2, #0]
	w2  = (rSpeed2)/(3.3);
 800722c:	4b0f      	ldr	r3, [pc, #60]	; (800726c <PID_control_DC2+0x1ec>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4618      	mov	r0, r3
 8007232:	f7f9 f977 	bl	8000524 <__aeabi_i2d>
 8007236:	a308      	add	r3, pc, #32	; (adr r3, 8007258 <PID_control_DC2+0x1d8>)
 8007238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723c:	f7f9 fb06 	bl	800084c <__aeabi_ddiv>
 8007240:	4602      	mov	r2, r0
 8007242:	460b      	mov	r3, r1
 8007244:	4916      	ldr	r1, [pc, #88]	; (80072a0 <PID_control_DC2+0x220>)
 8007246:	e9c1 2300 	strd	r2, r3, [r1]
}
 800724a:	bf00      	nop
 800724c:	3708      	adds	r7, #8
 800724e:	46bd      	mov	sp, r7
 8007250:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007254:	f3af 8000 	nop.w
 8007258:	66666666 	.word	0x66666666
 800725c:	400a6666 	.word	0x400a6666
 8007260:	20000ef4 	.word	0x20000ef4
 8007264:	20000ed0 	.word	0x20000ed0
 8007268:	20000ed4 	.word	0x20000ed4
 800726c:	20000ed8 	.word	0x20000ed8
 8007270:	20000edc 	.word	0x20000edc
 8007274:	20000008 	.word	0x20000008
 8007278:	20000ee4 	.word	0x20000ee4
 800727c:	20000ee0 	.word	0x20000ee0
 8007280:	2000000c 	.word	0x2000000c
 8007284:	42c80000 	.word	0x42c80000
 8007288:	20000ee8 	.word	0x20000ee8
 800728c:	20000ea0 	.word	0x20000ea0
 8007290:	447a0000 	.word	0x447a0000
 8007294:	20000eec 	.word	0x20000eec
 8007298:	20000ef0 	.word	0x20000ef0
 800729c:	20000efc 	.word	0x20000efc
 80072a0:	20000258 	.word	0x20000258
 80072a4:	00000000 	.word	0x00000000
 80072a8:	4074a000 	.word	0x4074a000
 80072ac:	47ae147b 	.word	0x47ae147b
 80072b0:	3f847ae1 	.word	0x3f847ae1

080072b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80072b4:	b480      	push	{r7}
 80072b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80072b8:	e7fe      	b.n	80072b8 <NMI_Handler+0x4>

080072ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80072ba:	b480      	push	{r7}
 80072bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80072be:	e7fe      	b.n	80072be <HardFault_Handler+0x4>

080072c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80072c0:	b480      	push	{r7}
 80072c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80072c4:	e7fe      	b.n	80072c4 <MemManage_Handler+0x4>

080072c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80072c6:	b480      	push	{r7}
 80072c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80072ca:	e7fe      	b.n	80072ca <BusFault_Handler+0x4>

080072cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80072cc:	b480      	push	{r7}
 80072ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80072d0:	e7fe      	b.n	80072d0 <UsageFault_Handler+0x4>

080072d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80072d2:	b480      	push	{r7}
 80072d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80072d6:	bf00      	nop
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80072e0:	b480      	push	{r7}
 80072e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80072e4:	bf00      	nop
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr

080072ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80072ee:	b480      	push	{r7}
 80072f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80072f2:	bf00      	nop
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007300:	f000 fa50 	bl	80077a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007304:	bf00      	nop
 8007306:	bd80      	pop	{r7, pc}

08007308 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800730c:	2002      	movs	r0, #2
 800730e:	f001 f94b 	bl	80085a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
	if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_0) == 0)
 8007312:	2101      	movs	r1, #1
 8007314:	480c      	ldr	r0, [pc, #48]	; (8007348 <EXTI1_IRQHandler+0x40>)
 8007316:	f001 f915 	bl	8008544 <HAL_GPIO_ReadPin>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d105      	bne.n	800732c <EXTI1_IRQHandler+0x24>
	{
		pluse2++;
 8007320:	4b0a      	ldr	r3, [pc, #40]	; (800734c <EXTI1_IRQHandler+0x44>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	3301      	adds	r3, #1
 8007326:	4a09      	ldr	r2, [pc, #36]	; (800734c <EXTI1_IRQHandler+0x44>)
 8007328:	6013      	str	r3, [r2, #0]
	else if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_0) == 1)
	{
		pluse2--;
	}
  /* USER CODE END EXTI1_IRQn 1 */
}
 800732a:	e00b      	b.n	8007344 <EXTI1_IRQHandler+0x3c>
	else if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_0) == 1)
 800732c:	2101      	movs	r1, #1
 800732e:	4806      	ldr	r0, [pc, #24]	; (8007348 <EXTI1_IRQHandler+0x40>)
 8007330:	f001 f908 	bl	8008544 <HAL_GPIO_ReadPin>
 8007334:	4603      	mov	r3, r0
 8007336:	2b01      	cmp	r3, #1
 8007338:	d104      	bne.n	8007344 <EXTI1_IRQHandler+0x3c>
		pluse2--;
 800733a:	4b04      	ldr	r3, [pc, #16]	; (800734c <EXTI1_IRQHandler+0x44>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	3b01      	subs	r3, #1
 8007340:	4a02      	ldr	r2, [pc, #8]	; (800734c <EXTI1_IRQHandler+0x44>)
 8007342:	6013      	str	r3, [r2, #0]
}
 8007344:	bf00      	nop
 8007346:	bd80      	pop	{r7, pc}
 8007348:	40020800 	.word	0x40020800
 800734c:	20000ed0 	.word	0x20000ed0

08007350 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8007354:	4802      	ldr	r0, [pc, #8]	; (8007360 <DMA1_Stream5_IRQHandler+0x10>)
 8007356:	f000 fcef 	bl	8007d38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800735a:	bf00      	nop
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	20000fd4 	.word	0x20000fd4

08007364 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8007368:	4802      	ldr	r0, [pc, #8]	; (8007374 <DMA1_Stream6_IRQHandler+0x10>)
 800736a:	f000 fce5 	bl	8007d38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800736e:	bf00      	nop
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	20001150 	.word	0x20001150

08007378 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800737c:	2040      	movs	r0, #64	; 0x40
 800737e:	f001 f913 	bl	80085a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_7) == 0)
 8007382:	2180      	movs	r1, #128	; 0x80
 8007384:	480c      	ldr	r0, [pc, #48]	; (80073b8 <EXTI9_5_IRQHandler+0x40>)
 8007386:	f001 f8dd 	bl	8008544 <HAL_GPIO_ReadPin>
 800738a:	4603      	mov	r3, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d105      	bne.n	800739c <EXTI9_5_IRQHandler+0x24>
  {
	  pluse1--;
 8007390:	4b0a      	ldr	r3, [pc, #40]	; (80073bc <EXTI9_5_IRQHandler+0x44>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	3b01      	subs	r3, #1
 8007396:	4a09      	ldr	r2, [pc, #36]	; (80073bc <EXTI9_5_IRQHandler+0x44>)
 8007398:	6013      	str	r3, [r2, #0]
  else if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_7) == 1)
  {
	  pluse1++;
  }
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800739a:	e00b      	b.n	80073b4 <EXTI9_5_IRQHandler+0x3c>
  else if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_7) == 1)
 800739c:	2180      	movs	r1, #128	; 0x80
 800739e:	4806      	ldr	r0, [pc, #24]	; (80073b8 <EXTI9_5_IRQHandler+0x40>)
 80073a0:	f001 f8d0 	bl	8008544 <HAL_GPIO_ReadPin>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d104      	bne.n	80073b4 <EXTI9_5_IRQHandler+0x3c>
	  pluse1++;
 80073aa:	4b04      	ldr	r3, [pc, #16]	; (80073bc <EXTI9_5_IRQHandler+0x44>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	3301      	adds	r3, #1
 80073b0:	4a02      	ldr	r2, [pc, #8]	; (80073bc <EXTI9_5_IRQHandler+0x44>)
 80073b2:	6013      	str	r3, [r2, #0]
}
 80073b4:	bf00      	nop
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	40020800 	.word	0x40020800
 80073bc:	20000ea8 	.word	0x20000ea8

080073c0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80073c4:	480f      	ldr	r0, [pc, #60]	; (8007404 <TIM1_BRK_TIM9_IRQHandler+0x44>)
 80073c6:	f002 f927 	bl	8009618 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 80073ca:	480f      	ldr	r0, [pc, #60]	; (8007408 <TIM1_BRK_TIM9_IRQHandler+0x48>)
 80073cc:	f002 f924 	bl	8009618 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */
  	PID_control_DC1(g_vel_angular_right);
 80073d0:	4b0e      	ldr	r3, [pc, #56]	; (800740c <TIM1_BRK_TIM9_IRQHandler+0x4c>)
 80073d2:	ed93 7b00 	vldr	d7, [r3]
 80073d6:	eeb0 0a47 	vmov.f32	s0, s14
 80073da:	eef0 0a67 	vmov.f32	s1, s15
 80073de:	f7ff fd33 	bl	8006e48 <PID_control_DC1>
  	PID_control_DC2(g_vel_angular_left);
 80073e2:	4b0b      	ldr	r3, [pc, #44]	; (8007410 <TIM1_BRK_TIM9_IRQHandler+0x50>)
 80073e4:	ed93 7b00 	vldr	d7, [r3]
 80073e8:	eeb0 0a47 	vmov.f32	s0, s14
 80073ec:	eef0 0a67 	vmov.f32	s1, s15
 80073f0:	f7ff fe46 	bl	8007080 <PID_control_DC2>
	count++;
 80073f4:	4b07      	ldr	r3, [pc, #28]	; (8007414 <TIM1_BRK_TIM9_IRQHandler+0x54>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	3301      	adds	r3, #1
 80073fa:	4a06      	ldr	r2, [pc, #24]	; (8007414 <TIM1_BRK_TIM9_IRQHandler+0x54>)
 80073fc:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80073fe:	bf00      	nop
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	2000123c 	.word	0x2000123c
 8007408:	20001284 	.word	0x20001284
 800740c:	20000280 	.word	0x20000280
 8007410:	20000278 	.word	0x20000278
 8007414:	20000ea4 	.word	0x20000ea4

08007418 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800741c:	4802      	ldr	r0, [pc, #8]	; (8007428 <TIM2_IRQHandler+0x10>)
 800741e:	f002 f8fb 	bl	8009618 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8007422:	bf00      	nop
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	200012cc 	.word	0x200012cc

0800742c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007430:	4802      	ldr	r0, [pc, #8]	; (800743c <TIM3_IRQHandler+0x10>)
 8007432:	f002 f8f1 	bl	8009618 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8007436:	bf00      	nop
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	20001108 	.word	0x20001108

08007440 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8007444:	4802      	ldr	r0, [pc, #8]	; (8007450 <TIM4_IRQHandler+0x10>)
 8007446:	f002 f8e7 	bl	8009618 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800744a:	bf00      	nop
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	20001034 	.word	0x20001034

08007454 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007458:	4802      	ldr	r0, [pc, #8]	; (8007464 <USART1_IRQHandler+0x10>)
 800745a:	f003 fb03 	bl	800aa64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800745e:	bf00      	nop
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	200011b0 	.word	0x200011b0

08007468 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800746c:	4802      	ldr	r0, [pc, #8]	; (8007478 <USART2_IRQHandler+0x10>)
 800746e:	f003 faf9 	bl	800aa64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8007472:	bf00      	nop
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	20001314 	.word	0x20001314

0800747c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8007480:	4802      	ldr	r0, [pc, #8]	; (800748c <USART3_IRQHandler+0x10>)
 8007482:	f003 faef 	bl	800aa64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8007486:	bf00      	nop
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	2000107c 	.word	0x2000107c

08007490 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8007494:	4802      	ldr	r0, [pc, #8]	; (80074a0 <TIM5_IRQHandler+0x10>)
 8007496:	f002 f8bf 	bl	8009618 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800749a:	bf00      	nop
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	200010c0 	.word	0x200010c0

080074a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80074a4:	b480      	push	{r7}
 80074a6:	af00      	add	r7, sp, #0
	return 1;
 80074a8:	2301      	movs	r3, #1
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <_kill>:

int _kill(int pid, int sig)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80074be:	f004 fc0f 	bl	800bce0 <__errno>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2216      	movs	r2, #22
 80074c6:	601a      	str	r2, [r3, #0]
	return -1;
 80074c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3708      	adds	r7, #8
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <_exit>:

void _exit (int status)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80074dc:	f04f 31ff 	mov.w	r1, #4294967295
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f7ff ffe7 	bl	80074b4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80074e6:	e7fe      	b.n	80074e6 <_exit+0x12>

080074e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b086      	sub	sp, #24
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80074f4:	2300      	movs	r3, #0
 80074f6:	617b      	str	r3, [r7, #20]
 80074f8:	e00a      	b.n	8007510 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80074fa:	f3af 8000 	nop.w
 80074fe:	4601      	mov	r1, r0
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	1c5a      	adds	r2, r3, #1
 8007504:	60ba      	str	r2, [r7, #8]
 8007506:	b2ca      	uxtb	r2, r1
 8007508:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	3301      	adds	r3, #1
 800750e:	617b      	str	r3, [r7, #20]
 8007510:	697a      	ldr	r2, [r7, #20]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	429a      	cmp	r2, r3
 8007516:	dbf0      	blt.n	80074fa <_read+0x12>
	}

return len;
 8007518:	687b      	ldr	r3, [r7, #4]
}
 800751a:	4618      	mov	r0, r3
 800751c:	3718      	adds	r7, #24
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b086      	sub	sp, #24
 8007526:	af00      	add	r7, sp, #0
 8007528:	60f8      	str	r0, [r7, #12]
 800752a:	60b9      	str	r1, [r7, #8]
 800752c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800752e:	2300      	movs	r3, #0
 8007530:	617b      	str	r3, [r7, #20]
 8007532:	e009      	b.n	8007548 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	1c5a      	adds	r2, r3, #1
 8007538:	60ba      	str	r2, [r7, #8]
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	4618      	mov	r0, r3
 800753e:	f7f9 ff5d 	bl	80013fc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	3301      	adds	r3, #1
 8007546:	617b      	str	r3, [r7, #20]
 8007548:	697a      	ldr	r2, [r7, #20]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	429a      	cmp	r2, r3
 800754e:	dbf1      	blt.n	8007534 <_write+0x12>
	}
	return len;
 8007550:	687b      	ldr	r3, [r7, #4]
}
 8007552:	4618      	mov	r0, r3
 8007554:	3718      	adds	r7, #24
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <_close>:

int _close(int file)
{
 800755a:	b480      	push	{r7}
 800755c:	b083      	sub	sp, #12
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
	return -1;
 8007562:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007566:	4618      	mov	r0, r3
 8007568:	370c      	adds	r7, #12
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr

08007572 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007572:	b480      	push	{r7}
 8007574:	b083      	sub	sp, #12
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
 800757a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007582:	605a      	str	r2, [r3, #4]
	return 0;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	370c      	adds	r7, #12
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr

08007592 <_isatty>:

int _isatty(int file)
{
 8007592:	b480      	push	{r7}
 8007594:	b083      	sub	sp, #12
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
	return 1;
 800759a:	2301      	movs	r3, #1
}
 800759c:	4618      	mov	r0, r3
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	607a      	str	r2, [r7, #4]
	return 0;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3714      	adds	r7, #20
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
	...

080075c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b086      	sub	sp, #24
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80075cc:	4a14      	ldr	r2, [pc, #80]	; (8007620 <_sbrk+0x5c>)
 80075ce:	4b15      	ldr	r3, [pc, #84]	; (8007624 <_sbrk+0x60>)
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80075d8:	4b13      	ldr	r3, [pc, #76]	; (8007628 <_sbrk+0x64>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d102      	bne.n	80075e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80075e0:	4b11      	ldr	r3, [pc, #68]	; (8007628 <_sbrk+0x64>)
 80075e2:	4a12      	ldr	r2, [pc, #72]	; (800762c <_sbrk+0x68>)
 80075e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80075e6:	4b10      	ldr	r3, [pc, #64]	; (8007628 <_sbrk+0x64>)
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4413      	add	r3, r2
 80075ee:	693a      	ldr	r2, [r7, #16]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d207      	bcs.n	8007604 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80075f4:	f004 fb74 	bl	800bce0 <__errno>
 80075f8:	4603      	mov	r3, r0
 80075fa:	220c      	movs	r2, #12
 80075fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80075fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007602:	e009      	b.n	8007618 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007604:	4b08      	ldr	r3, [pc, #32]	; (8007628 <_sbrk+0x64>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800760a:	4b07      	ldr	r3, [pc, #28]	; (8007628 <_sbrk+0x64>)
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4413      	add	r3, r2
 8007612:	4a05      	ldr	r2, [pc, #20]	; (8007628 <_sbrk+0x64>)
 8007614:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007616:	68fb      	ldr	r3, [r7, #12]
}
 8007618:	4618      	mov	r0, r3
 800761a:	3718      	adds	r7, #24
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	20020000 	.word	0x20020000
 8007624:	00000400 	.word	0x00000400
 8007628:	20000f00 	.word	0x20000f00
 800762c:	20001370 	.word	0x20001370

08007630 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007630:	b480      	push	{r7}
 8007632:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007634:	4b06      	ldr	r3, [pc, #24]	; (8007650 <SystemInit+0x20>)
 8007636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800763a:	4a05      	ldr	r2, [pc, #20]	; (8007650 <SystemInit+0x20>)
 800763c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007640:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007644:	bf00      	nop
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr
 800764e:	bf00      	nop
 8007650:	e000ed00 	.word	0xe000ed00

08007654 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8007654:	b480      	push	{r7}
 8007656:	b085      	sub	sp, #20
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	0a5a      	lsrs	r2, r3, #9
 8007664:	490f      	ldr	r1, [pc, #60]	; (80076a4 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8007666:	fba1 1202 	umull	r1, r2, r1, r2
 800766a:	09d2      	lsrs	r2, r2, #7
 800766c:	490e      	ldr	r1, [pc, #56]	; (80076a8 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800766e:	fb01 f202 	mul.w	r2, r1, r2
 8007672:	1a9b      	subs	r3, r3, r2
 8007674:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	0a5b      	lsrs	r3, r3, #9
 800767c:	4a09      	ldr	r2, [pc, #36]	; (80076a4 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800767e:	fba2 2303 	umull	r2, r3, r2, r3
 8007682:	09db      	lsrs	r3, r3, #7
 8007684:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	441a      	add	r2, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	68fa      	ldr	r2, [r7, #12]
 8007696:	601a      	str	r2, [r3, #0]
}
 8007698:	bf00      	nop
 800769a:	3714      	adds	r7, #20
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr
 80076a4:	00044b83 	.word	0x00044b83
 80076a8:	3b9aca00 	.word	0x3b9aca00

080076ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80076ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80076e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80076b0:	480d      	ldr	r0, [pc, #52]	; (80076e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80076b2:	490e      	ldr	r1, [pc, #56]	; (80076ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80076b4:	4a0e      	ldr	r2, [pc, #56]	; (80076f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80076b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80076b8:	e002      	b.n	80076c0 <LoopCopyDataInit>

080076ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80076ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80076bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80076be:	3304      	adds	r3, #4

080076c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80076c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80076c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80076c4:	d3f9      	bcc.n	80076ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80076c6:	4a0b      	ldr	r2, [pc, #44]	; (80076f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80076c8:	4c0b      	ldr	r4, [pc, #44]	; (80076f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80076ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80076cc:	e001      	b.n	80076d2 <LoopFillZerobss>

080076ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80076ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80076d0:	3204      	adds	r2, #4

080076d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80076d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80076d4:	d3fb      	bcc.n	80076ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80076d6:	f7ff ffab 	bl	8007630 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80076da:	f004 fb07 	bl	800bcec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80076de:	f7f9 ff87 	bl	80015f0 <main>
  bx  lr    
 80076e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80076e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80076e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80076ec:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80076f0:	08010fec 	.word	0x08010fec
  ldr r2, =_sbss
 80076f4:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80076f8:	2000136c 	.word	0x2000136c

080076fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80076fc:	e7fe      	b.n	80076fc <ADC_IRQHandler>
	...

08007700 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007704:	4b0e      	ldr	r3, [pc, #56]	; (8007740 <HAL_Init+0x40>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a0d      	ldr	r2, [pc, #52]	; (8007740 <HAL_Init+0x40>)
 800770a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800770e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007710:	4b0b      	ldr	r3, [pc, #44]	; (8007740 <HAL_Init+0x40>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a0a      	ldr	r2, [pc, #40]	; (8007740 <HAL_Init+0x40>)
 8007716:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800771a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800771c:	4b08      	ldr	r3, [pc, #32]	; (8007740 <HAL_Init+0x40>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a07      	ldr	r2, [pc, #28]	; (8007740 <HAL_Init+0x40>)
 8007722:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007726:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007728:	2003      	movs	r0, #3
 800772a:	f000 f92b 	bl	8007984 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800772e:	2000      	movs	r0, #0
 8007730:	f000 f808 	bl	8007744 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007734:	f7ff f89a 	bl	800686c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	40023c00 	.word	0x40023c00

08007744 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800774c:	4b12      	ldr	r3, [pc, #72]	; (8007798 <HAL_InitTick+0x54>)
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	4b12      	ldr	r3, [pc, #72]	; (800779c <HAL_InitTick+0x58>)
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	4619      	mov	r1, r3
 8007756:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800775a:	fbb3 f3f1 	udiv	r3, r3, r1
 800775e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007762:	4618      	mov	r0, r3
 8007764:	f000 f943 	bl	80079ee <HAL_SYSTICK_Config>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d001      	beq.n	8007772 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	e00e      	b.n	8007790 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2b0f      	cmp	r3, #15
 8007776:	d80a      	bhi.n	800778e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007778:	2200      	movs	r2, #0
 800777a:	6879      	ldr	r1, [r7, #4]
 800777c:	f04f 30ff 	mov.w	r0, #4294967295
 8007780:	f000 f90b 	bl	800799a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007784:	4a06      	ldr	r2, [pc, #24]	; (80077a0 <HAL_InitTick+0x5c>)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800778a:	2300      	movs	r3, #0
 800778c:	e000      	b.n	8007790 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
}
 8007790:	4618      	mov	r0, r3
 8007792:	3708      	adds	r7, #8
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}
 8007798:	20000010 	.word	0x20000010
 800779c:	20000018 	.word	0x20000018
 80077a0:	20000014 	.word	0x20000014

080077a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80077a4:	b480      	push	{r7}
 80077a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80077a8:	4b06      	ldr	r3, [pc, #24]	; (80077c4 <HAL_IncTick+0x20>)
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	461a      	mov	r2, r3
 80077ae:	4b06      	ldr	r3, [pc, #24]	; (80077c8 <HAL_IncTick+0x24>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4413      	add	r3, r2
 80077b4:	4a04      	ldr	r2, [pc, #16]	; (80077c8 <HAL_IncTick+0x24>)
 80077b6:	6013      	str	r3, [r2, #0]
}
 80077b8:	bf00      	nop
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop
 80077c4:	20000018 	.word	0x20000018
 80077c8:	20001358 	.word	0x20001358

080077cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80077cc:	b480      	push	{r7}
 80077ce:	af00      	add	r7, sp, #0
  return uwTick;
 80077d0:	4b03      	ldr	r3, [pc, #12]	; (80077e0 <HAL_GetTick+0x14>)
 80077d2:	681b      	ldr	r3, [r3, #0]
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	20001358 	.word	0x20001358

080077e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f003 0307 	and.w	r3, r3, #7
 80077f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80077f4:	4b0c      	ldr	r3, [pc, #48]	; (8007828 <__NVIC_SetPriorityGrouping+0x44>)
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007800:	4013      	ands	r3, r2
 8007802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800780c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007816:	4a04      	ldr	r2, [pc, #16]	; (8007828 <__NVIC_SetPriorityGrouping+0x44>)
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	60d3      	str	r3, [r2, #12]
}
 800781c:	bf00      	nop
 800781e:	3714      	adds	r7, #20
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr
 8007828:	e000ed00 	.word	0xe000ed00

0800782c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800782c:	b480      	push	{r7}
 800782e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007830:	4b04      	ldr	r3, [pc, #16]	; (8007844 <__NVIC_GetPriorityGrouping+0x18>)
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	0a1b      	lsrs	r3, r3, #8
 8007836:	f003 0307 	and.w	r3, r3, #7
}
 800783a:	4618      	mov	r0, r3
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr
 8007844:	e000ed00 	.word	0xe000ed00

08007848 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	4603      	mov	r3, r0
 8007850:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007856:	2b00      	cmp	r3, #0
 8007858:	db0b      	blt.n	8007872 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800785a:	79fb      	ldrb	r3, [r7, #7]
 800785c:	f003 021f 	and.w	r2, r3, #31
 8007860:	4907      	ldr	r1, [pc, #28]	; (8007880 <__NVIC_EnableIRQ+0x38>)
 8007862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007866:	095b      	lsrs	r3, r3, #5
 8007868:	2001      	movs	r0, #1
 800786a:	fa00 f202 	lsl.w	r2, r0, r2
 800786e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007872:	bf00      	nop
 8007874:	370c      	adds	r7, #12
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr
 800787e:	bf00      	nop
 8007880:	e000e100 	.word	0xe000e100

08007884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	4603      	mov	r3, r0
 800788c:	6039      	str	r1, [r7, #0]
 800788e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007894:	2b00      	cmp	r3, #0
 8007896:	db0a      	blt.n	80078ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	b2da      	uxtb	r2, r3
 800789c:	490c      	ldr	r1, [pc, #48]	; (80078d0 <__NVIC_SetPriority+0x4c>)
 800789e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078a2:	0112      	lsls	r2, r2, #4
 80078a4:	b2d2      	uxtb	r2, r2
 80078a6:	440b      	add	r3, r1
 80078a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80078ac:	e00a      	b.n	80078c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	b2da      	uxtb	r2, r3
 80078b2:	4908      	ldr	r1, [pc, #32]	; (80078d4 <__NVIC_SetPriority+0x50>)
 80078b4:	79fb      	ldrb	r3, [r7, #7]
 80078b6:	f003 030f 	and.w	r3, r3, #15
 80078ba:	3b04      	subs	r3, #4
 80078bc:	0112      	lsls	r2, r2, #4
 80078be:	b2d2      	uxtb	r2, r2
 80078c0:	440b      	add	r3, r1
 80078c2:	761a      	strb	r2, [r3, #24]
}
 80078c4:	bf00      	nop
 80078c6:	370c      	adds	r7, #12
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr
 80078d0:	e000e100 	.word	0xe000e100
 80078d4:	e000ed00 	.word	0xe000ed00

080078d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80078d8:	b480      	push	{r7}
 80078da:	b089      	sub	sp, #36	; 0x24
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f003 0307 	and.w	r3, r3, #7
 80078ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	f1c3 0307 	rsb	r3, r3, #7
 80078f2:	2b04      	cmp	r3, #4
 80078f4:	bf28      	it	cs
 80078f6:	2304      	movcs	r3, #4
 80078f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	3304      	adds	r3, #4
 80078fe:	2b06      	cmp	r3, #6
 8007900:	d902      	bls.n	8007908 <NVIC_EncodePriority+0x30>
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	3b03      	subs	r3, #3
 8007906:	e000      	b.n	800790a <NVIC_EncodePriority+0x32>
 8007908:	2300      	movs	r3, #0
 800790a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800790c:	f04f 32ff 	mov.w	r2, #4294967295
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	fa02 f303 	lsl.w	r3, r2, r3
 8007916:	43da      	mvns	r2, r3
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	401a      	ands	r2, r3
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007920:	f04f 31ff 	mov.w	r1, #4294967295
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	fa01 f303 	lsl.w	r3, r1, r3
 800792a:	43d9      	mvns	r1, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007930:	4313      	orrs	r3, r2
         );
}
 8007932:	4618      	mov	r0, r3
 8007934:	3724      	adds	r7, #36	; 0x24
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr
	...

08007940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	3b01      	subs	r3, #1
 800794c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007950:	d301      	bcc.n	8007956 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007952:	2301      	movs	r3, #1
 8007954:	e00f      	b.n	8007976 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007956:	4a0a      	ldr	r2, [pc, #40]	; (8007980 <SysTick_Config+0x40>)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	3b01      	subs	r3, #1
 800795c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800795e:	210f      	movs	r1, #15
 8007960:	f04f 30ff 	mov.w	r0, #4294967295
 8007964:	f7ff ff8e 	bl	8007884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007968:	4b05      	ldr	r3, [pc, #20]	; (8007980 <SysTick_Config+0x40>)
 800796a:	2200      	movs	r2, #0
 800796c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800796e:	4b04      	ldr	r3, [pc, #16]	; (8007980 <SysTick_Config+0x40>)
 8007970:	2207      	movs	r2, #7
 8007972:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007974:	2300      	movs	r3, #0
}
 8007976:	4618      	mov	r0, r3
 8007978:	3708      	adds	r7, #8
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	e000e010 	.word	0xe000e010

08007984 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f7ff ff29 	bl	80077e4 <__NVIC_SetPriorityGrouping>
}
 8007992:	bf00      	nop
 8007994:	3708      	adds	r7, #8
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800799a:	b580      	push	{r7, lr}
 800799c:	b086      	sub	sp, #24
 800799e:	af00      	add	r7, sp, #0
 80079a0:	4603      	mov	r3, r0
 80079a2:	60b9      	str	r1, [r7, #8]
 80079a4:	607a      	str	r2, [r7, #4]
 80079a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80079a8:	2300      	movs	r3, #0
 80079aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80079ac:	f7ff ff3e 	bl	800782c <__NVIC_GetPriorityGrouping>
 80079b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	68b9      	ldr	r1, [r7, #8]
 80079b6:	6978      	ldr	r0, [r7, #20]
 80079b8:	f7ff ff8e 	bl	80078d8 <NVIC_EncodePriority>
 80079bc:	4602      	mov	r2, r0
 80079be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079c2:	4611      	mov	r1, r2
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7ff ff5d 	bl	8007884 <__NVIC_SetPriority>
}
 80079ca:	bf00      	nop
 80079cc:	3718      	adds	r7, #24
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b082      	sub	sp, #8
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	4603      	mov	r3, r0
 80079da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80079dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7ff ff31 	bl	8007848 <__NVIC_EnableIRQ>
}
 80079e6:	bf00      	nop
 80079e8:	3708      	adds	r7, #8
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b082      	sub	sp, #8
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f7ff ffa2 	bl	8007940 <SysTick_Config>
 80079fc:	4603      	mov	r3, r0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3708      	adds	r7, #8
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
	...

08007a08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b086      	sub	sp, #24
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007a10:	2300      	movs	r3, #0
 8007a12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007a14:	f7ff feda 	bl	80077cc <HAL_GetTick>
 8007a18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d101      	bne.n	8007a24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	e099      	b.n	8007b58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2202      	movs	r2, #2
 8007a28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f022 0201 	bic.w	r2, r2, #1
 8007a42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007a44:	e00f      	b.n	8007a66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007a46:	f7ff fec1 	bl	80077cc <HAL_GetTick>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	1ad3      	subs	r3, r2, r3
 8007a50:	2b05      	cmp	r3, #5
 8007a52:	d908      	bls.n	8007a66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2220      	movs	r2, #32
 8007a58:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2203      	movs	r2, #3
 8007a5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007a62:	2303      	movs	r3, #3
 8007a64:	e078      	b.n	8007b58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f003 0301 	and.w	r3, r3, #1
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d1e8      	bne.n	8007a46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007a7c:	697a      	ldr	r2, [r7, #20]
 8007a7e:	4b38      	ldr	r3, [pc, #224]	; (8007b60 <HAL_DMA_Init+0x158>)
 8007a80:	4013      	ands	r3, r2
 8007a82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	685a      	ldr	r2, [r3, #4]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007a92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	691b      	ldr	r3, [r3, #16]
 8007a98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	699b      	ldr	r3, [r3, #24]
 8007aa4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007aaa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6a1b      	ldr	r3, [r3, #32]
 8007ab0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007ab2:	697a      	ldr	r2, [r7, #20]
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007abc:	2b04      	cmp	r3, #4
 8007abe:	d107      	bne.n	8007ad0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	697a      	ldr	r2, [r7, #20]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	697a      	ldr	r2, [r7, #20]
 8007ad6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	695b      	ldr	r3, [r3, #20]
 8007ade:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	f023 0307 	bic.w	r3, r3, #7
 8007ae6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aec:	697a      	ldr	r2, [r7, #20]
 8007aee:	4313      	orrs	r3, r2
 8007af0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af6:	2b04      	cmp	r3, #4
 8007af8:	d117      	bne.n	8007b2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007afe:	697a      	ldr	r2, [r7, #20]
 8007b00:	4313      	orrs	r3, r2
 8007b02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00e      	beq.n	8007b2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 fb01 	bl	8008114 <DMA_CheckFifoParam>
 8007b12:	4603      	mov	r3, r0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d008      	beq.n	8007b2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2240      	movs	r2, #64	; 0x40
 8007b1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2201      	movs	r2, #1
 8007b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007b26:	2301      	movs	r3, #1
 8007b28:	e016      	b.n	8007b58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	697a      	ldr	r2, [r7, #20]
 8007b30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 fab8 	bl	80080a8 <DMA_CalcBaseAndBitshift>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b40:	223f      	movs	r2, #63	; 0x3f
 8007b42:	409a      	lsls	r2, r3
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2201      	movs	r2, #1
 8007b52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007b56:	2300      	movs	r3, #0
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3718      	adds	r7, #24
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	f010803f 	.word	0xf010803f

08007b64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b086      	sub	sp, #24
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	607a      	str	r2, [r7, #4]
 8007b70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b72:	2300      	movs	r3, #0
 8007b74:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b7a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d101      	bne.n	8007b8a <HAL_DMA_Start_IT+0x26>
 8007b86:	2302      	movs	r3, #2
 8007b88:	e040      	b.n	8007c0c <HAL_DMA_Start_IT+0xa8>
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d12f      	bne.n	8007bfe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2202      	movs	r2, #2
 8007ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	68b9      	ldr	r1, [r7, #8]
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f000 fa4a 	bl	800804c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bbc:	223f      	movs	r2, #63	; 0x3f
 8007bbe:	409a      	lsls	r2, r3
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f042 0216 	orr.w	r2, r2, #22
 8007bd2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d007      	beq.n	8007bec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f042 0208 	orr.w	r2, r2, #8
 8007bea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f042 0201 	orr.w	r2, r2, #1
 8007bfa:	601a      	str	r2, [r3, #0]
 8007bfc:	e005      	b.n	8007c0a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007c06:	2302      	movs	r3, #2
 8007c08:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3718      	adds	r7, #24
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c20:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007c22:	f7ff fdd3 	bl	80077cc <HAL_GetTick>
 8007c26:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	d008      	beq.n	8007c46 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2280      	movs	r2, #128	; 0x80
 8007c38:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	e052      	b.n	8007cec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f022 0216 	bic.w	r2, r2, #22
 8007c54:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	695a      	ldr	r2, [r3, #20]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c64:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d103      	bne.n	8007c76 <HAL_DMA_Abort+0x62>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d007      	beq.n	8007c86 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f022 0208 	bic.w	r2, r2, #8
 8007c84:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f022 0201 	bic.w	r2, r2, #1
 8007c94:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007c96:	e013      	b.n	8007cc0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007c98:	f7ff fd98 	bl	80077cc <HAL_GetTick>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	2b05      	cmp	r3, #5
 8007ca4:	d90c      	bls.n	8007cc0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2220      	movs	r2, #32
 8007caa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2203      	movs	r2, #3
 8007cb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	e015      	b.n	8007cec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f003 0301 	and.w	r3, r3, #1
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d1e4      	bne.n	8007c98 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cd2:	223f      	movs	r2, #63	; 0x3f
 8007cd4:	409a      	lsls	r2, r3
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	d004      	beq.n	8007d12 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2280      	movs	r2, #128	; 0x80
 8007d0c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e00c      	b.n	8007d2c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2205      	movs	r2, #5
 8007d16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f022 0201 	bic.w	r2, r2, #1
 8007d28:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007d2a:	2300      	movs	r3, #0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	370c      	adds	r7, #12
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b086      	sub	sp, #24
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007d40:	2300      	movs	r3, #0
 8007d42:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007d44:	4b92      	ldr	r3, [pc, #584]	; (8007f90 <HAL_DMA_IRQHandler+0x258>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a92      	ldr	r2, [pc, #584]	; (8007f94 <HAL_DMA_IRQHandler+0x25c>)
 8007d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d4e:	0a9b      	lsrs	r3, r3, #10
 8007d50:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d56:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d62:	2208      	movs	r2, #8
 8007d64:	409a      	lsls	r2, r3
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	4013      	ands	r3, r2
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d01a      	beq.n	8007da4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f003 0304 	and.w	r3, r3, #4
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d013      	beq.n	8007da4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f022 0204 	bic.w	r2, r2, #4
 8007d8a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d90:	2208      	movs	r2, #8
 8007d92:	409a      	lsls	r2, r3
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d9c:	f043 0201 	orr.w	r2, r3, #1
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007da8:	2201      	movs	r2, #1
 8007daa:	409a      	lsls	r2, r3
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	4013      	ands	r3, r2
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d012      	beq.n	8007dda <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	695b      	ldr	r3, [r3, #20]
 8007dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00b      	beq.n	8007dda <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	409a      	lsls	r2, r3
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dd2:	f043 0202 	orr.w	r2, r3, #2
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dde:	2204      	movs	r2, #4
 8007de0:	409a      	lsls	r2, r3
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	4013      	ands	r3, r2
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d012      	beq.n	8007e10 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f003 0302 	and.w	r3, r3, #2
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00b      	beq.n	8007e10 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dfc:	2204      	movs	r2, #4
 8007dfe:	409a      	lsls	r2, r3
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e08:	f043 0204 	orr.w	r2, r3, #4
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e14:	2210      	movs	r2, #16
 8007e16:	409a      	lsls	r2, r3
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d043      	beq.n	8007ea8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f003 0308 	and.w	r3, r3, #8
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d03c      	beq.n	8007ea8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e32:	2210      	movs	r2, #16
 8007e34:	409a      	lsls	r2, r3
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d018      	beq.n	8007e7a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d108      	bne.n	8007e68 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d024      	beq.n	8007ea8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	4798      	blx	r3
 8007e66:	e01f      	b.n	8007ea8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d01b      	beq.n	8007ea8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	4798      	blx	r3
 8007e78:	e016      	b.n	8007ea8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d107      	bne.n	8007e98 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f022 0208 	bic.w	r2, r2, #8
 8007e96:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d003      	beq.n	8007ea8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eac:	2220      	movs	r2, #32
 8007eae:	409a      	lsls	r2, r3
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	4013      	ands	r3, r2
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	f000 808e 	beq.w	8007fd6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 0310 	and.w	r3, r3, #16
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	f000 8086 	beq.w	8007fd6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ece:	2220      	movs	r2, #32
 8007ed0:	409a      	lsls	r2, r3
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	2b05      	cmp	r3, #5
 8007ee0:	d136      	bne.n	8007f50 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f022 0216 	bic.w	r2, r2, #22
 8007ef0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	695a      	ldr	r2, [r3, #20]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f00:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d103      	bne.n	8007f12 <HAL_DMA_IRQHandler+0x1da>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d007      	beq.n	8007f22 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f022 0208 	bic.w	r2, r2, #8
 8007f20:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f26:	223f      	movs	r2, #63	; 0x3f
 8007f28:	409a      	lsls	r2, r3
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2201      	movs	r2, #1
 8007f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d07d      	beq.n	8008042 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	4798      	blx	r3
        }
        return;
 8007f4e:	e078      	b.n	8008042 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d01c      	beq.n	8007f98 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d108      	bne.n	8007f7e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d030      	beq.n	8007fd6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	4798      	blx	r3
 8007f7c:	e02b      	b.n	8007fd6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d027      	beq.n	8007fd6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	4798      	blx	r3
 8007f8e:	e022      	b.n	8007fd6 <HAL_DMA_IRQHandler+0x29e>
 8007f90:	20000010 	.word	0x20000010
 8007f94:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d10f      	bne.n	8007fc6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f022 0210 	bic.w	r2, r2, #16
 8007fb4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d003      	beq.n	8007fd6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d032      	beq.n	8008044 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fe2:	f003 0301 	and.w	r3, r3, #1
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d022      	beq.n	8008030 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2205      	movs	r2, #5
 8007fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f022 0201 	bic.w	r2, r2, #1
 8008000:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	3301      	adds	r3, #1
 8008006:	60bb      	str	r3, [r7, #8]
 8008008:	697a      	ldr	r2, [r7, #20]
 800800a:	429a      	cmp	r2, r3
 800800c:	d307      	bcc.n	800801e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f003 0301 	and.w	r3, r3, #1
 8008018:	2b00      	cmp	r3, #0
 800801a:	d1f2      	bne.n	8008002 <HAL_DMA_IRQHandler+0x2ca>
 800801c:	e000      	b.n	8008020 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800801e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2201      	movs	r2, #1
 8008024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008034:	2b00      	cmp	r3, #0
 8008036:	d005      	beq.n	8008044 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	4798      	blx	r3
 8008040:	e000      	b.n	8008044 <HAL_DMA_IRQHandler+0x30c>
        return;
 8008042:	bf00      	nop
    }
  }
}
 8008044:	3718      	adds	r7, #24
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop

0800804c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800804c:	b480      	push	{r7}
 800804e:	b085      	sub	sp, #20
 8008050:	af00      	add	r7, sp, #0
 8008052:	60f8      	str	r0, [r7, #12]
 8008054:	60b9      	str	r1, [r7, #8]
 8008056:	607a      	str	r2, [r7, #4]
 8008058:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008068:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	683a      	ldr	r2, [r7, #0]
 8008070:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	2b40      	cmp	r3, #64	; 0x40
 8008078:	d108      	bne.n	800808c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	68ba      	ldr	r2, [r7, #8]
 8008088:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800808a:	e007      	b.n	800809c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	68ba      	ldr	r2, [r7, #8]
 8008092:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	60da      	str	r2, [r3, #12]
}
 800809c:	bf00      	nop
 800809e:	3714      	adds	r7, #20
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	3b10      	subs	r3, #16
 80080b8:	4a14      	ldr	r2, [pc, #80]	; (800810c <DMA_CalcBaseAndBitshift+0x64>)
 80080ba:	fba2 2303 	umull	r2, r3, r2, r3
 80080be:	091b      	lsrs	r3, r3, #4
 80080c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80080c2:	4a13      	ldr	r2, [pc, #76]	; (8008110 <DMA_CalcBaseAndBitshift+0x68>)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	4413      	add	r3, r2
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	461a      	mov	r2, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2b03      	cmp	r3, #3
 80080d4:	d909      	bls.n	80080ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80080de:	f023 0303 	bic.w	r3, r3, #3
 80080e2:	1d1a      	adds	r2, r3, #4
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	659a      	str	r2, [r3, #88]	; 0x58
 80080e8:	e007      	b.n	80080fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80080f2:	f023 0303 	bic.w	r3, r3, #3
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3714      	adds	r7, #20
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop
 800810c:	aaaaaaab 	.word	0xaaaaaaab
 8008110:	08010abc 	.word	0x08010abc

08008114 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008114:	b480      	push	{r7}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800811c:	2300      	movs	r3, #0
 800811e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008124:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	699b      	ldr	r3, [r3, #24]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d11f      	bne.n	800816e <DMA_CheckFifoParam+0x5a>
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	2b03      	cmp	r3, #3
 8008132:	d856      	bhi.n	80081e2 <DMA_CheckFifoParam+0xce>
 8008134:	a201      	add	r2, pc, #4	; (adr r2, 800813c <DMA_CheckFifoParam+0x28>)
 8008136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813a:	bf00      	nop
 800813c:	0800814d 	.word	0x0800814d
 8008140:	0800815f 	.word	0x0800815f
 8008144:	0800814d 	.word	0x0800814d
 8008148:	080081e3 	.word	0x080081e3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008150:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008154:	2b00      	cmp	r3, #0
 8008156:	d046      	beq.n	80081e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800815c:	e043      	b.n	80081e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008162:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008166:	d140      	bne.n	80081ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800816c:	e03d      	b.n	80081ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	699b      	ldr	r3, [r3, #24]
 8008172:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008176:	d121      	bne.n	80081bc <DMA_CheckFifoParam+0xa8>
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	2b03      	cmp	r3, #3
 800817c:	d837      	bhi.n	80081ee <DMA_CheckFifoParam+0xda>
 800817e:	a201      	add	r2, pc, #4	; (adr r2, 8008184 <DMA_CheckFifoParam+0x70>)
 8008180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008184:	08008195 	.word	0x08008195
 8008188:	0800819b 	.word	0x0800819b
 800818c:	08008195 	.word	0x08008195
 8008190:	080081ad 	.word	0x080081ad
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	73fb      	strb	r3, [r7, #15]
      break;
 8008198:	e030      	b.n	80081fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800819e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d025      	beq.n	80081f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80081a6:	2301      	movs	r3, #1
 80081a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80081aa:	e022      	b.n	80081f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80081b4:	d11f      	bne.n	80081f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80081ba:	e01c      	b.n	80081f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	2b02      	cmp	r3, #2
 80081c0:	d903      	bls.n	80081ca <DMA_CheckFifoParam+0xb6>
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	2b03      	cmp	r3, #3
 80081c6:	d003      	beq.n	80081d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80081c8:	e018      	b.n	80081fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	73fb      	strb	r3, [r7, #15]
      break;
 80081ce:	e015      	b.n	80081fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d00e      	beq.n	80081fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	73fb      	strb	r3, [r7, #15]
      break;
 80081e0:	e00b      	b.n	80081fa <DMA_CheckFifoParam+0xe6>
      break;
 80081e2:	bf00      	nop
 80081e4:	e00a      	b.n	80081fc <DMA_CheckFifoParam+0xe8>
      break;
 80081e6:	bf00      	nop
 80081e8:	e008      	b.n	80081fc <DMA_CheckFifoParam+0xe8>
      break;
 80081ea:	bf00      	nop
 80081ec:	e006      	b.n	80081fc <DMA_CheckFifoParam+0xe8>
      break;
 80081ee:	bf00      	nop
 80081f0:	e004      	b.n	80081fc <DMA_CheckFifoParam+0xe8>
      break;
 80081f2:	bf00      	nop
 80081f4:	e002      	b.n	80081fc <DMA_CheckFifoParam+0xe8>
      break;   
 80081f6:	bf00      	nop
 80081f8:	e000      	b.n	80081fc <DMA_CheckFifoParam+0xe8>
      break;
 80081fa:	bf00      	nop
    }
  } 
  
  return status; 
 80081fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3714      	adds	r7, #20
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr
 800820a:	bf00      	nop

0800820c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800820c:	b480      	push	{r7}
 800820e:	b089      	sub	sp, #36	; 0x24
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008216:	2300      	movs	r3, #0
 8008218:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800821a:	2300      	movs	r3, #0
 800821c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800821e:	2300      	movs	r3, #0
 8008220:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008222:	2300      	movs	r3, #0
 8008224:	61fb      	str	r3, [r7, #28]
 8008226:	e16b      	b.n	8008500 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008228:	2201      	movs	r2, #1
 800822a:	69fb      	ldr	r3, [r7, #28]
 800822c:	fa02 f303 	lsl.w	r3, r2, r3
 8008230:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	697a      	ldr	r2, [r7, #20]
 8008238:	4013      	ands	r3, r2
 800823a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800823c:	693a      	ldr	r2, [r7, #16]
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	429a      	cmp	r2, r3
 8008242:	f040 815a 	bne.w	80084fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	f003 0303 	and.w	r3, r3, #3
 800824e:	2b01      	cmp	r3, #1
 8008250:	d005      	beq.n	800825e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800825a:	2b02      	cmp	r3, #2
 800825c:	d130      	bne.n	80082c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008264:	69fb      	ldr	r3, [r7, #28]
 8008266:	005b      	lsls	r3, r3, #1
 8008268:	2203      	movs	r2, #3
 800826a:	fa02 f303 	lsl.w	r3, r2, r3
 800826e:	43db      	mvns	r3, r3
 8008270:	69ba      	ldr	r2, [r7, #24]
 8008272:	4013      	ands	r3, r2
 8008274:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	68da      	ldr	r2, [r3, #12]
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	005b      	lsls	r3, r3, #1
 800827e:	fa02 f303 	lsl.w	r3, r2, r3
 8008282:	69ba      	ldr	r2, [r7, #24]
 8008284:	4313      	orrs	r3, r2
 8008286:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	69ba      	ldr	r2, [r7, #24]
 800828c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008294:	2201      	movs	r2, #1
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	fa02 f303 	lsl.w	r3, r2, r3
 800829c:	43db      	mvns	r3, r3
 800829e:	69ba      	ldr	r2, [r7, #24]
 80082a0:	4013      	ands	r3, r2
 80082a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	091b      	lsrs	r3, r3, #4
 80082aa:	f003 0201 	and.w	r2, r3, #1
 80082ae:	69fb      	ldr	r3, [r7, #28]
 80082b0:	fa02 f303 	lsl.w	r3, r2, r3
 80082b4:	69ba      	ldr	r2, [r7, #24]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	69ba      	ldr	r2, [r7, #24]
 80082be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	f003 0303 	and.w	r3, r3, #3
 80082c8:	2b03      	cmp	r3, #3
 80082ca:	d017      	beq.n	80082fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	005b      	lsls	r3, r3, #1
 80082d6:	2203      	movs	r2, #3
 80082d8:	fa02 f303 	lsl.w	r3, r2, r3
 80082dc:	43db      	mvns	r3, r3
 80082de:	69ba      	ldr	r2, [r7, #24]
 80082e0:	4013      	ands	r3, r2
 80082e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	689a      	ldr	r2, [r3, #8]
 80082e8:	69fb      	ldr	r3, [r7, #28]
 80082ea:	005b      	lsls	r3, r3, #1
 80082ec:	fa02 f303 	lsl.w	r3, r2, r3
 80082f0:	69ba      	ldr	r2, [r7, #24]
 80082f2:	4313      	orrs	r3, r2
 80082f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	69ba      	ldr	r2, [r7, #24]
 80082fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	f003 0303 	and.w	r3, r3, #3
 8008304:	2b02      	cmp	r3, #2
 8008306:	d123      	bne.n	8008350 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008308:	69fb      	ldr	r3, [r7, #28]
 800830a:	08da      	lsrs	r2, r3, #3
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	3208      	adds	r2, #8
 8008310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008314:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008316:	69fb      	ldr	r3, [r7, #28]
 8008318:	f003 0307 	and.w	r3, r3, #7
 800831c:	009b      	lsls	r3, r3, #2
 800831e:	220f      	movs	r2, #15
 8008320:	fa02 f303 	lsl.w	r3, r2, r3
 8008324:	43db      	mvns	r3, r3
 8008326:	69ba      	ldr	r2, [r7, #24]
 8008328:	4013      	ands	r3, r2
 800832a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	691a      	ldr	r2, [r3, #16]
 8008330:	69fb      	ldr	r3, [r7, #28]
 8008332:	f003 0307 	and.w	r3, r3, #7
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	fa02 f303 	lsl.w	r3, r2, r3
 800833c:	69ba      	ldr	r2, [r7, #24]
 800833e:	4313      	orrs	r3, r2
 8008340:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008342:	69fb      	ldr	r3, [r7, #28]
 8008344:	08da      	lsrs	r2, r3, #3
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	3208      	adds	r2, #8
 800834a:	69b9      	ldr	r1, [r7, #24]
 800834c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008356:	69fb      	ldr	r3, [r7, #28]
 8008358:	005b      	lsls	r3, r3, #1
 800835a:	2203      	movs	r2, #3
 800835c:	fa02 f303 	lsl.w	r3, r2, r3
 8008360:	43db      	mvns	r3, r3
 8008362:	69ba      	ldr	r2, [r7, #24]
 8008364:	4013      	ands	r3, r2
 8008366:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	f003 0203 	and.w	r2, r3, #3
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	005b      	lsls	r3, r3, #1
 8008374:	fa02 f303 	lsl.w	r3, r2, r3
 8008378:	69ba      	ldr	r2, [r7, #24]
 800837a:	4313      	orrs	r3, r2
 800837c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	69ba      	ldr	r2, [r7, #24]
 8008382:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800838c:	2b00      	cmp	r3, #0
 800838e:	f000 80b4 	beq.w	80084fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008392:	2300      	movs	r3, #0
 8008394:	60fb      	str	r3, [r7, #12]
 8008396:	4b60      	ldr	r3, [pc, #384]	; (8008518 <HAL_GPIO_Init+0x30c>)
 8008398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800839a:	4a5f      	ldr	r2, [pc, #380]	; (8008518 <HAL_GPIO_Init+0x30c>)
 800839c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80083a0:	6453      	str	r3, [r2, #68]	; 0x44
 80083a2:	4b5d      	ldr	r3, [pc, #372]	; (8008518 <HAL_GPIO_Init+0x30c>)
 80083a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083aa:	60fb      	str	r3, [r7, #12]
 80083ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80083ae:	4a5b      	ldr	r2, [pc, #364]	; (800851c <HAL_GPIO_Init+0x310>)
 80083b0:	69fb      	ldr	r3, [r7, #28]
 80083b2:	089b      	lsrs	r3, r3, #2
 80083b4:	3302      	adds	r3, #2
 80083b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	f003 0303 	and.w	r3, r3, #3
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	220f      	movs	r2, #15
 80083c6:	fa02 f303 	lsl.w	r3, r2, r3
 80083ca:	43db      	mvns	r3, r3
 80083cc:	69ba      	ldr	r2, [r7, #24]
 80083ce:	4013      	ands	r3, r2
 80083d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4a52      	ldr	r2, [pc, #328]	; (8008520 <HAL_GPIO_Init+0x314>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d02b      	beq.n	8008432 <HAL_GPIO_Init+0x226>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4a51      	ldr	r2, [pc, #324]	; (8008524 <HAL_GPIO_Init+0x318>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d025      	beq.n	800842e <HAL_GPIO_Init+0x222>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a50      	ldr	r2, [pc, #320]	; (8008528 <HAL_GPIO_Init+0x31c>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d01f      	beq.n	800842a <HAL_GPIO_Init+0x21e>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4a4f      	ldr	r2, [pc, #316]	; (800852c <HAL_GPIO_Init+0x320>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d019      	beq.n	8008426 <HAL_GPIO_Init+0x21a>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a4e      	ldr	r2, [pc, #312]	; (8008530 <HAL_GPIO_Init+0x324>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d013      	beq.n	8008422 <HAL_GPIO_Init+0x216>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4a4d      	ldr	r2, [pc, #308]	; (8008534 <HAL_GPIO_Init+0x328>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d00d      	beq.n	800841e <HAL_GPIO_Init+0x212>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a4c      	ldr	r2, [pc, #304]	; (8008538 <HAL_GPIO_Init+0x32c>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d007      	beq.n	800841a <HAL_GPIO_Init+0x20e>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a4b      	ldr	r2, [pc, #300]	; (800853c <HAL_GPIO_Init+0x330>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d101      	bne.n	8008416 <HAL_GPIO_Init+0x20a>
 8008412:	2307      	movs	r3, #7
 8008414:	e00e      	b.n	8008434 <HAL_GPIO_Init+0x228>
 8008416:	2308      	movs	r3, #8
 8008418:	e00c      	b.n	8008434 <HAL_GPIO_Init+0x228>
 800841a:	2306      	movs	r3, #6
 800841c:	e00a      	b.n	8008434 <HAL_GPIO_Init+0x228>
 800841e:	2305      	movs	r3, #5
 8008420:	e008      	b.n	8008434 <HAL_GPIO_Init+0x228>
 8008422:	2304      	movs	r3, #4
 8008424:	e006      	b.n	8008434 <HAL_GPIO_Init+0x228>
 8008426:	2303      	movs	r3, #3
 8008428:	e004      	b.n	8008434 <HAL_GPIO_Init+0x228>
 800842a:	2302      	movs	r3, #2
 800842c:	e002      	b.n	8008434 <HAL_GPIO_Init+0x228>
 800842e:	2301      	movs	r3, #1
 8008430:	e000      	b.n	8008434 <HAL_GPIO_Init+0x228>
 8008432:	2300      	movs	r3, #0
 8008434:	69fa      	ldr	r2, [r7, #28]
 8008436:	f002 0203 	and.w	r2, r2, #3
 800843a:	0092      	lsls	r2, r2, #2
 800843c:	4093      	lsls	r3, r2
 800843e:	69ba      	ldr	r2, [r7, #24]
 8008440:	4313      	orrs	r3, r2
 8008442:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008444:	4935      	ldr	r1, [pc, #212]	; (800851c <HAL_GPIO_Init+0x310>)
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	089b      	lsrs	r3, r3, #2
 800844a:	3302      	adds	r3, #2
 800844c:	69ba      	ldr	r2, [r7, #24]
 800844e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008452:	4b3b      	ldr	r3, [pc, #236]	; (8008540 <HAL_GPIO_Init+0x334>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	43db      	mvns	r3, r3
 800845c:	69ba      	ldr	r2, [r7, #24]
 800845e:	4013      	ands	r3, r2
 8008460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800846a:	2b00      	cmp	r3, #0
 800846c:	d003      	beq.n	8008476 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800846e:	69ba      	ldr	r2, [r7, #24]
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	4313      	orrs	r3, r2
 8008474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008476:	4a32      	ldr	r2, [pc, #200]	; (8008540 <HAL_GPIO_Init+0x334>)
 8008478:	69bb      	ldr	r3, [r7, #24]
 800847a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800847c:	4b30      	ldr	r3, [pc, #192]	; (8008540 <HAL_GPIO_Init+0x334>)
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	43db      	mvns	r3, r3
 8008486:	69ba      	ldr	r2, [r7, #24]
 8008488:	4013      	ands	r3, r2
 800848a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008494:	2b00      	cmp	r3, #0
 8008496:	d003      	beq.n	80084a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008498:	69ba      	ldr	r2, [r7, #24]
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	4313      	orrs	r3, r2
 800849e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80084a0:	4a27      	ldr	r2, [pc, #156]	; (8008540 <HAL_GPIO_Init+0x334>)
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80084a6:	4b26      	ldr	r3, [pc, #152]	; (8008540 <HAL_GPIO_Init+0x334>)
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	43db      	mvns	r3, r3
 80084b0:	69ba      	ldr	r2, [r7, #24]
 80084b2:	4013      	ands	r3, r2
 80084b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d003      	beq.n	80084ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80084c2:	69ba      	ldr	r2, [r7, #24]
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	4313      	orrs	r3, r2
 80084c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80084ca:	4a1d      	ldr	r2, [pc, #116]	; (8008540 <HAL_GPIO_Init+0x334>)
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80084d0:	4b1b      	ldr	r3, [pc, #108]	; (8008540 <HAL_GPIO_Init+0x334>)
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	43db      	mvns	r3, r3
 80084da:	69ba      	ldr	r2, [r7, #24]
 80084dc:	4013      	ands	r3, r2
 80084de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d003      	beq.n	80084f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80084ec:	69ba      	ldr	r2, [r7, #24]
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	4313      	orrs	r3, r2
 80084f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80084f4:	4a12      	ldr	r2, [pc, #72]	; (8008540 <HAL_GPIO_Init+0x334>)
 80084f6:	69bb      	ldr	r3, [r7, #24]
 80084f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	3301      	adds	r3, #1
 80084fe:	61fb      	str	r3, [r7, #28]
 8008500:	69fb      	ldr	r3, [r7, #28]
 8008502:	2b0f      	cmp	r3, #15
 8008504:	f67f ae90 	bls.w	8008228 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008508:	bf00      	nop
 800850a:	bf00      	nop
 800850c:	3724      	adds	r7, #36	; 0x24
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr
 8008516:	bf00      	nop
 8008518:	40023800 	.word	0x40023800
 800851c:	40013800 	.word	0x40013800
 8008520:	40020000 	.word	0x40020000
 8008524:	40020400 	.word	0x40020400
 8008528:	40020800 	.word	0x40020800
 800852c:	40020c00 	.word	0x40020c00
 8008530:	40021000 	.word	0x40021000
 8008534:	40021400 	.word	0x40021400
 8008538:	40021800 	.word	0x40021800
 800853c:	40021c00 	.word	0x40021c00
 8008540:	40013c00 	.word	0x40013c00

08008544 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008544:	b480      	push	{r7}
 8008546:	b085      	sub	sp, #20
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	460b      	mov	r3, r1
 800854e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	691a      	ldr	r2, [r3, #16]
 8008554:	887b      	ldrh	r3, [r7, #2]
 8008556:	4013      	ands	r3, r2
 8008558:	2b00      	cmp	r3, #0
 800855a:	d002      	beq.n	8008562 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800855c:	2301      	movs	r3, #1
 800855e:	73fb      	strb	r3, [r7, #15]
 8008560:	e001      	b.n	8008566 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008562:	2300      	movs	r3, #0
 8008564:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008566:	7bfb      	ldrb	r3, [r7, #15]
}
 8008568:	4618      	mov	r0, r3
 800856a:	3714      	adds	r7, #20
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr

08008574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008574:	b480      	push	{r7}
 8008576:	b083      	sub	sp, #12
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	460b      	mov	r3, r1
 800857e:	807b      	strh	r3, [r7, #2]
 8008580:	4613      	mov	r3, r2
 8008582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008584:	787b      	ldrb	r3, [r7, #1]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d003      	beq.n	8008592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800858a:	887a      	ldrh	r2, [r7, #2]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008590:	e003      	b.n	800859a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008592:	887b      	ldrh	r3, [r7, #2]
 8008594:	041a      	lsls	r2, r3, #16
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	619a      	str	r2, [r3, #24]
}
 800859a:	bf00      	nop
 800859c:	370c      	adds	r7, #12
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr
	...

080085a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	4603      	mov	r3, r0
 80085b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80085b2:	4b08      	ldr	r3, [pc, #32]	; (80085d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80085b4:	695a      	ldr	r2, [r3, #20]
 80085b6:	88fb      	ldrh	r3, [r7, #6]
 80085b8:	4013      	ands	r3, r2
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d006      	beq.n	80085cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80085be:	4a05      	ldr	r2, [pc, #20]	; (80085d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80085c0:	88fb      	ldrh	r3, [r7, #6]
 80085c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80085c4:	88fb      	ldrh	r3, [r7, #6]
 80085c6:	4618      	mov	r0, r3
 80085c8:	f000 f806 	bl	80085d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80085cc:	bf00      	nop
 80085ce:	3708      	adds	r7, #8
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	40013c00 	.word	0x40013c00

080085d8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	4603      	mov	r3, r0
 80085e0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80085e2:	bf00      	nop
 80085e4:	370c      	adds	r7, #12
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr
	...

080085f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b086      	sub	sp, #24
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d101      	bne.n	8008602 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80085fe:	2301      	movs	r3, #1
 8008600:	e264      	b.n	8008acc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f003 0301 	and.w	r3, r3, #1
 800860a:	2b00      	cmp	r3, #0
 800860c:	d075      	beq.n	80086fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800860e:	4ba3      	ldr	r3, [pc, #652]	; (800889c <HAL_RCC_OscConfig+0x2ac>)
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	f003 030c 	and.w	r3, r3, #12
 8008616:	2b04      	cmp	r3, #4
 8008618:	d00c      	beq.n	8008634 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800861a:	4ba0      	ldr	r3, [pc, #640]	; (800889c <HAL_RCC_OscConfig+0x2ac>)
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008622:	2b08      	cmp	r3, #8
 8008624:	d112      	bne.n	800864c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008626:	4b9d      	ldr	r3, [pc, #628]	; (800889c <HAL_RCC_OscConfig+0x2ac>)
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800862e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008632:	d10b      	bne.n	800864c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008634:	4b99      	ldr	r3, [pc, #612]	; (800889c <HAL_RCC_OscConfig+0x2ac>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800863c:	2b00      	cmp	r3, #0
 800863e:	d05b      	beq.n	80086f8 <HAL_RCC_OscConfig+0x108>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d157      	bne.n	80086f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008648:	2301      	movs	r3, #1
 800864a:	e23f      	b.n	8008acc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008654:	d106      	bne.n	8008664 <HAL_RCC_OscConfig+0x74>
 8008656:	4b91      	ldr	r3, [pc, #580]	; (800889c <HAL_RCC_OscConfig+0x2ac>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a90      	ldr	r2, [pc, #576]	; (800889c <HAL_RCC_OscConfig+0x2ac>)
 800865c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008660:	6013      	str	r3, [r2, #0]
 8008662:	e01d      	b.n	80086a0 <HAL_RCC_OscConfig+0xb0>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800866c:	d10c      	bne.n	8008688 <HAL_RCC_OscConfig+0x98>
 800866e:	4b8b      	ldr	r3, [pc, #556]	; (800889c <HAL_RCC_OscConfig+0x2ac>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a8a      	ldr	r2, [pc, #552]	; (800889c <HAL_RCC_OscConfig+0x2ac>)
 8008674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008678:	6013      	str	r3, [r2, #0]
 800867a:	4b88      	ldr	r3, [pc, #544]	; (800889c <HAL_RCC_OscConfig+0x2ac>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a87      	ldr	r2, [pc, #540]	; (800889c <HAL_RCC_OscConfig+0x2ac>)
 8008680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008684:	6013      	str	r3, [r2, #0]
 8008686:	e00b      	b.n	80086a0 <HAL_RCC_OscConfig+0xb0>
 8008688:	4b84      	ldr	r3, [pc, #528]	; (800889c <HAL_RCC_OscConfig+0x2ac>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a83      	ldr	r2, [pc, #524]	; (800889c <HAL_RCC_OscConfig+0x2ac>)
 800868e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008692:	6013      	str	r3, [r2, #0]
 8008694:	4b81      	ldr	r3, [pc, #516]	; (800889c <HAL_RCC_OscConfig+0x2ac>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a80      	ldr	r2, [pc, #512]	; (800889c <HAL_RCC_OscConfig+0x2ac>)
 800869a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800869e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d013      	beq.n	80086d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086a8:	f7ff f890 	bl	80077cc <HAL_GetTick>
 80086ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086ae:	e008      	b.n	80086c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80086b0:	f7ff f88c 	bl	80077cc <HAL_GetTick>
 80086b4:	4602      	mov	r2, r0
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	1ad3      	subs	r3, r2, r3
 80086ba:	2b64      	cmp	r3, #100	; 0x64
 80086bc:	d901      	bls.n	80086c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80086be:	2303      	movs	r3, #3
 80086c0:	e204      	b.n	8008acc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086c2:	4b76      	ldr	r3, [pc, #472]	; (800889c <HAL_RCC_OscConfig+0x2ac>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d0f0      	beq.n	80086b0 <HAL_RCC_OscConfig+0xc0>
 80086ce:	e014      	b.n	80086fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086d0:	f7ff f87c 	bl	80077cc <HAL_GetTick>
 80086d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80086d6:	e008      	b.n	80086ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80086d8:	f7ff f878 	bl	80077cc <HAL_GetTick>
 80086dc:	4602      	mov	r2, r0
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	1ad3      	subs	r3, r2, r3
 80086e2:	2b64      	cmp	r3, #100	; 0x64
 80086e4:	d901      	bls.n	80086ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80086e6:	2303      	movs	r3, #3
 80086e8:	e1f0      	b.n	8008acc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80086ea:	4b6c      	ldr	r3, [pc, #432]	; (800889c <HAL_RCC_OscConfig+0x2ac>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d1f0      	bne.n	80086d8 <HAL_RCC_OscConfig+0xe8>
 80086f6:	e000      	b.n	80086fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f003 0302 	and.w	r3, r3, #2
 8008702:	2b00      	cmp	r3, #0
 8008704:	d063      	beq.n	80087ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008706:	4b65      	ldr	r3, [pc, #404]	; (800889c <HAL_RCC_OscConfig+0x2ac>)
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	f003 030c 	and.w	r3, r3, #12
 800870e:	2b00      	cmp	r3, #0
 8008710:	d00b      	beq.n	800872a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008712:	4b62      	ldr	r3, [pc, #392]	; (800889c <HAL_RCC_OscConfig+0x2ac>)
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800871a:	2b08      	cmp	r3, #8
 800871c:	d11c      	bne.n	8008758 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800871e:	4b5f      	ldr	r3, [pc, #380]	; (800889c <HAL_RCC_OscConfig+0x2ac>)
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008726:	2b00      	cmp	r3, #0
 8008728:	d116      	bne.n	8008758 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800872a:	4b5c      	ldr	r3, [pc, #368]	; (800889c <HAL_RCC_OscConfig+0x2ac>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f003 0302 	and.w	r3, r3, #2
 8008732:	2b00      	cmp	r3, #0
 8008734:	d005      	beq.n	8008742 <HAL_RCC_OscConfig+0x152>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	2b01      	cmp	r3, #1
 800873c:	d001      	beq.n	8008742 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800873e:	2301      	movs	r3, #1
 8008740:	e1c4      	b.n	8008acc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008742:	4b56      	ldr	r3, [pc, #344]	; (800889c <HAL_RCC_OscConfig+0x2ac>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	691b      	ldr	r3, [r3, #16]
 800874e:	00db      	lsls	r3, r3, #3
 8008750:	4952      	ldr	r1, [pc, #328]	; (800889c <HAL_RCC_OscConfig+0x2ac>)
 8008752:	4313      	orrs	r3, r2
 8008754:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008756:	e03a      	b.n	80087ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d020      	beq.n	80087a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008760:	4b4f      	ldr	r3, [pc, #316]	; (80088a0 <HAL_RCC_OscConfig+0x2b0>)
 8008762:	2201      	movs	r2, #1
 8008764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008766:	f7ff f831 	bl	80077cc <HAL_GetTick>
 800876a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800876c:	e008      	b.n	8008780 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800876e:	f7ff f82d 	bl	80077cc <HAL_GetTick>
 8008772:	4602      	mov	r2, r0
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	1ad3      	subs	r3, r2, r3
 8008778:	2b02      	cmp	r3, #2
 800877a:	d901      	bls.n	8008780 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800877c:	2303      	movs	r3, #3
 800877e:	e1a5      	b.n	8008acc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008780:	4b46      	ldr	r3, [pc, #280]	; (800889c <HAL_RCC_OscConfig+0x2ac>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f003 0302 	and.w	r3, r3, #2
 8008788:	2b00      	cmp	r3, #0
 800878a:	d0f0      	beq.n	800876e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800878c:	4b43      	ldr	r3, [pc, #268]	; (800889c <HAL_RCC_OscConfig+0x2ac>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	691b      	ldr	r3, [r3, #16]
 8008798:	00db      	lsls	r3, r3, #3
 800879a:	4940      	ldr	r1, [pc, #256]	; (800889c <HAL_RCC_OscConfig+0x2ac>)
 800879c:	4313      	orrs	r3, r2
 800879e:	600b      	str	r3, [r1, #0]
 80087a0:	e015      	b.n	80087ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80087a2:	4b3f      	ldr	r3, [pc, #252]	; (80088a0 <HAL_RCC_OscConfig+0x2b0>)
 80087a4:	2200      	movs	r2, #0
 80087a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087a8:	f7ff f810 	bl	80077cc <HAL_GetTick>
 80087ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087ae:	e008      	b.n	80087c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80087b0:	f7ff f80c 	bl	80077cc <HAL_GetTick>
 80087b4:	4602      	mov	r2, r0
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	1ad3      	subs	r3, r2, r3
 80087ba:	2b02      	cmp	r3, #2
 80087bc:	d901      	bls.n	80087c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80087be:	2303      	movs	r3, #3
 80087c0:	e184      	b.n	8008acc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087c2:	4b36      	ldr	r3, [pc, #216]	; (800889c <HAL_RCC_OscConfig+0x2ac>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f003 0302 	and.w	r3, r3, #2
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d1f0      	bne.n	80087b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f003 0308 	and.w	r3, r3, #8
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d030      	beq.n	800883c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	695b      	ldr	r3, [r3, #20]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d016      	beq.n	8008810 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80087e2:	4b30      	ldr	r3, [pc, #192]	; (80088a4 <HAL_RCC_OscConfig+0x2b4>)
 80087e4:	2201      	movs	r2, #1
 80087e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087e8:	f7fe fff0 	bl	80077cc <HAL_GetTick>
 80087ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80087ee:	e008      	b.n	8008802 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80087f0:	f7fe ffec 	bl	80077cc <HAL_GetTick>
 80087f4:	4602      	mov	r2, r0
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	1ad3      	subs	r3, r2, r3
 80087fa:	2b02      	cmp	r3, #2
 80087fc:	d901      	bls.n	8008802 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80087fe:	2303      	movs	r3, #3
 8008800:	e164      	b.n	8008acc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008802:	4b26      	ldr	r3, [pc, #152]	; (800889c <HAL_RCC_OscConfig+0x2ac>)
 8008804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008806:	f003 0302 	and.w	r3, r3, #2
 800880a:	2b00      	cmp	r3, #0
 800880c:	d0f0      	beq.n	80087f0 <HAL_RCC_OscConfig+0x200>
 800880e:	e015      	b.n	800883c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008810:	4b24      	ldr	r3, [pc, #144]	; (80088a4 <HAL_RCC_OscConfig+0x2b4>)
 8008812:	2200      	movs	r2, #0
 8008814:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008816:	f7fe ffd9 	bl	80077cc <HAL_GetTick>
 800881a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800881c:	e008      	b.n	8008830 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800881e:	f7fe ffd5 	bl	80077cc <HAL_GetTick>
 8008822:	4602      	mov	r2, r0
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	1ad3      	subs	r3, r2, r3
 8008828:	2b02      	cmp	r3, #2
 800882a:	d901      	bls.n	8008830 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800882c:	2303      	movs	r3, #3
 800882e:	e14d      	b.n	8008acc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008830:	4b1a      	ldr	r3, [pc, #104]	; (800889c <HAL_RCC_OscConfig+0x2ac>)
 8008832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008834:	f003 0302 	and.w	r3, r3, #2
 8008838:	2b00      	cmp	r3, #0
 800883a:	d1f0      	bne.n	800881e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f003 0304 	and.w	r3, r3, #4
 8008844:	2b00      	cmp	r3, #0
 8008846:	f000 80a0 	beq.w	800898a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800884a:	2300      	movs	r3, #0
 800884c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800884e:	4b13      	ldr	r3, [pc, #76]	; (800889c <HAL_RCC_OscConfig+0x2ac>)
 8008850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008856:	2b00      	cmp	r3, #0
 8008858:	d10f      	bne.n	800887a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800885a:	2300      	movs	r3, #0
 800885c:	60bb      	str	r3, [r7, #8]
 800885e:	4b0f      	ldr	r3, [pc, #60]	; (800889c <HAL_RCC_OscConfig+0x2ac>)
 8008860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008862:	4a0e      	ldr	r2, [pc, #56]	; (800889c <HAL_RCC_OscConfig+0x2ac>)
 8008864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008868:	6413      	str	r3, [r2, #64]	; 0x40
 800886a:	4b0c      	ldr	r3, [pc, #48]	; (800889c <HAL_RCC_OscConfig+0x2ac>)
 800886c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800886e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008872:	60bb      	str	r3, [r7, #8]
 8008874:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008876:	2301      	movs	r3, #1
 8008878:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800887a:	4b0b      	ldr	r3, [pc, #44]	; (80088a8 <HAL_RCC_OscConfig+0x2b8>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008882:	2b00      	cmp	r3, #0
 8008884:	d121      	bne.n	80088ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008886:	4b08      	ldr	r3, [pc, #32]	; (80088a8 <HAL_RCC_OscConfig+0x2b8>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a07      	ldr	r2, [pc, #28]	; (80088a8 <HAL_RCC_OscConfig+0x2b8>)
 800888c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008890:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008892:	f7fe ff9b 	bl	80077cc <HAL_GetTick>
 8008896:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008898:	e011      	b.n	80088be <HAL_RCC_OscConfig+0x2ce>
 800889a:	bf00      	nop
 800889c:	40023800 	.word	0x40023800
 80088a0:	42470000 	.word	0x42470000
 80088a4:	42470e80 	.word	0x42470e80
 80088a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80088ac:	f7fe ff8e 	bl	80077cc <HAL_GetTick>
 80088b0:	4602      	mov	r2, r0
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	1ad3      	subs	r3, r2, r3
 80088b6:	2b02      	cmp	r3, #2
 80088b8:	d901      	bls.n	80088be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80088ba:	2303      	movs	r3, #3
 80088bc:	e106      	b.n	8008acc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088be:	4b85      	ldr	r3, [pc, #532]	; (8008ad4 <HAL_RCC_OscConfig+0x4e4>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d0f0      	beq.n	80088ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	d106      	bne.n	80088e0 <HAL_RCC_OscConfig+0x2f0>
 80088d2:	4b81      	ldr	r3, [pc, #516]	; (8008ad8 <HAL_RCC_OscConfig+0x4e8>)
 80088d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088d6:	4a80      	ldr	r2, [pc, #512]	; (8008ad8 <HAL_RCC_OscConfig+0x4e8>)
 80088d8:	f043 0301 	orr.w	r3, r3, #1
 80088dc:	6713      	str	r3, [r2, #112]	; 0x70
 80088de:	e01c      	b.n	800891a <HAL_RCC_OscConfig+0x32a>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	2b05      	cmp	r3, #5
 80088e6:	d10c      	bne.n	8008902 <HAL_RCC_OscConfig+0x312>
 80088e8:	4b7b      	ldr	r3, [pc, #492]	; (8008ad8 <HAL_RCC_OscConfig+0x4e8>)
 80088ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ec:	4a7a      	ldr	r2, [pc, #488]	; (8008ad8 <HAL_RCC_OscConfig+0x4e8>)
 80088ee:	f043 0304 	orr.w	r3, r3, #4
 80088f2:	6713      	str	r3, [r2, #112]	; 0x70
 80088f4:	4b78      	ldr	r3, [pc, #480]	; (8008ad8 <HAL_RCC_OscConfig+0x4e8>)
 80088f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088f8:	4a77      	ldr	r2, [pc, #476]	; (8008ad8 <HAL_RCC_OscConfig+0x4e8>)
 80088fa:	f043 0301 	orr.w	r3, r3, #1
 80088fe:	6713      	str	r3, [r2, #112]	; 0x70
 8008900:	e00b      	b.n	800891a <HAL_RCC_OscConfig+0x32a>
 8008902:	4b75      	ldr	r3, [pc, #468]	; (8008ad8 <HAL_RCC_OscConfig+0x4e8>)
 8008904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008906:	4a74      	ldr	r2, [pc, #464]	; (8008ad8 <HAL_RCC_OscConfig+0x4e8>)
 8008908:	f023 0301 	bic.w	r3, r3, #1
 800890c:	6713      	str	r3, [r2, #112]	; 0x70
 800890e:	4b72      	ldr	r3, [pc, #456]	; (8008ad8 <HAL_RCC_OscConfig+0x4e8>)
 8008910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008912:	4a71      	ldr	r2, [pc, #452]	; (8008ad8 <HAL_RCC_OscConfig+0x4e8>)
 8008914:	f023 0304 	bic.w	r3, r3, #4
 8008918:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d015      	beq.n	800894e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008922:	f7fe ff53 	bl	80077cc <HAL_GetTick>
 8008926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008928:	e00a      	b.n	8008940 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800892a:	f7fe ff4f 	bl	80077cc <HAL_GetTick>
 800892e:	4602      	mov	r2, r0
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	1ad3      	subs	r3, r2, r3
 8008934:	f241 3288 	movw	r2, #5000	; 0x1388
 8008938:	4293      	cmp	r3, r2
 800893a:	d901      	bls.n	8008940 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800893c:	2303      	movs	r3, #3
 800893e:	e0c5      	b.n	8008acc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008940:	4b65      	ldr	r3, [pc, #404]	; (8008ad8 <HAL_RCC_OscConfig+0x4e8>)
 8008942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008944:	f003 0302 	and.w	r3, r3, #2
 8008948:	2b00      	cmp	r3, #0
 800894a:	d0ee      	beq.n	800892a <HAL_RCC_OscConfig+0x33a>
 800894c:	e014      	b.n	8008978 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800894e:	f7fe ff3d 	bl	80077cc <HAL_GetTick>
 8008952:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008954:	e00a      	b.n	800896c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008956:	f7fe ff39 	bl	80077cc <HAL_GetTick>
 800895a:	4602      	mov	r2, r0
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	1ad3      	subs	r3, r2, r3
 8008960:	f241 3288 	movw	r2, #5000	; 0x1388
 8008964:	4293      	cmp	r3, r2
 8008966:	d901      	bls.n	800896c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008968:	2303      	movs	r3, #3
 800896a:	e0af      	b.n	8008acc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800896c:	4b5a      	ldr	r3, [pc, #360]	; (8008ad8 <HAL_RCC_OscConfig+0x4e8>)
 800896e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008970:	f003 0302 	and.w	r3, r3, #2
 8008974:	2b00      	cmp	r3, #0
 8008976:	d1ee      	bne.n	8008956 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008978:	7dfb      	ldrb	r3, [r7, #23]
 800897a:	2b01      	cmp	r3, #1
 800897c:	d105      	bne.n	800898a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800897e:	4b56      	ldr	r3, [pc, #344]	; (8008ad8 <HAL_RCC_OscConfig+0x4e8>)
 8008980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008982:	4a55      	ldr	r2, [pc, #340]	; (8008ad8 <HAL_RCC_OscConfig+0x4e8>)
 8008984:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008988:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	699b      	ldr	r3, [r3, #24]
 800898e:	2b00      	cmp	r3, #0
 8008990:	f000 809b 	beq.w	8008aca <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008994:	4b50      	ldr	r3, [pc, #320]	; (8008ad8 <HAL_RCC_OscConfig+0x4e8>)
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	f003 030c 	and.w	r3, r3, #12
 800899c:	2b08      	cmp	r3, #8
 800899e:	d05c      	beq.n	8008a5a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	699b      	ldr	r3, [r3, #24]
 80089a4:	2b02      	cmp	r3, #2
 80089a6:	d141      	bne.n	8008a2c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089a8:	4b4c      	ldr	r3, [pc, #304]	; (8008adc <HAL_RCC_OscConfig+0x4ec>)
 80089aa:	2200      	movs	r2, #0
 80089ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089ae:	f7fe ff0d 	bl	80077cc <HAL_GetTick>
 80089b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089b4:	e008      	b.n	80089c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089b6:	f7fe ff09 	bl	80077cc <HAL_GetTick>
 80089ba:	4602      	mov	r2, r0
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	1ad3      	subs	r3, r2, r3
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	d901      	bls.n	80089c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80089c4:	2303      	movs	r3, #3
 80089c6:	e081      	b.n	8008acc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089c8:	4b43      	ldr	r3, [pc, #268]	; (8008ad8 <HAL_RCC_OscConfig+0x4e8>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d1f0      	bne.n	80089b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	69da      	ldr	r2, [r3, #28]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6a1b      	ldr	r3, [r3, #32]
 80089dc:	431a      	orrs	r2, r3
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e2:	019b      	lsls	r3, r3, #6
 80089e4:	431a      	orrs	r2, r3
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ea:	085b      	lsrs	r3, r3, #1
 80089ec:	3b01      	subs	r3, #1
 80089ee:	041b      	lsls	r3, r3, #16
 80089f0:	431a      	orrs	r2, r3
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f6:	061b      	lsls	r3, r3, #24
 80089f8:	4937      	ldr	r1, [pc, #220]	; (8008ad8 <HAL_RCC_OscConfig+0x4e8>)
 80089fa:	4313      	orrs	r3, r2
 80089fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80089fe:	4b37      	ldr	r3, [pc, #220]	; (8008adc <HAL_RCC_OscConfig+0x4ec>)
 8008a00:	2201      	movs	r2, #1
 8008a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a04:	f7fe fee2 	bl	80077cc <HAL_GetTick>
 8008a08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a0a:	e008      	b.n	8008a1e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a0c:	f7fe fede 	bl	80077cc <HAL_GetTick>
 8008a10:	4602      	mov	r2, r0
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	1ad3      	subs	r3, r2, r3
 8008a16:	2b02      	cmp	r3, #2
 8008a18:	d901      	bls.n	8008a1e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008a1a:	2303      	movs	r3, #3
 8008a1c:	e056      	b.n	8008acc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a1e:	4b2e      	ldr	r3, [pc, #184]	; (8008ad8 <HAL_RCC_OscConfig+0x4e8>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d0f0      	beq.n	8008a0c <HAL_RCC_OscConfig+0x41c>
 8008a2a:	e04e      	b.n	8008aca <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a2c:	4b2b      	ldr	r3, [pc, #172]	; (8008adc <HAL_RCC_OscConfig+0x4ec>)
 8008a2e:	2200      	movs	r2, #0
 8008a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a32:	f7fe fecb 	bl	80077cc <HAL_GetTick>
 8008a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a38:	e008      	b.n	8008a4c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a3a:	f7fe fec7 	bl	80077cc <HAL_GetTick>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	1ad3      	subs	r3, r2, r3
 8008a44:	2b02      	cmp	r3, #2
 8008a46:	d901      	bls.n	8008a4c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008a48:	2303      	movs	r3, #3
 8008a4a:	e03f      	b.n	8008acc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a4c:	4b22      	ldr	r3, [pc, #136]	; (8008ad8 <HAL_RCC_OscConfig+0x4e8>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d1f0      	bne.n	8008a3a <HAL_RCC_OscConfig+0x44a>
 8008a58:	e037      	b.n	8008aca <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	699b      	ldr	r3, [r3, #24]
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d101      	bne.n	8008a66 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	e032      	b.n	8008acc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008a66:	4b1c      	ldr	r3, [pc, #112]	; (8008ad8 <HAL_RCC_OscConfig+0x4e8>)
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	699b      	ldr	r3, [r3, #24]
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d028      	beq.n	8008ac6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d121      	bne.n	8008ac6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d11a      	bne.n	8008ac6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008a90:	68fa      	ldr	r2, [r7, #12]
 8008a92:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008a96:	4013      	ands	r3, r2
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008a9c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d111      	bne.n	8008ac6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aac:	085b      	lsrs	r3, r3, #1
 8008aae:	3b01      	subs	r3, #1
 8008ab0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d107      	bne.n	8008ac6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d001      	beq.n	8008aca <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e000      	b.n	8008acc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8008aca:	2300      	movs	r3, #0
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3718      	adds	r7, #24
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}
 8008ad4:	40007000 	.word	0x40007000
 8008ad8:	40023800 	.word	0x40023800
 8008adc:	42470060 	.word	0x42470060

08008ae0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d101      	bne.n	8008af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	e0cc      	b.n	8008c8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008af4:	4b68      	ldr	r3, [pc, #416]	; (8008c98 <HAL_RCC_ClockConfig+0x1b8>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f003 0307 	and.w	r3, r3, #7
 8008afc:	683a      	ldr	r2, [r7, #0]
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d90c      	bls.n	8008b1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b02:	4b65      	ldr	r3, [pc, #404]	; (8008c98 <HAL_RCC_ClockConfig+0x1b8>)
 8008b04:	683a      	ldr	r2, [r7, #0]
 8008b06:	b2d2      	uxtb	r2, r2
 8008b08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b0a:	4b63      	ldr	r3, [pc, #396]	; (8008c98 <HAL_RCC_ClockConfig+0x1b8>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f003 0307 	and.w	r3, r3, #7
 8008b12:	683a      	ldr	r2, [r7, #0]
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d001      	beq.n	8008b1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e0b8      	b.n	8008c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f003 0302 	and.w	r3, r3, #2
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d020      	beq.n	8008b6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f003 0304 	and.w	r3, r3, #4
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d005      	beq.n	8008b40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008b34:	4b59      	ldr	r3, [pc, #356]	; (8008c9c <HAL_RCC_ClockConfig+0x1bc>)
 8008b36:	689b      	ldr	r3, [r3, #8]
 8008b38:	4a58      	ldr	r2, [pc, #352]	; (8008c9c <HAL_RCC_ClockConfig+0x1bc>)
 8008b3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008b3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f003 0308 	and.w	r3, r3, #8
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d005      	beq.n	8008b58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008b4c:	4b53      	ldr	r3, [pc, #332]	; (8008c9c <HAL_RCC_ClockConfig+0x1bc>)
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	4a52      	ldr	r2, [pc, #328]	; (8008c9c <HAL_RCC_ClockConfig+0x1bc>)
 8008b52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008b56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b58:	4b50      	ldr	r3, [pc, #320]	; (8008c9c <HAL_RCC_ClockConfig+0x1bc>)
 8008b5a:	689b      	ldr	r3, [r3, #8]
 8008b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	494d      	ldr	r1, [pc, #308]	; (8008c9c <HAL_RCC_ClockConfig+0x1bc>)
 8008b66:	4313      	orrs	r3, r2
 8008b68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f003 0301 	and.w	r3, r3, #1
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d044      	beq.n	8008c00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d107      	bne.n	8008b8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b7e:	4b47      	ldr	r3, [pc, #284]	; (8008c9c <HAL_RCC_ClockConfig+0x1bc>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d119      	bne.n	8008bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	e07f      	b.n	8008c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	2b02      	cmp	r3, #2
 8008b94:	d003      	beq.n	8008b9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008b9a:	2b03      	cmp	r3, #3
 8008b9c:	d107      	bne.n	8008bae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b9e:	4b3f      	ldr	r3, [pc, #252]	; (8008c9c <HAL_RCC_ClockConfig+0x1bc>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d109      	bne.n	8008bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008baa:	2301      	movs	r3, #1
 8008bac:	e06f      	b.n	8008c8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008bae:	4b3b      	ldr	r3, [pc, #236]	; (8008c9c <HAL_RCC_ClockConfig+0x1bc>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f003 0302 	and.w	r3, r3, #2
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d101      	bne.n	8008bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	e067      	b.n	8008c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008bbe:	4b37      	ldr	r3, [pc, #220]	; (8008c9c <HAL_RCC_ClockConfig+0x1bc>)
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	f023 0203 	bic.w	r2, r3, #3
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	4934      	ldr	r1, [pc, #208]	; (8008c9c <HAL_RCC_ClockConfig+0x1bc>)
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008bd0:	f7fe fdfc 	bl	80077cc <HAL_GetTick>
 8008bd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bd6:	e00a      	b.n	8008bee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008bd8:	f7fe fdf8 	bl	80077cc <HAL_GetTick>
 8008bdc:	4602      	mov	r2, r0
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	1ad3      	subs	r3, r2, r3
 8008be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d901      	bls.n	8008bee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008bea:	2303      	movs	r3, #3
 8008bec:	e04f      	b.n	8008c8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bee:	4b2b      	ldr	r3, [pc, #172]	; (8008c9c <HAL_RCC_ClockConfig+0x1bc>)
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	f003 020c 	and.w	r2, r3, #12
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d1eb      	bne.n	8008bd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008c00:	4b25      	ldr	r3, [pc, #148]	; (8008c98 <HAL_RCC_ClockConfig+0x1b8>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f003 0307 	and.w	r3, r3, #7
 8008c08:	683a      	ldr	r2, [r7, #0]
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d20c      	bcs.n	8008c28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c0e:	4b22      	ldr	r3, [pc, #136]	; (8008c98 <HAL_RCC_ClockConfig+0x1b8>)
 8008c10:	683a      	ldr	r2, [r7, #0]
 8008c12:	b2d2      	uxtb	r2, r2
 8008c14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c16:	4b20      	ldr	r3, [pc, #128]	; (8008c98 <HAL_RCC_ClockConfig+0x1b8>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f003 0307 	and.w	r3, r3, #7
 8008c1e:	683a      	ldr	r2, [r7, #0]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d001      	beq.n	8008c28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	e032      	b.n	8008c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f003 0304 	and.w	r3, r3, #4
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d008      	beq.n	8008c46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008c34:	4b19      	ldr	r3, [pc, #100]	; (8008c9c <HAL_RCC_ClockConfig+0x1bc>)
 8008c36:	689b      	ldr	r3, [r3, #8]
 8008c38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	68db      	ldr	r3, [r3, #12]
 8008c40:	4916      	ldr	r1, [pc, #88]	; (8008c9c <HAL_RCC_ClockConfig+0x1bc>)
 8008c42:	4313      	orrs	r3, r2
 8008c44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f003 0308 	and.w	r3, r3, #8
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d009      	beq.n	8008c66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008c52:	4b12      	ldr	r3, [pc, #72]	; (8008c9c <HAL_RCC_ClockConfig+0x1bc>)
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	691b      	ldr	r3, [r3, #16]
 8008c5e:	00db      	lsls	r3, r3, #3
 8008c60:	490e      	ldr	r1, [pc, #56]	; (8008c9c <HAL_RCC_ClockConfig+0x1bc>)
 8008c62:	4313      	orrs	r3, r2
 8008c64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008c66:	f000 f821 	bl	8008cac <HAL_RCC_GetSysClockFreq>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	4b0b      	ldr	r3, [pc, #44]	; (8008c9c <HAL_RCC_ClockConfig+0x1bc>)
 8008c6e:	689b      	ldr	r3, [r3, #8]
 8008c70:	091b      	lsrs	r3, r3, #4
 8008c72:	f003 030f 	and.w	r3, r3, #15
 8008c76:	490a      	ldr	r1, [pc, #40]	; (8008ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8008c78:	5ccb      	ldrb	r3, [r1, r3]
 8008c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8008c7e:	4a09      	ldr	r2, [pc, #36]	; (8008ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8008c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008c82:	4b09      	ldr	r3, [pc, #36]	; (8008ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4618      	mov	r0, r3
 8008c88:	f7fe fd5c 	bl	8007744 <HAL_InitTick>

  return HAL_OK;
 8008c8c:	2300      	movs	r3, #0
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3710      	adds	r7, #16
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	40023c00 	.word	0x40023c00
 8008c9c:	40023800 	.word	0x40023800
 8008ca0:	08010aa4 	.word	0x08010aa4
 8008ca4:	20000010 	.word	0x20000010
 8008ca8:	20000014 	.word	0x20000014

08008cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008cac:	b5b0      	push	{r4, r5, r7, lr}
 8008cae:	b084      	sub	sp, #16
 8008cb0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008cb2:	2100      	movs	r1, #0
 8008cb4:	6079      	str	r1, [r7, #4]
 8008cb6:	2100      	movs	r1, #0
 8008cb8:	60f9      	str	r1, [r7, #12]
 8008cba:	2100      	movs	r1, #0
 8008cbc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008cbe:	2100      	movs	r1, #0
 8008cc0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008cc2:	4952      	ldr	r1, [pc, #328]	; (8008e0c <HAL_RCC_GetSysClockFreq+0x160>)
 8008cc4:	6889      	ldr	r1, [r1, #8]
 8008cc6:	f001 010c 	and.w	r1, r1, #12
 8008cca:	2908      	cmp	r1, #8
 8008ccc:	d00d      	beq.n	8008cea <HAL_RCC_GetSysClockFreq+0x3e>
 8008cce:	2908      	cmp	r1, #8
 8008cd0:	f200 8094 	bhi.w	8008dfc <HAL_RCC_GetSysClockFreq+0x150>
 8008cd4:	2900      	cmp	r1, #0
 8008cd6:	d002      	beq.n	8008cde <HAL_RCC_GetSysClockFreq+0x32>
 8008cd8:	2904      	cmp	r1, #4
 8008cda:	d003      	beq.n	8008ce4 <HAL_RCC_GetSysClockFreq+0x38>
 8008cdc:	e08e      	b.n	8008dfc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008cde:	4b4c      	ldr	r3, [pc, #304]	; (8008e10 <HAL_RCC_GetSysClockFreq+0x164>)
 8008ce0:	60bb      	str	r3, [r7, #8]
       break;
 8008ce2:	e08e      	b.n	8008e02 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008ce4:	4b4b      	ldr	r3, [pc, #300]	; (8008e14 <HAL_RCC_GetSysClockFreq+0x168>)
 8008ce6:	60bb      	str	r3, [r7, #8]
      break;
 8008ce8:	e08b      	b.n	8008e02 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008cea:	4948      	ldr	r1, [pc, #288]	; (8008e0c <HAL_RCC_GetSysClockFreq+0x160>)
 8008cec:	6849      	ldr	r1, [r1, #4]
 8008cee:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8008cf2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008cf4:	4945      	ldr	r1, [pc, #276]	; (8008e0c <HAL_RCC_GetSysClockFreq+0x160>)
 8008cf6:	6849      	ldr	r1, [r1, #4]
 8008cf8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8008cfc:	2900      	cmp	r1, #0
 8008cfe:	d024      	beq.n	8008d4a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d00:	4942      	ldr	r1, [pc, #264]	; (8008e0c <HAL_RCC_GetSysClockFreq+0x160>)
 8008d02:	6849      	ldr	r1, [r1, #4]
 8008d04:	0989      	lsrs	r1, r1, #6
 8008d06:	4608      	mov	r0, r1
 8008d08:	f04f 0100 	mov.w	r1, #0
 8008d0c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8008d10:	f04f 0500 	mov.w	r5, #0
 8008d14:	ea00 0204 	and.w	r2, r0, r4
 8008d18:	ea01 0305 	and.w	r3, r1, r5
 8008d1c:	493d      	ldr	r1, [pc, #244]	; (8008e14 <HAL_RCC_GetSysClockFreq+0x168>)
 8008d1e:	fb01 f003 	mul.w	r0, r1, r3
 8008d22:	2100      	movs	r1, #0
 8008d24:	fb01 f102 	mul.w	r1, r1, r2
 8008d28:	1844      	adds	r4, r0, r1
 8008d2a:	493a      	ldr	r1, [pc, #232]	; (8008e14 <HAL_RCC_GetSysClockFreq+0x168>)
 8008d2c:	fba2 0101 	umull	r0, r1, r2, r1
 8008d30:	1863      	adds	r3, r4, r1
 8008d32:	4619      	mov	r1, r3
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	461a      	mov	r2, r3
 8008d38:	f04f 0300 	mov.w	r3, #0
 8008d3c:	f7f7 ffa4 	bl	8000c88 <__aeabi_uldivmod>
 8008d40:	4602      	mov	r2, r0
 8008d42:	460b      	mov	r3, r1
 8008d44:	4613      	mov	r3, r2
 8008d46:	60fb      	str	r3, [r7, #12]
 8008d48:	e04a      	b.n	8008de0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d4a:	4b30      	ldr	r3, [pc, #192]	; (8008e0c <HAL_RCC_GetSysClockFreq+0x160>)
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	099b      	lsrs	r3, r3, #6
 8008d50:	461a      	mov	r2, r3
 8008d52:	f04f 0300 	mov.w	r3, #0
 8008d56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008d5a:	f04f 0100 	mov.w	r1, #0
 8008d5e:	ea02 0400 	and.w	r4, r2, r0
 8008d62:	ea03 0501 	and.w	r5, r3, r1
 8008d66:	4620      	mov	r0, r4
 8008d68:	4629      	mov	r1, r5
 8008d6a:	f04f 0200 	mov.w	r2, #0
 8008d6e:	f04f 0300 	mov.w	r3, #0
 8008d72:	014b      	lsls	r3, r1, #5
 8008d74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008d78:	0142      	lsls	r2, r0, #5
 8008d7a:	4610      	mov	r0, r2
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	1b00      	subs	r0, r0, r4
 8008d80:	eb61 0105 	sbc.w	r1, r1, r5
 8008d84:	f04f 0200 	mov.w	r2, #0
 8008d88:	f04f 0300 	mov.w	r3, #0
 8008d8c:	018b      	lsls	r3, r1, #6
 8008d8e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008d92:	0182      	lsls	r2, r0, #6
 8008d94:	1a12      	subs	r2, r2, r0
 8008d96:	eb63 0301 	sbc.w	r3, r3, r1
 8008d9a:	f04f 0000 	mov.w	r0, #0
 8008d9e:	f04f 0100 	mov.w	r1, #0
 8008da2:	00d9      	lsls	r1, r3, #3
 8008da4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008da8:	00d0      	lsls	r0, r2, #3
 8008daa:	4602      	mov	r2, r0
 8008dac:	460b      	mov	r3, r1
 8008dae:	1912      	adds	r2, r2, r4
 8008db0:	eb45 0303 	adc.w	r3, r5, r3
 8008db4:	f04f 0000 	mov.w	r0, #0
 8008db8:	f04f 0100 	mov.w	r1, #0
 8008dbc:	0299      	lsls	r1, r3, #10
 8008dbe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008dc2:	0290      	lsls	r0, r2, #10
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	4610      	mov	r0, r2
 8008dca:	4619      	mov	r1, r3
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	461a      	mov	r2, r3
 8008dd0:	f04f 0300 	mov.w	r3, #0
 8008dd4:	f7f7 ff58 	bl	8000c88 <__aeabi_uldivmod>
 8008dd8:	4602      	mov	r2, r0
 8008dda:	460b      	mov	r3, r1
 8008ddc:	4613      	mov	r3, r2
 8008dde:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008de0:	4b0a      	ldr	r3, [pc, #40]	; (8008e0c <HAL_RCC_GetSysClockFreq+0x160>)
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	0c1b      	lsrs	r3, r3, #16
 8008de6:	f003 0303 	and.w	r3, r3, #3
 8008dea:	3301      	adds	r3, #1
 8008dec:	005b      	lsls	r3, r3, #1
 8008dee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008df0:	68fa      	ldr	r2, [r7, #12]
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008df8:	60bb      	str	r3, [r7, #8]
      break;
 8008dfa:	e002      	b.n	8008e02 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008dfc:	4b04      	ldr	r3, [pc, #16]	; (8008e10 <HAL_RCC_GetSysClockFreq+0x164>)
 8008dfe:	60bb      	str	r3, [r7, #8]
      break;
 8008e00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008e02:	68bb      	ldr	r3, [r7, #8]
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3710      	adds	r7, #16
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bdb0      	pop	{r4, r5, r7, pc}
 8008e0c:	40023800 	.word	0x40023800
 8008e10:	00f42400 	.word	0x00f42400
 8008e14:	017d7840 	.word	0x017d7840

08008e18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008e1c:	4b03      	ldr	r3, [pc, #12]	; (8008e2c <HAL_RCC_GetHCLKFreq+0x14>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop
 8008e2c:	20000010 	.word	0x20000010

08008e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008e34:	f7ff fff0 	bl	8008e18 <HAL_RCC_GetHCLKFreq>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	4b05      	ldr	r3, [pc, #20]	; (8008e50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	0a9b      	lsrs	r3, r3, #10
 8008e40:	f003 0307 	and.w	r3, r3, #7
 8008e44:	4903      	ldr	r1, [pc, #12]	; (8008e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008e46:	5ccb      	ldrb	r3, [r1, r3]
 8008e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	40023800 	.word	0x40023800
 8008e54:	08010ab4 	.word	0x08010ab4

08008e58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008e5c:	f7ff ffdc 	bl	8008e18 <HAL_RCC_GetHCLKFreq>
 8008e60:	4602      	mov	r2, r0
 8008e62:	4b05      	ldr	r3, [pc, #20]	; (8008e78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008e64:	689b      	ldr	r3, [r3, #8]
 8008e66:	0b5b      	lsrs	r3, r3, #13
 8008e68:	f003 0307 	and.w	r3, r3, #7
 8008e6c:	4903      	ldr	r1, [pc, #12]	; (8008e7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008e6e:	5ccb      	ldrb	r3, [r1, r3]
 8008e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	40023800 	.word	0x40023800
 8008e7c:	08010ab4 	.word	0x08010ab4

08008e80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d101      	bne.n	8008e92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	e041      	b.n	8008f16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e98:	b2db      	uxtb	r3, r3
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d106      	bne.n	8008eac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f7fd fd08 	bl	80068bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2202      	movs	r2, #2
 8008eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	3304      	adds	r3, #4
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	4610      	mov	r0, r2
 8008ec0:	f000 fef6 	bl	8009cb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2201      	movs	r2, #1
 8008ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2201      	movs	r2, #1
 8008ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2201      	movs	r2, #1
 8008ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2201      	movs	r2, #1
 8008f00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2201      	movs	r2, #1
 8008f08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2201      	movs	r2, #1
 8008f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f14:	2300      	movs	r3, #0
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3708      	adds	r7, #8
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
	...

08008f20 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b085      	sub	sp, #20
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d001      	beq.n	8008f38 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008f34:	2301      	movs	r3, #1
 8008f36:	e046      	b.n	8008fc6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2202      	movs	r2, #2
 8008f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a23      	ldr	r2, [pc, #140]	; (8008fd4 <HAL_TIM_Base_Start+0xb4>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d022      	beq.n	8008f90 <HAL_TIM_Base_Start+0x70>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f52:	d01d      	beq.n	8008f90 <HAL_TIM_Base_Start+0x70>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a1f      	ldr	r2, [pc, #124]	; (8008fd8 <HAL_TIM_Base_Start+0xb8>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d018      	beq.n	8008f90 <HAL_TIM_Base_Start+0x70>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a1e      	ldr	r2, [pc, #120]	; (8008fdc <HAL_TIM_Base_Start+0xbc>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d013      	beq.n	8008f90 <HAL_TIM_Base_Start+0x70>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a1c      	ldr	r2, [pc, #112]	; (8008fe0 <HAL_TIM_Base_Start+0xc0>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d00e      	beq.n	8008f90 <HAL_TIM_Base_Start+0x70>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a1b      	ldr	r2, [pc, #108]	; (8008fe4 <HAL_TIM_Base_Start+0xc4>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d009      	beq.n	8008f90 <HAL_TIM_Base_Start+0x70>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a19      	ldr	r2, [pc, #100]	; (8008fe8 <HAL_TIM_Base_Start+0xc8>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d004      	beq.n	8008f90 <HAL_TIM_Base_Start+0x70>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a18      	ldr	r2, [pc, #96]	; (8008fec <HAL_TIM_Base_Start+0xcc>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d111      	bne.n	8008fb4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	f003 0307 	and.w	r3, r3, #7
 8008f9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2b06      	cmp	r3, #6
 8008fa0:	d010      	beq.n	8008fc4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f042 0201 	orr.w	r2, r2, #1
 8008fb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fb2:	e007      	b.n	8008fc4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f042 0201 	orr.w	r2, r2, #1
 8008fc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3714      	adds	r7, #20
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr
 8008fd2:	bf00      	nop
 8008fd4:	40010000 	.word	0x40010000
 8008fd8:	40000400 	.word	0x40000400
 8008fdc:	40000800 	.word	0x40000800
 8008fe0:	40000c00 	.word	0x40000c00
 8008fe4:	40010400 	.word	0x40010400
 8008fe8:	40014000 	.word	0x40014000
 8008fec:	40001800 	.word	0x40001800

08008ff0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b085      	sub	sp, #20
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	2b01      	cmp	r3, #1
 8009002:	d001      	beq.n	8009008 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	e04e      	b.n	80090a6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2202      	movs	r2, #2
 800900c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	68da      	ldr	r2, [r3, #12]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f042 0201 	orr.w	r2, r2, #1
 800901e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a23      	ldr	r2, [pc, #140]	; (80090b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d022      	beq.n	8009070 <HAL_TIM_Base_Start_IT+0x80>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009032:	d01d      	beq.n	8009070 <HAL_TIM_Base_Start_IT+0x80>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a1f      	ldr	r2, [pc, #124]	; (80090b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d018      	beq.n	8009070 <HAL_TIM_Base_Start_IT+0x80>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4a1e      	ldr	r2, [pc, #120]	; (80090bc <HAL_TIM_Base_Start_IT+0xcc>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d013      	beq.n	8009070 <HAL_TIM_Base_Start_IT+0x80>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a1c      	ldr	r2, [pc, #112]	; (80090c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d00e      	beq.n	8009070 <HAL_TIM_Base_Start_IT+0x80>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a1b      	ldr	r2, [pc, #108]	; (80090c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d009      	beq.n	8009070 <HAL_TIM_Base_Start_IT+0x80>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a19      	ldr	r2, [pc, #100]	; (80090c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d004      	beq.n	8009070 <HAL_TIM_Base_Start_IT+0x80>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a18      	ldr	r2, [pc, #96]	; (80090cc <HAL_TIM_Base_Start_IT+0xdc>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d111      	bne.n	8009094 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	f003 0307 	and.w	r3, r3, #7
 800907a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2b06      	cmp	r3, #6
 8009080:	d010      	beq.n	80090a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f042 0201 	orr.w	r2, r2, #1
 8009090:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009092:	e007      	b.n	80090a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f042 0201 	orr.w	r2, r2, #1
 80090a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80090a4:	2300      	movs	r3, #0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3714      	adds	r7, #20
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr
 80090b2:	bf00      	nop
 80090b4:	40010000 	.word	0x40010000
 80090b8:	40000400 	.word	0x40000400
 80090bc:	40000800 	.word	0x40000800
 80090c0:	40000c00 	.word	0x40000c00
 80090c4:	40010400 	.word	0x40010400
 80090c8:	40014000 	.word	0x40014000
 80090cc:	40001800 	.word	0x40001800

080090d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d101      	bne.n	80090e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80090de:	2301      	movs	r3, #1
 80090e0:	e041      	b.n	8009166 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090e8:	b2db      	uxtb	r3, r3
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d106      	bne.n	80090fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2200      	movs	r2, #0
 80090f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 f839 	bl	800916e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2202      	movs	r2, #2
 8009100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	3304      	adds	r3, #4
 800910c:	4619      	mov	r1, r3
 800910e:	4610      	mov	r0, r2
 8009110:	f000 fdce 	bl	8009cb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2201      	movs	r2, #1
 8009118:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2201      	movs	r2, #1
 8009120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2201      	movs	r2, #1
 8009128:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2201      	movs	r2, #1
 8009130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2201      	movs	r2, #1
 8009138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2201      	movs	r2, #1
 8009140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2201      	movs	r2, #1
 8009148:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2201      	movs	r2, #1
 8009150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2201      	movs	r2, #1
 8009158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009164:	2300      	movs	r3, #0
}
 8009166:	4618      	mov	r0, r3
 8009168:	3708      	adds	r7, #8
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}

0800916e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800916e:	b480      	push	{r7}
 8009170:	b083      	sub	sp, #12
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009176:	bf00      	nop
 8009178:	370c      	adds	r7, #12
 800917a:	46bd      	mov	sp, r7
 800917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009180:	4770      	bx	lr
	...

08009184 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d109      	bne.n	80091a8 <HAL_TIM_PWM_Start+0x24>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800919a:	b2db      	uxtb	r3, r3
 800919c:	2b01      	cmp	r3, #1
 800919e:	bf14      	ite	ne
 80091a0:	2301      	movne	r3, #1
 80091a2:	2300      	moveq	r3, #0
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	e022      	b.n	80091ee <HAL_TIM_PWM_Start+0x6a>
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	2b04      	cmp	r3, #4
 80091ac:	d109      	bne.n	80091c2 <HAL_TIM_PWM_Start+0x3e>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	bf14      	ite	ne
 80091ba:	2301      	movne	r3, #1
 80091bc:	2300      	moveq	r3, #0
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	e015      	b.n	80091ee <HAL_TIM_PWM_Start+0x6a>
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	2b08      	cmp	r3, #8
 80091c6:	d109      	bne.n	80091dc <HAL_TIM_PWM_Start+0x58>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	bf14      	ite	ne
 80091d4:	2301      	movne	r3, #1
 80091d6:	2300      	moveq	r3, #0
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	e008      	b.n	80091ee <HAL_TIM_PWM_Start+0x6a>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	bf14      	ite	ne
 80091e8:	2301      	movne	r3, #1
 80091ea:	2300      	moveq	r3, #0
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d001      	beq.n	80091f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80091f2:	2301      	movs	r3, #1
 80091f4:	e07c      	b.n	80092f0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d104      	bne.n	8009206 <HAL_TIM_PWM_Start+0x82>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2202      	movs	r2, #2
 8009200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009204:	e013      	b.n	800922e <HAL_TIM_PWM_Start+0xaa>
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	2b04      	cmp	r3, #4
 800920a:	d104      	bne.n	8009216 <HAL_TIM_PWM_Start+0x92>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2202      	movs	r2, #2
 8009210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009214:	e00b      	b.n	800922e <HAL_TIM_PWM_Start+0xaa>
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	2b08      	cmp	r3, #8
 800921a:	d104      	bne.n	8009226 <HAL_TIM_PWM_Start+0xa2>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2202      	movs	r2, #2
 8009220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009224:	e003      	b.n	800922e <HAL_TIM_PWM_Start+0xaa>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2202      	movs	r2, #2
 800922a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2201      	movs	r2, #1
 8009234:	6839      	ldr	r1, [r7, #0]
 8009236:	4618      	mov	r0, r3
 8009238:	f001 f94e 	bl	800a4d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a2d      	ldr	r2, [pc, #180]	; (80092f8 <HAL_TIM_PWM_Start+0x174>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d004      	beq.n	8009250 <HAL_TIM_PWM_Start+0xcc>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a2c      	ldr	r2, [pc, #176]	; (80092fc <HAL_TIM_PWM_Start+0x178>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d101      	bne.n	8009254 <HAL_TIM_PWM_Start+0xd0>
 8009250:	2301      	movs	r3, #1
 8009252:	e000      	b.n	8009256 <HAL_TIM_PWM_Start+0xd2>
 8009254:	2300      	movs	r3, #0
 8009256:	2b00      	cmp	r3, #0
 8009258:	d007      	beq.n	800926a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009268:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4a22      	ldr	r2, [pc, #136]	; (80092f8 <HAL_TIM_PWM_Start+0x174>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d022      	beq.n	80092ba <HAL_TIM_PWM_Start+0x136>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800927c:	d01d      	beq.n	80092ba <HAL_TIM_PWM_Start+0x136>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4a1f      	ldr	r2, [pc, #124]	; (8009300 <HAL_TIM_PWM_Start+0x17c>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d018      	beq.n	80092ba <HAL_TIM_PWM_Start+0x136>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a1d      	ldr	r2, [pc, #116]	; (8009304 <HAL_TIM_PWM_Start+0x180>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d013      	beq.n	80092ba <HAL_TIM_PWM_Start+0x136>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4a1c      	ldr	r2, [pc, #112]	; (8009308 <HAL_TIM_PWM_Start+0x184>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d00e      	beq.n	80092ba <HAL_TIM_PWM_Start+0x136>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a16      	ldr	r2, [pc, #88]	; (80092fc <HAL_TIM_PWM_Start+0x178>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d009      	beq.n	80092ba <HAL_TIM_PWM_Start+0x136>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a18      	ldr	r2, [pc, #96]	; (800930c <HAL_TIM_PWM_Start+0x188>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d004      	beq.n	80092ba <HAL_TIM_PWM_Start+0x136>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a16      	ldr	r2, [pc, #88]	; (8009310 <HAL_TIM_PWM_Start+0x18c>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d111      	bne.n	80092de <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	f003 0307 	and.w	r3, r3, #7
 80092c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2b06      	cmp	r3, #6
 80092ca:	d010      	beq.n	80092ee <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	681a      	ldr	r2, [r3, #0]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f042 0201 	orr.w	r2, r2, #1
 80092da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092dc:	e007      	b.n	80092ee <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f042 0201 	orr.w	r2, r2, #1
 80092ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80092ee:	2300      	movs	r3, #0
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3710      	adds	r7, #16
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}
 80092f8:	40010000 	.word	0x40010000
 80092fc:	40010400 	.word	0x40010400
 8009300:	40000400 	.word	0x40000400
 8009304:	40000800 	.word	0x40000800
 8009308:	40000c00 	.word	0x40000c00
 800930c:	40014000 	.word	0x40014000
 8009310:	40001800 	.word	0x40001800

08009314 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b082      	sub	sp, #8
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d101      	bne.n	8009326 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009322:	2301      	movs	r3, #1
 8009324:	e041      	b.n	80093aa <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800932c:	b2db      	uxtb	r3, r3
 800932e:	2b00      	cmp	r3, #0
 8009330:	d106      	bne.n	8009340 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 f839 	bl	80093b2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2202      	movs	r2, #2
 8009344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	3304      	adds	r3, #4
 8009350:	4619      	mov	r1, r3
 8009352:	4610      	mov	r0, r2
 8009354:	f000 fcac 	bl	8009cb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2201      	movs	r2, #1
 800935c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2201      	movs	r2, #1
 8009364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2201      	movs	r2, #1
 800936c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2201      	movs	r2, #1
 8009374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2201      	movs	r2, #1
 800937c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2201      	movs	r2, #1
 8009384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2201      	movs	r2, #1
 800938c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2201      	movs	r2, #1
 8009394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2201      	movs	r2, #1
 80093a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80093a8:	2300      	movs	r3, #0
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3708      	adds	r7, #8
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80093b2:	b480      	push	{r7}
 80093b4:	b083      	sub	sp, #12
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80093ba:	bf00      	nop
 80093bc:	370c      	adds	r7, #12
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr
	...

080093c8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b084      	sub	sp, #16
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80093d2:	2300      	movs	r3, #0
 80093d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d104      	bne.n	80093e6 <HAL_TIM_IC_Start_IT+0x1e>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	e013      	b.n	800940e <HAL_TIM_IC_Start_IT+0x46>
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	2b04      	cmp	r3, #4
 80093ea:	d104      	bne.n	80093f6 <HAL_TIM_IC_Start_IT+0x2e>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	e00b      	b.n	800940e <HAL_TIM_IC_Start_IT+0x46>
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	2b08      	cmp	r3, #8
 80093fa:	d104      	bne.n	8009406 <HAL_TIM_IC_Start_IT+0x3e>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009402:	b2db      	uxtb	r3, r3
 8009404:	e003      	b.n	800940e <HAL_TIM_IC_Start_IT+0x46>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800940c:	b2db      	uxtb	r3, r3
 800940e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d104      	bne.n	8009420 <HAL_TIM_IC_Start_IT+0x58>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800941c:	b2db      	uxtb	r3, r3
 800941e:	e013      	b.n	8009448 <HAL_TIM_IC_Start_IT+0x80>
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	2b04      	cmp	r3, #4
 8009424:	d104      	bne.n	8009430 <HAL_TIM_IC_Start_IT+0x68>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800942c:	b2db      	uxtb	r3, r3
 800942e:	e00b      	b.n	8009448 <HAL_TIM_IC_Start_IT+0x80>
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	2b08      	cmp	r3, #8
 8009434:	d104      	bne.n	8009440 <HAL_TIM_IC_Start_IT+0x78>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800943c:	b2db      	uxtb	r3, r3
 800943e:	e003      	b.n	8009448 <HAL_TIM_IC_Start_IT+0x80>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009446:	b2db      	uxtb	r3, r3
 8009448:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800944a:	7bbb      	ldrb	r3, [r7, #14]
 800944c:	2b01      	cmp	r3, #1
 800944e:	d102      	bne.n	8009456 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009450:	7b7b      	ldrb	r3, [r7, #13]
 8009452:	2b01      	cmp	r3, #1
 8009454:	d001      	beq.n	800945a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8009456:	2301      	movs	r3, #1
 8009458:	e0cc      	b.n	80095f4 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d104      	bne.n	800946a <HAL_TIM_IC_Start_IT+0xa2>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2202      	movs	r2, #2
 8009464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009468:	e013      	b.n	8009492 <HAL_TIM_IC_Start_IT+0xca>
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	2b04      	cmp	r3, #4
 800946e:	d104      	bne.n	800947a <HAL_TIM_IC_Start_IT+0xb2>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2202      	movs	r2, #2
 8009474:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009478:	e00b      	b.n	8009492 <HAL_TIM_IC_Start_IT+0xca>
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	2b08      	cmp	r3, #8
 800947e:	d104      	bne.n	800948a <HAL_TIM_IC_Start_IT+0xc2>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2202      	movs	r2, #2
 8009484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009488:	e003      	b.n	8009492 <HAL_TIM_IC_Start_IT+0xca>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2202      	movs	r2, #2
 800948e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d104      	bne.n	80094a2 <HAL_TIM_IC_Start_IT+0xda>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2202      	movs	r2, #2
 800949c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80094a0:	e013      	b.n	80094ca <HAL_TIM_IC_Start_IT+0x102>
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	2b04      	cmp	r3, #4
 80094a6:	d104      	bne.n	80094b2 <HAL_TIM_IC_Start_IT+0xea>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2202      	movs	r2, #2
 80094ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80094b0:	e00b      	b.n	80094ca <HAL_TIM_IC_Start_IT+0x102>
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	2b08      	cmp	r3, #8
 80094b6:	d104      	bne.n	80094c2 <HAL_TIM_IC_Start_IT+0xfa>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2202      	movs	r2, #2
 80094bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094c0:	e003      	b.n	80094ca <HAL_TIM_IC_Start_IT+0x102>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2202      	movs	r2, #2
 80094c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	2b0c      	cmp	r3, #12
 80094ce:	d841      	bhi.n	8009554 <HAL_TIM_IC_Start_IT+0x18c>
 80094d0:	a201      	add	r2, pc, #4	; (adr r2, 80094d8 <HAL_TIM_IC_Start_IT+0x110>)
 80094d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094d6:	bf00      	nop
 80094d8:	0800950d 	.word	0x0800950d
 80094dc:	08009555 	.word	0x08009555
 80094e0:	08009555 	.word	0x08009555
 80094e4:	08009555 	.word	0x08009555
 80094e8:	0800951f 	.word	0x0800951f
 80094ec:	08009555 	.word	0x08009555
 80094f0:	08009555 	.word	0x08009555
 80094f4:	08009555 	.word	0x08009555
 80094f8:	08009531 	.word	0x08009531
 80094fc:	08009555 	.word	0x08009555
 8009500:	08009555 	.word	0x08009555
 8009504:	08009555 	.word	0x08009555
 8009508:	08009543 	.word	0x08009543
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	68da      	ldr	r2, [r3, #12]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f042 0202 	orr.w	r2, r2, #2
 800951a:	60da      	str	r2, [r3, #12]
      break;
 800951c:	e01d      	b.n	800955a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	68da      	ldr	r2, [r3, #12]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f042 0204 	orr.w	r2, r2, #4
 800952c:	60da      	str	r2, [r3, #12]
      break;
 800952e:	e014      	b.n	800955a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	68da      	ldr	r2, [r3, #12]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f042 0208 	orr.w	r2, r2, #8
 800953e:	60da      	str	r2, [r3, #12]
      break;
 8009540:	e00b      	b.n	800955a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	68da      	ldr	r2, [r3, #12]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f042 0210 	orr.w	r2, r2, #16
 8009550:	60da      	str	r2, [r3, #12]
      break;
 8009552:	e002      	b.n	800955a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8009554:	2301      	movs	r3, #1
 8009556:	73fb      	strb	r3, [r7, #15]
      break;
 8009558:	bf00      	nop
  }

  if (status == HAL_OK)
 800955a:	7bfb      	ldrb	r3, [r7, #15]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d148      	bne.n	80095f2 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	2201      	movs	r2, #1
 8009566:	6839      	ldr	r1, [r7, #0]
 8009568:	4618      	mov	r0, r3
 800956a:	f000 ffb5 	bl	800a4d8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	4a22      	ldr	r2, [pc, #136]	; (80095fc <HAL_TIM_IC_Start_IT+0x234>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d022      	beq.n	80095be <HAL_TIM_IC_Start_IT+0x1f6>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009580:	d01d      	beq.n	80095be <HAL_TIM_IC_Start_IT+0x1f6>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a1e      	ldr	r2, [pc, #120]	; (8009600 <HAL_TIM_IC_Start_IT+0x238>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d018      	beq.n	80095be <HAL_TIM_IC_Start_IT+0x1f6>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4a1c      	ldr	r2, [pc, #112]	; (8009604 <HAL_TIM_IC_Start_IT+0x23c>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d013      	beq.n	80095be <HAL_TIM_IC_Start_IT+0x1f6>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4a1b      	ldr	r2, [pc, #108]	; (8009608 <HAL_TIM_IC_Start_IT+0x240>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d00e      	beq.n	80095be <HAL_TIM_IC_Start_IT+0x1f6>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a19      	ldr	r2, [pc, #100]	; (800960c <HAL_TIM_IC_Start_IT+0x244>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d009      	beq.n	80095be <HAL_TIM_IC_Start_IT+0x1f6>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	4a18      	ldr	r2, [pc, #96]	; (8009610 <HAL_TIM_IC_Start_IT+0x248>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d004      	beq.n	80095be <HAL_TIM_IC_Start_IT+0x1f6>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a16      	ldr	r2, [pc, #88]	; (8009614 <HAL_TIM_IC_Start_IT+0x24c>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d111      	bne.n	80095e2 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	689b      	ldr	r3, [r3, #8]
 80095c4:	f003 0307 	and.w	r3, r3, #7
 80095c8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	2b06      	cmp	r3, #6
 80095ce:	d010      	beq.n	80095f2 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	681a      	ldr	r2, [r3, #0]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f042 0201 	orr.w	r2, r2, #1
 80095de:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095e0:	e007      	b.n	80095f2 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	681a      	ldr	r2, [r3, #0]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f042 0201 	orr.w	r2, r2, #1
 80095f0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80095f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3710      	adds	r7, #16
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}
 80095fc:	40010000 	.word	0x40010000
 8009600:	40000400 	.word	0x40000400
 8009604:	40000800 	.word	0x40000800
 8009608:	40000c00 	.word	0x40000c00
 800960c:	40010400 	.word	0x40010400
 8009610:	40014000 	.word	0x40014000
 8009614:	40001800 	.word	0x40001800

08009618 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	691b      	ldr	r3, [r3, #16]
 8009626:	f003 0302 	and.w	r3, r3, #2
 800962a:	2b02      	cmp	r3, #2
 800962c:	d122      	bne.n	8009674 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	68db      	ldr	r3, [r3, #12]
 8009634:	f003 0302 	and.w	r3, r3, #2
 8009638:	2b02      	cmp	r3, #2
 800963a:	d11b      	bne.n	8009674 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f06f 0202 	mvn.w	r2, #2
 8009644:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2201      	movs	r2, #1
 800964a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	699b      	ldr	r3, [r3, #24]
 8009652:	f003 0303 	and.w	r3, r3, #3
 8009656:	2b00      	cmp	r3, #0
 8009658:	d003      	beq.n	8009662 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f7f7 fcc6 	bl	8000fec <HAL_TIM_IC_CaptureCallback>
 8009660:	e005      	b.n	800966e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 fb05 	bl	8009c72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f000 fb0c 	bl	8009c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2200      	movs	r2, #0
 8009672:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	691b      	ldr	r3, [r3, #16]
 800967a:	f003 0304 	and.w	r3, r3, #4
 800967e:	2b04      	cmp	r3, #4
 8009680:	d122      	bne.n	80096c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	68db      	ldr	r3, [r3, #12]
 8009688:	f003 0304 	and.w	r3, r3, #4
 800968c:	2b04      	cmp	r3, #4
 800968e:	d11b      	bne.n	80096c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f06f 0204 	mvn.w	r2, #4
 8009698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2202      	movs	r2, #2
 800969e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	699b      	ldr	r3, [r3, #24]
 80096a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d003      	beq.n	80096b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f7f7 fc9c 	bl	8000fec <HAL_TIM_IC_CaptureCallback>
 80096b4:	e005      	b.n	80096c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f000 fadb 	bl	8009c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 fae2 	bl	8009c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2200      	movs	r2, #0
 80096c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	691b      	ldr	r3, [r3, #16]
 80096ce:	f003 0308 	and.w	r3, r3, #8
 80096d2:	2b08      	cmp	r3, #8
 80096d4:	d122      	bne.n	800971c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	68db      	ldr	r3, [r3, #12]
 80096dc:	f003 0308 	and.w	r3, r3, #8
 80096e0:	2b08      	cmp	r3, #8
 80096e2:	d11b      	bne.n	800971c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f06f 0208 	mvn.w	r2, #8
 80096ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2204      	movs	r2, #4
 80096f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	69db      	ldr	r3, [r3, #28]
 80096fa:	f003 0303 	and.w	r3, r3, #3
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d003      	beq.n	800970a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f7f7 fc72 	bl	8000fec <HAL_TIM_IC_CaptureCallback>
 8009708:	e005      	b.n	8009716 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 fab1 	bl	8009c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 fab8 	bl	8009c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2200      	movs	r2, #0
 800971a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	691b      	ldr	r3, [r3, #16]
 8009722:	f003 0310 	and.w	r3, r3, #16
 8009726:	2b10      	cmp	r3, #16
 8009728:	d122      	bne.n	8009770 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	68db      	ldr	r3, [r3, #12]
 8009730:	f003 0310 	and.w	r3, r3, #16
 8009734:	2b10      	cmp	r3, #16
 8009736:	d11b      	bne.n	8009770 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f06f 0210 	mvn.w	r2, #16
 8009740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2208      	movs	r2, #8
 8009746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	69db      	ldr	r3, [r3, #28]
 800974e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009752:	2b00      	cmp	r3, #0
 8009754:	d003      	beq.n	800975e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f7f7 fc48 	bl	8000fec <HAL_TIM_IC_CaptureCallback>
 800975c:	e005      	b.n	800976a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 fa87 	bl	8009c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 fa8e 	bl	8009c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	691b      	ldr	r3, [r3, #16]
 8009776:	f003 0301 	and.w	r3, r3, #1
 800977a:	2b01      	cmp	r3, #1
 800977c:	d10e      	bne.n	800979c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	68db      	ldr	r3, [r3, #12]
 8009784:	f003 0301 	and.w	r3, r3, #1
 8009788:	2b01      	cmp	r3, #1
 800978a:	d107      	bne.n	800979c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f06f 0201 	mvn.w	r2, #1
 8009794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f7f7 fe06 	bl	80013a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	691b      	ldr	r3, [r3, #16]
 80097a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097a6:	2b80      	cmp	r3, #128	; 0x80
 80097a8:	d10e      	bne.n	80097c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	68db      	ldr	r3, [r3, #12]
 80097b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097b4:	2b80      	cmp	r3, #128	; 0x80
 80097b6:	d107      	bne.n	80097c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80097c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 ff86 	bl	800a6d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	691b      	ldr	r3, [r3, #16]
 80097ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097d2:	2b40      	cmp	r3, #64	; 0x40
 80097d4:	d10e      	bne.n	80097f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	68db      	ldr	r3, [r3, #12]
 80097dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097e0:	2b40      	cmp	r3, #64	; 0x40
 80097e2:	d107      	bne.n	80097f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80097ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 fa53 	bl	8009c9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	691b      	ldr	r3, [r3, #16]
 80097fa:	f003 0320 	and.w	r3, r3, #32
 80097fe:	2b20      	cmp	r3, #32
 8009800:	d10e      	bne.n	8009820 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	68db      	ldr	r3, [r3, #12]
 8009808:	f003 0320 	and.w	r3, r3, #32
 800980c:	2b20      	cmp	r3, #32
 800980e:	d107      	bne.n	8009820 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f06f 0220 	mvn.w	r2, #32
 8009818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 ff50 	bl	800a6c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009820:	bf00      	nop
 8009822:	3708      	adds	r7, #8
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b086      	sub	sp, #24
 800982c:	af00      	add	r7, sp, #0
 800982e:	60f8      	str	r0, [r7, #12]
 8009830:	60b9      	str	r1, [r7, #8]
 8009832:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009834:	2300      	movs	r3, #0
 8009836:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800983e:	2b01      	cmp	r3, #1
 8009840:	d101      	bne.n	8009846 <HAL_TIM_IC_ConfigChannel+0x1e>
 8009842:	2302      	movs	r3, #2
 8009844:	e088      	b.n	8009958 <HAL_TIM_IC_ConfigChannel+0x130>
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2201      	movs	r2, #1
 800984a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d11b      	bne.n	800988c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	6818      	ldr	r0, [r3, #0]
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	6819      	ldr	r1, [r3, #0]
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	685a      	ldr	r2, [r3, #4]
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	68db      	ldr	r3, [r3, #12]
 8009864:	f000 fc74 	bl	800a150 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	699a      	ldr	r2, [r3, #24]
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f022 020c 	bic.w	r2, r2, #12
 8009876:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	6999      	ldr	r1, [r3, #24]
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	689a      	ldr	r2, [r3, #8]
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	430a      	orrs	r2, r1
 8009888:	619a      	str	r2, [r3, #24]
 800988a:	e060      	b.n	800994e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2b04      	cmp	r3, #4
 8009890:	d11c      	bne.n	80098cc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	6818      	ldr	r0, [r3, #0]
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	6819      	ldr	r1, [r3, #0]
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	685a      	ldr	r2, [r3, #4]
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	68db      	ldr	r3, [r3, #12]
 80098a2:	f000 fcf8 	bl	800a296 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	699a      	ldr	r2, [r3, #24]
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80098b4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	6999      	ldr	r1, [r3, #24]
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	021a      	lsls	r2, r3, #8
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	430a      	orrs	r2, r1
 80098c8:	619a      	str	r2, [r3, #24]
 80098ca:	e040      	b.n	800994e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2b08      	cmp	r3, #8
 80098d0:	d11b      	bne.n	800990a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	6818      	ldr	r0, [r3, #0]
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	6819      	ldr	r1, [r3, #0]
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	685a      	ldr	r2, [r3, #4]
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	68db      	ldr	r3, [r3, #12]
 80098e2:	f000 fd45 	bl	800a370 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	69da      	ldr	r2, [r3, #28]
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f022 020c 	bic.w	r2, r2, #12
 80098f4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	69d9      	ldr	r1, [r3, #28]
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	689a      	ldr	r2, [r3, #8]
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	430a      	orrs	r2, r1
 8009906:	61da      	str	r2, [r3, #28]
 8009908:	e021      	b.n	800994e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2b0c      	cmp	r3, #12
 800990e:	d11c      	bne.n	800994a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	6818      	ldr	r0, [r3, #0]
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	6819      	ldr	r1, [r3, #0]
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	685a      	ldr	r2, [r3, #4]
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	68db      	ldr	r3, [r3, #12]
 8009920:	f000 fd62 	bl	800a3e8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	69da      	ldr	r2, [r3, #28]
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009932:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	69d9      	ldr	r1, [r3, #28]
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	689b      	ldr	r3, [r3, #8]
 800993e:	021a      	lsls	r2, r3, #8
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	430a      	orrs	r2, r1
 8009946:	61da      	str	r2, [r3, #28]
 8009948:	e001      	b.n	800994e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800994a:	2301      	movs	r3, #1
 800994c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2200      	movs	r2, #0
 8009952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009956:	7dfb      	ldrb	r3, [r7, #23]
}
 8009958:	4618      	mov	r0, r3
 800995a:	3718      	adds	r7, #24
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b086      	sub	sp, #24
 8009964:	af00      	add	r7, sp, #0
 8009966:	60f8      	str	r0, [r7, #12]
 8009968:	60b9      	str	r1, [r7, #8]
 800996a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800996c:	2300      	movs	r3, #0
 800996e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009976:	2b01      	cmp	r3, #1
 8009978:	d101      	bne.n	800997e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800997a:	2302      	movs	r3, #2
 800997c:	e0ae      	b.n	8009adc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2201      	movs	r2, #1
 8009982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2b0c      	cmp	r3, #12
 800998a:	f200 809f 	bhi.w	8009acc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800998e:	a201      	add	r2, pc, #4	; (adr r2, 8009994 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009994:	080099c9 	.word	0x080099c9
 8009998:	08009acd 	.word	0x08009acd
 800999c:	08009acd 	.word	0x08009acd
 80099a0:	08009acd 	.word	0x08009acd
 80099a4:	08009a09 	.word	0x08009a09
 80099a8:	08009acd 	.word	0x08009acd
 80099ac:	08009acd 	.word	0x08009acd
 80099b0:	08009acd 	.word	0x08009acd
 80099b4:	08009a4b 	.word	0x08009a4b
 80099b8:	08009acd 	.word	0x08009acd
 80099bc:	08009acd 	.word	0x08009acd
 80099c0:	08009acd 	.word	0x08009acd
 80099c4:	08009a8b 	.word	0x08009a8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	68b9      	ldr	r1, [r7, #8]
 80099ce:	4618      	mov	r0, r3
 80099d0:	f000 fa0e 	bl	8009df0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	699a      	ldr	r2, [r3, #24]
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f042 0208 	orr.w	r2, r2, #8
 80099e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	699a      	ldr	r2, [r3, #24]
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f022 0204 	bic.w	r2, r2, #4
 80099f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	6999      	ldr	r1, [r3, #24]
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	691a      	ldr	r2, [r3, #16]
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	430a      	orrs	r2, r1
 8009a04:	619a      	str	r2, [r3, #24]
      break;
 8009a06:	e064      	b.n	8009ad2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	68b9      	ldr	r1, [r7, #8]
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f000 fa5e 	bl	8009ed0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	699a      	ldr	r2, [r3, #24]
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	699a      	ldr	r2, [r3, #24]
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	6999      	ldr	r1, [r3, #24]
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	691b      	ldr	r3, [r3, #16]
 8009a3e:	021a      	lsls	r2, r3, #8
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	430a      	orrs	r2, r1
 8009a46:	619a      	str	r2, [r3, #24]
      break;
 8009a48:	e043      	b.n	8009ad2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	68b9      	ldr	r1, [r7, #8]
 8009a50:	4618      	mov	r0, r3
 8009a52:	f000 fab3 	bl	8009fbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	69da      	ldr	r2, [r3, #28]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f042 0208 	orr.w	r2, r2, #8
 8009a64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	69da      	ldr	r2, [r3, #28]
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f022 0204 	bic.w	r2, r2, #4
 8009a74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	69d9      	ldr	r1, [r3, #28]
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	691a      	ldr	r2, [r3, #16]
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	430a      	orrs	r2, r1
 8009a86:	61da      	str	r2, [r3, #28]
      break;
 8009a88:	e023      	b.n	8009ad2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	68b9      	ldr	r1, [r7, #8]
 8009a90:	4618      	mov	r0, r3
 8009a92:	f000 fb07 	bl	800a0a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	69da      	ldr	r2, [r3, #28]
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009aa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	69da      	ldr	r2, [r3, #28]
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ab4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	69d9      	ldr	r1, [r3, #28]
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	691b      	ldr	r3, [r3, #16]
 8009ac0:	021a      	lsls	r2, r3, #8
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	430a      	orrs	r2, r1
 8009ac8:	61da      	str	r2, [r3, #28]
      break;
 8009aca:	e002      	b.n	8009ad2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009acc:	2301      	movs	r3, #1
 8009ace:	75fb      	strb	r3, [r7, #23]
      break;
 8009ad0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3718      	adds	r7, #24
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}

08009ae4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009aee:	2300      	movs	r3, #0
 8009af0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d101      	bne.n	8009b00 <HAL_TIM_ConfigClockSource+0x1c>
 8009afc:	2302      	movs	r3, #2
 8009afe:	e0b4      	b.n	8009c6a <HAL_TIM_ConfigClockSource+0x186>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2201      	movs	r2, #1
 8009b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2202      	movs	r2, #2
 8009b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	689b      	ldr	r3, [r3, #8]
 8009b16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009b1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	68ba      	ldr	r2, [r7, #8]
 8009b2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b38:	d03e      	beq.n	8009bb8 <HAL_TIM_ConfigClockSource+0xd4>
 8009b3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b3e:	f200 8087 	bhi.w	8009c50 <HAL_TIM_ConfigClockSource+0x16c>
 8009b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b46:	f000 8086 	beq.w	8009c56 <HAL_TIM_ConfigClockSource+0x172>
 8009b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b4e:	d87f      	bhi.n	8009c50 <HAL_TIM_ConfigClockSource+0x16c>
 8009b50:	2b70      	cmp	r3, #112	; 0x70
 8009b52:	d01a      	beq.n	8009b8a <HAL_TIM_ConfigClockSource+0xa6>
 8009b54:	2b70      	cmp	r3, #112	; 0x70
 8009b56:	d87b      	bhi.n	8009c50 <HAL_TIM_ConfigClockSource+0x16c>
 8009b58:	2b60      	cmp	r3, #96	; 0x60
 8009b5a:	d050      	beq.n	8009bfe <HAL_TIM_ConfigClockSource+0x11a>
 8009b5c:	2b60      	cmp	r3, #96	; 0x60
 8009b5e:	d877      	bhi.n	8009c50 <HAL_TIM_ConfigClockSource+0x16c>
 8009b60:	2b50      	cmp	r3, #80	; 0x50
 8009b62:	d03c      	beq.n	8009bde <HAL_TIM_ConfigClockSource+0xfa>
 8009b64:	2b50      	cmp	r3, #80	; 0x50
 8009b66:	d873      	bhi.n	8009c50 <HAL_TIM_ConfigClockSource+0x16c>
 8009b68:	2b40      	cmp	r3, #64	; 0x40
 8009b6a:	d058      	beq.n	8009c1e <HAL_TIM_ConfigClockSource+0x13a>
 8009b6c:	2b40      	cmp	r3, #64	; 0x40
 8009b6e:	d86f      	bhi.n	8009c50 <HAL_TIM_ConfigClockSource+0x16c>
 8009b70:	2b30      	cmp	r3, #48	; 0x30
 8009b72:	d064      	beq.n	8009c3e <HAL_TIM_ConfigClockSource+0x15a>
 8009b74:	2b30      	cmp	r3, #48	; 0x30
 8009b76:	d86b      	bhi.n	8009c50 <HAL_TIM_ConfigClockSource+0x16c>
 8009b78:	2b20      	cmp	r3, #32
 8009b7a:	d060      	beq.n	8009c3e <HAL_TIM_ConfigClockSource+0x15a>
 8009b7c:	2b20      	cmp	r3, #32
 8009b7e:	d867      	bhi.n	8009c50 <HAL_TIM_ConfigClockSource+0x16c>
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d05c      	beq.n	8009c3e <HAL_TIM_ConfigClockSource+0x15a>
 8009b84:	2b10      	cmp	r3, #16
 8009b86:	d05a      	beq.n	8009c3e <HAL_TIM_ConfigClockSource+0x15a>
 8009b88:	e062      	b.n	8009c50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6818      	ldr	r0, [r3, #0]
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	6899      	ldr	r1, [r3, #8]
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	685a      	ldr	r2, [r3, #4]
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	68db      	ldr	r3, [r3, #12]
 8009b9a:	f000 fc7d 	bl	800a498 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009bac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	68ba      	ldr	r2, [r7, #8]
 8009bb4:	609a      	str	r2, [r3, #8]
      break;
 8009bb6:	e04f      	b.n	8009c58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6818      	ldr	r0, [r3, #0]
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	6899      	ldr	r1, [r3, #8]
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	685a      	ldr	r2, [r3, #4]
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	68db      	ldr	r3, [r3, #12]
 8009bc8:	f000 fc66 	bl	800a498 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	689a      	ldr	r2, [r3, #8]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009bda:	609a      	str	r2, [r3, #8]
      break;
 8009bdc:	e03c      	b.n	8009c58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6818      	ldr	r0, [r3, #0]
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	6859      	ldr	r1, [r3, #4]
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	68db      	ldr	r3, [r3, #12]
 8009bea:	461a      	mov	r2, r3
 8009bec:	f000 fb24 	bl	800a238 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	2150      	movs	r1, #80	; 0x50
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f000 fc33 	bl	800a462 <TIM_ITRx_SetConfig>
      break;
 8009bfc:	e02c      	b.n	8009c58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6818      	ldr	r0, [r3, #0]
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	6859      	ldr	r1, [r3, #4]
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	68db      	ldr	r3, [r3, #12]
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	f000 fb80 	bl	800a310 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	2160      	movs	r1, #96	; 0x60
 8009c16:	4618      	mov	r0, r3
 8009c18:	f000 fc23 	bl	800a462 <TIM_ITRx_SetConfig>
      break;
 8009c1c:	e01c      	b.n	8009c58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6818      	ldr	r0, [r3, #0]
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	6859      	ldr	r1, [r3, #4]
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	68db      	ldr	r3, [r3, #12]
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	f000 fb04 	bl	800a238 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	2140      	movs	r1, #64	; 0x40
 8009c36:	4618      	mov	r0, r3
 8009c38:	f000 fc13 	bl	800a462 <TIM_ITRx_SetConfig>
      break;
 8009c3c:	e00c      	b.n	8009c58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681a      	ldr	r2, [r3, #0]
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4619      	mov	r1, r3
 8009c48:	4610      	mov	r0, r2
 8009c4a:	f000 fc0a 	bl	800a462 <TIM_ITRx_SetConfig>
      break;
 8009c4e:	e003      	b.n	8009c58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009c50:	2301      	movs	r3, #1
 8009c52:	73fb      	strb	r3, [r7, #15]
      break;
 8009c54:	e000      	b.n	8009c58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009c56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2200      	movs	r2, #0
 8009c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3710      	adds	r7, #16
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}

08009c72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c72:	b480      	push	{r7}
 8009c74:	b083      	sub	sp, #12
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009c7a:	bf00      	nop
 8009c7c:	370c      	adds	r7, #12
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr

08009c86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009c86:	b480      	push	{r7}
 8009c88:	b083      	sub	sp, #12
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009c8e:	bf00      	nop
 8009c90:	370c      	adds	r7, #12
 8009c92:	46bd      	mov	sp, r7
 8009c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c98:	4770      	bx	lr

08009c9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009c9a:	b480      	push	{r7}
 8009c9c:	b083      	sub	sp, #12
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009ca2:	bf00      	nop
 8009ca4:	370c      	adds	r7, #12
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cac:	4770      	bx	lr
	...

08009cb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b085      	sub	sp, #20
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	4a40      	ldr	r2, [pc, #256]	; (8009dc4 <TIM_Base_SetConfig+0x114>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d013      	beq.n	8009cf0 <TIM_Base_SetConfig+0x40>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cce:	d00f      	beq.n	8009cf0 <TIM_Base_SetConfig+0x40>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	4a3d      	ldr	r2, [pc, #244]	; (8009dc8 <TIM_Base_SetConfig+0x118>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d00b      	beq.n	8009cf0 <TIM_Base_SetConfig+0x40>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	4a3c      	ldr	r2, [pc, #240]	; (8009dcc <TIM_Base_SetConfig+0x11c>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d007      	beq.n	8009cf0 <TIM_Base_SetConfig+0x40>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	4a3b      	ldr	r2, [pc, #236]	; (8009dd0 <TIM_Base_SetConfig+0x120>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d003      	beq.n	8009cf0 <TIM_Base_SetConfig+0x40>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	4a3a      	ldr	r2, [pc, #232]	; (8009dd4 <TIM_Base_SetConfig+0x124>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d108      	bne.n	8009d02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	68fa      	ldr	r2, [r7, #12]
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	4a2f      	ldr	r2, [pc, #188]	; (8009dc4 <TIM_Base_SetConfig+0x114>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d02b      	beq.n	8009d62 <TIM_Base_SetConfig+0xb2>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d10:	d027      	beq.n	8009d62 <TIM_Base_SetConfig+0xb2>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	4a2c      	ldr	r2, [pc, #176]	; (8009dc8 <TIM_Base_SetConfig+0x118>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d023      	beq.n	8009d62 <TIM_Base_SetConfig+0xb2>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	4a2b      	ldr	r2, [pc, #172]	; (8009dcc <TIM_Base_SetConfig+0x11c>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d01f      	beq.n	8009d62 <TIM_Base_SetConfig+0xb2>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	4a2a      	ldr	r2, [pc, #168]	; (8009dd0 <TIM_Base_SetConfig+0x120>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d01b      	beq.n	8009d62 <TIM_Base_SetConfig+0xb2>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	4a29      	ldr	r2, [pc, #164]	; (8009dd4 <TIM_Base_SetConfig+0x124>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d017      	beq.n	8009d62 <TIM_Base_SetConfig+0xb2>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	4a28      	ldr	r2, [pc, #160]	; (8009dd8 <TIM_Base_SetConfig+0x128>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d013      	beq.n	8009d62 <TIM_Base_SetConfig+0xb2>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	4a27      	ldr	r2, [pc, #156]	; (8009ddc <TIM_Base_SetConfig+0x12c>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d00f      	beq.n	8009d62 <TIM_Base_SetConfig+0xb2>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	4a26      	ldr	r2, [pc, #152]	; (8009de0 <TIM_Base_SetConfig+0x130>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d00b      	beq.n	8009d62 <TIM_Base_SetConfig+0xb2>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	4a25      	ldr	r2, [pc, #148]	; (8009de4 <TIM_Base_SetConfig+0x134>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d007      	beq.n	8009d62 <TIM_Base_SetConfig+0xb2>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	4a24      	ldr	r2, [pc, #144]	; (8009de8 <TIM_Base_SetConfig+0x138>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d003      	beq.n	8009d62 <TIM_Base_SetConfig+0xb2>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	4a23      	ldr	r2, [pc, #140]	; (8009dec <TIM_Base_SetConfig+0x13c>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d108      	bne.n	8009d74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	68db      	ldr	r3, [r3, #12]
 8009d6e:	68fa      	ldr	r2, [r7, #12]
 8009d70:	4313      	orrs	r3, r2
 8009d72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	695b      	ldr	r3, [r3, #20]
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	68fa      	ldr	r2, [r7, #12]
 8009d86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	689a      	ldr	r2, [r3, #8]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	681a      	ldr	r2, [r3, #0]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	4a0a      	ldr	r2, [pc, #40]	; (8009dc4 <TIM_Base_SetConfig+0x114>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d003      	beq.n	8009da8 <TIM_Base_SetConfig+0xf8>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	4a0c      	ldr	r2, [pc, #48]	; (8009dd4 <TIM_Base_SetConfig+0x124>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d103      	bne.n	8009db0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	691a      	ldr	r2, [r3, #16]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2201      	movs	r2, #1
 8009db4:	615a      	str	r2, [r3, #20]
}
 8009db6:	bf00      	nop
 8009db8:	3714      	adds	r7, #20
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc0:	4770      	bx	lr
 8009dc2:	bf00      	nop
 8009dc4:	40010000 	.word	0x40010000
 8009dc8:	40000400 	.word	0x40000400
 8009dcc:	40000800 	.word	0x40000800
 8009dd0:	40000c00 	.word	0x40000c00
 8009dd4:	40010400 	.word	0x40010400
 8009dd8:	40014000 	.word	0x40014000
 8009ddc:	40014400 	.word	0x40014400
 8009de0:	40014800 	.word	0x40014800
 8009de4:	40001800 	.word	0x40001800
 8009de8:	40001c00 	.word	0x40001c00
 8009dec:	40002000 	.word	0x40002000

08009df0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b087      	sub	sp, #28
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6a1b      	ldr	r3, [r3, #32]
 8009dfe:	f023 0201 	bic.w	r2, r3, #1
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6a1b      	ldr	r3, [r3, #32]
 8009e0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	699b      	ldr	r3, [r3, #24]
 8009e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f023 0303 	bic.w	r3, r3, #3
 8009e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	68fa      	ldr	r2, [r7, #12]
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	f023 0302 	bic.w	r3, r3, #2
 8009e38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	689b      	ldr	r3, [r3, #8]
 8009e3e:	697a      	ldr	r2, [r7, #20]
 8009e40:	4313      	orrs	r3, r2
 8009e42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	4a20      	ldr	r2, [pc, #128]	; (8009ec8 <TIM_OC1_SetConfig+0xd8>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d003      	beq.n	8009e54 <TIM_OC1_SetConfig+0x64>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	4a1f      	ldr	r2, [pc, #124]	; (8009ecc <TIM_OC1_SetConfig+0xdc>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d10c      	bne.n	8009e6e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	f023 0308 	bic.w	r3, r3, #8
 8009e5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	697a      	ldr	r2, [r7, #20]
 8009e62:	4313      	orrs	r3, r2
 8009e64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	f023 0304 	bic.w	r3, r3, #4
 8009e6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	4a15      	ldr	r2, [pc, #84]	; (8009ec8 <TIM_OC1_SetConfig+0xd8>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d003      	beq.n	8009e7e <TIM_OC1_SetConfig+0x8e>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	4a14      	ldr	r2, [pc, #80]	; (8009ecc <TIM_OC1_SetConfig+0xdc>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d111      	bne.n	8009ea2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009e8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	695b      	ldr	r3, [r3, #20]
 8009e92:	693a      	ldr	r2, [r7, #16]
 8009e94:	4313      	orrs	r3, r2
 8009e96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	699b      	ldr	r3, [r3, #24]
 8009e9c:	693a      	ldr	r2, [r7, #16]
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	693a      	ldr	r2, [r7, #16]
 8009ea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	68fa      	ldr	r2, [r7, #12]
 8009eac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	685a      	ldr	r2, [r3, #4]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	697a      	ldr	r2, [r7, #20]
 8009eba:	621a      	str	r2, [r3, #32]
}
 8009ebc:	bf00      	nop
 8009ebe:	371c      	adds	r7, #28
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec6:	4770      	bx	lr
 8009ec8:	40010000 	.word	0x40010000
 8009ecc:	40010400 	.word	0x40010400

08009ed0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b087      	sub	sp, #28
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6a1b      	ldr	r3, [r3, #32]
 8009ede:	f023 0210 	bic.w	r2, r3, #16
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6a1b      	ldr	r3, [r3, #32]
 8009eea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	699b      	ldr	r3, [r3, #24]
 8009ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	021b      	lsls	r3, r3, #8
 8009f0e:	68fa      	ldr	r2, [r7, #12]
 8009f10:	4313      	orrs	r3, r2
 8009f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	f023 0320 	bic.w	r3, r3, #32
 8009f1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	689b      	ldr	r3, [r3, #8]
 8009f20:	011b      	lsls	r3, r3, #4
 8009f22:	697a      	ldr	r2, [r7, #20]
 8009f24:	4313      	orrs	r3, r2
 8009f26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	4a22      	ldr	r2, [pc, #136]	; (8009fb4 <TIM_OC2_SetConfig+0xe4>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d003      	beq.n	8009f38 <TIM_OC2_SetConfig+0x68>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	4a21      	ldr	r2, [pc, #132]	; (8009fb8 <TIM_OC2_SetConfig+0xe8>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d10d      	bne.n	8009f54 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	68db      	ldr	r3, [r3, #12]
 8009f44:	011b      	lsls	r3, r3, #4
 8009f46:	697a      	ldr	r2, [r7, #20]
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	4a17      	ldr	r2, [pc, #92]	; (8009fb4 <TIM_OC2_SetConfig+0xe4>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d003      	beq.n	8009f64 <TIM_OC2_SetConfig+0x94>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	4a16      	ldr	r2, [pc, #88]	; (8009fb8 <TIM_OC2_SetConfig+0xe8>)
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d113      	bne.n	8009f8c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	695b      	ldr	r3, [r3, #20]
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	693a      	ldr	r2, [r7, #16]
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	699b      	ldr	r3, [r3, #24]
 8009f84:	009b      	lsls	r3, r3, #2
 8009f86:	693a      	ldr	r2, [r7, #16]
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	693a      	ldr	r2, [r7, #16]
 8009f90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	68fa      	ldr	r2, [r7, #12]
 8009f96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	685a      	ldr	r2, [r3, #4]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	697a      	ldr	r2, [r7, #20]
 8009fa4:	621a      	str	r2, [r3, #32]
}
 8009fa6:	bf00      	nop
 8009fa8:	371c      	adds	r7, #28
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr
 8009fb2:	bf00      	nop
 8009fb4:	40010000 	.word	0x40010000
 8009fb8:	40010400 	.word	0x40010400

08009fbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b087      	sub	sp, #28
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6a1b      	ldr	r3, [r3, #32]
 8009fca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6a1b      	ldr	r3, [r3, #32]
 8009fd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	69db      	ldr	r3, [r3, #28]
 8009fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	f023 0303 	bic.w	r3, r3, #3
 8009ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	68fa      	ldr	r2, [r7, #12]
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a004:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	689b      	ldr	r3, [r3, #8]
 800a00a:	021b      	lsls	r3, r3, #8
 800a00c:	697a      	ldr	r2, [r7, #20]
 800a00e:	4313      	orrs	r3, r2
 800a010:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	4a21      	ldr	r2, [pc, #132]	; (800a09c <TIM_OC3_SetConfig+0xe0>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d003      	beq.n	800a022 <TIM_OC3_SetConfig+0x66>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	4a20      	ldr	r2, [pc, #128]	; (800a0a0 <TIM_OC3_SetConfig+0xe4>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d10d      	bne.n	800a03e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a028:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	68db      	ldr	r3, [r3, #12]
 800a02e:	021b      	lsls	r3, r3, #8
 800a030:	697a      	ldr	r2, [r7, #20]
 800a032:	4313      	orrs	r3, r2
 800a034:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a03c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	4a16      	ldr	r2, [pc, #88]	; (800a09c <TIM_OC3_SetConfig+0xe0>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d003      	beq.n	800a04e <TIM_OC3_SetConfig+0x92>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	4a15      	ldr	r2, [pc, #84]	; (800a0a0 <TIM_OC3_SetConfig+0xe4>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d113      	bne.n	800a076 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a054:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a05c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	695b      	ldr	r3, [r3, #20]
 800a062:	011b      	lsls	r3, r3, #4
 800a064:	693a      	ldr	r2, [r7, #16]
 800a066:	4313      	orrs	r3, r2
 800a068:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	699b      	ldr	r3, [r3, #24]
 800a06e:	011b      	lsls	r3, r3, #4
 800a070:	693a      	ldr	r2, [r7, #16]
 800a072:	4313      	orrs	r3, r2
 800a074:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	693a      	ldr	r2, [r7, #16]
 800a07a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	68fa      	ldr	r2, [r7, #12]
 800a080:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	685a      	ldr	r2, [r3, #4]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	697a      	ldr	r2, [r7, #20]
 800a08e:	621a      	str	r2, [r3, #32]
}
 800a090:	bf00      	nop
 800a092:	371c      	adds	r7, #28
 800a094:	46bd      	mov	sp, r7
 800a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09a:	4770      	bx	lr
 800a09c:	40010000 	.word	0x40010000
 800a0a0:	40010400 	.word	0x40010400

0800a0a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b087      	sub	sp, #28
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6a1b      	ldr	r3, [r3, #32]
 800a0b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6a1b      	ldr	r3, [r3, #32]
 800a0be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	69db      	ldr	r3, [r3, #28]
 800a0ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	021b      	lsls	r3, r3, #8
 800a0e2:	68fa      	ldr	r2, [r7, #12]
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a0ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	689b      	ldr	r3, [r3, #8]
 800a0f4:	031b      	lsls	r3, r3, #12
 800a0f6:	693a      	ldr	r2, [r7, #16]
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	4a12      	ldr	r2, [pc, #72]	; (800a148 <TIM_OC4_SetConfig+0xa4>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d003      	beq.n	800a10c <TIM_OC4_SetConfig+0x68>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	4a11      	ldr	r2, [pc, #68]	; (800a14c <TIM_OC4_SetConfig+0xa8>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d109      	bne.n	800a120 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a112:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	695b      	ldr	r3, [r3, #20]
 800a118:	019b      	lsls	r3, r3, #6
 800a11a:	697a      	ldr	r2, [r7, #20]
 800a11c:	4313      	orrs	r3, r2
 800a11e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	697a      	ldr	r2, [r7, #20]
 800a124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	68fa      	ldr	r2, [r7, #12]
 800a12a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	685a      	ldr	r2, [r3, #4]
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	693a      	ldr	r2, [r7, #16]
 800a138:	621a      	str	r2, [r3, #32]
}
 800a13a:	bf00      	nop
 800a13c:	371c      	adds	r7, #28
 800a13e:	46bd      	mov	sp, r7
 800a140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a144:	4770      	bx	lr
 800a146:	bf00      	nop
 800a148:	40010000 	.word	0x40010000
 800a14c:	40010400 	.word	0x40010400

0800a150 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a150:	b480      	push	{r7}
 800a152:	b087      	sub	sp, #28
 800a154:	af00      	add	r7, sp, #0
 800a156:	60f8      	str	r0, [r7, #12]
 800a158:	60b9      	str	r1, [r7, #8]
 800a15a:	607a      	str	r2, [r7, #4]
 800a15c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	6a1b      	ldr	r3, [r3, #32]
 800a162:	f023 0201 	bic.w	r2, r3, #1
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	699b      	ldr	r3, [r3, #24]
 800a16e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	6a1b      	ldr	r3, [r3, #32]
 800a174:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	4a28      	ldr	r2, [pc, #160]	; (800a21c <TIM_TI1_SetConfig+0xcc>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d01b      	beq.n	800a1b6 <TIM_TI1_SetConfig+0x66>
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a184:	d017      	beq.n	800a1b6 <TIM_TI1_SetConfig+0x66>
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	4a25      	ldr	r2, [pc, #148]	; (800a220 <TIM_TI1_SetConfig+0xd0>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d013      	beq.n	800a1b6 <TIM_TI1_SetConfig+0x66>
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	4a24      	ldr	r2, [pc, #144]	; (800a224 <TIM_TI1_SetConfig+0xd4>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d00f      	beq.n	800a1b6 <TIM_TI1_SetConfig+0x66>
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	4a23      	ldr	r2, [pc, #140]	; (800a228 <TIM_TI1_SetConfig+0xd8>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d00b      	beq.n	800a1b6 <TIM_TI1_SetConfig+0x66>
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	4a22      	ldr	r2, [pc, #136]	; (800a22c <TIM_TI1_SetConfig+0xdc>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d007      	beq.n	800a1b6 <TIM_TI1_SetConfig+0x66>
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	4a21      	ldr	r2, [pc, #132]	; (800a230 <TIM_TI1_SetConfig+0xe0>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d003      	beq.n	800a1b6 <TIM_TI1_SetConfig+0x66>
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	4a20      	ldr	r2, [pc, #128]	; (800a234 <TIM_TI1_SetConfig+0xe4>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d101      	bne.n	800a1ba <TIM_TI1_SetConfig+0x6a>
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	e000      	b.n	800a1bc <TIM_TI1_SetConfig+0x6c>
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d008      	beq.n	800a1d2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	f023 0303 	bic.w	r3, r3, #3
 800a1c6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a1c8:	697a      	ldr	r2, [r7, #20]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	617b      	str	r3, [r7, #20]
 800a1d0:	e003      	b.n	800a1da <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	f043 0301 	orr.w	r3, r3, #1
 800a1d8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a1e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	011b      	lsls	r3, r3, #4
 800a1e6:	b2db      	uxtb	r3, r3
 800a1e8:	697a      	ldr	r2, [r7, #20]
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	f023 030a 	bic.w	r3, r3, #10
 800a1f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	f003 030a 	and.w	r3, r3, #10
 800a1fc:	693a      	ldr	r2, [r7, #16]
 800a1fe:	4313      	orrs	r3, r2
 800a200:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	697a      	ldr	r2, [r7, #20]
 800a206:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	693a      	ldr	r2, [r7, #16]
 800a20c:	621a      	str	r2, [r3, #32]
}
 800a20e:	bf00      	nop
 800a210:	371c      	adds	r7, #28
 800a212:	46bd      	mov	sp, r7
 800a214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a218:	4770      	bx	lr
 800a21a:	bf00      	nop
 800a21c:	40010000 	.word	0x40010000
 800a220:	40000400 	.word	0x40000400
 800a224:	40000800 	.word	0x40000800
 800a228:	40000c00 	.word	0x40000c00
 800a22c:	40010400 	.word	0x40010400
 800a230:	40014000 	.word	0x40014000
 800a234:	40001800 	.word	0x40001800

0800a238 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a238:	b480      	push	{r7}
 800a23a:	b087      	sub	sp, #28
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	60b9      	str	r1, [r7, #8]
 800a242:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	6a1b      	ldr	r3, [r3, #32]
 800a248:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	6a1b      	ldr	r3, [r3, #32]
 800a24e:	f023 0201 	bic.w	r2, r3, #1
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	699b      	ldr	r3, [r3, #24]
 800a25a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a262:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	011b      	lsls	r3, r3, #4
 800a268:	693a      	ldr	r2, [r7, #16]
 800a26a:	4313      	orrs	r3, r2
 800a26c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	f023 030a 	bic.w	r3, r3, #10
 800a274:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a276:	697a      	ldr	r2, [r7, #20]
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	4313      	orrs	r3, r2
 800a27c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	693a      	ldr	r2, [r7, #16]
 800a282:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	697a      	ldr	r2, [r7, #20]
 800a288:	621a      	str	r2, [r3, #32]
}
 800a28a:	bf00      	nop
 800a28c:	371c      	adds	r7, #28
 800a28e:	46bd      	mov	sp, r7
 800a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a294:	4770      	bx	lr

0800a296 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a296:	b480      	push	{r7}
 800a298:	b087      	sub	sp, #28
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	60f8      	str	r0, [r7, #12]
 800a29e:	60b9      	str	r1, [r7, #8]
 800a2a0:	607a      	str	r2, [r7, #4]
 800a2a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	6a1b      	ldr	r3, [r3, #32]
 800a2a8:	f023 0210 	bic.w	r2, r3, #16
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	699b      	ldr	r3, [r3, #24]
 800a2b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	6a1b      	ldr	r3, [r3, #32]
 800a2ba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	021b      	lsls	r3, r3, #8
 800a2c8:	697a      	ldr	r2, [r7, #20]
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a2d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	031b      	lsls	r3, r3, #12
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	697a      	ldr	r2, [r7, #20]
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a2e8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	011b      	lsls	r3, r3, #4
 800a2ee:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a2f2:	693a      	ldr	r2, [r7, #16]
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	697a      	ldr	r2, [r7, #20]
 800a2fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	693a      	ldr	r2, [r7, #16]
 800a302:	621a      	str	r2, [r3, #32]
}
 800a304:	bf00      	nop
 800a306:	371c      	adds	r7, #28
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr

0800a310 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a310:	b480      	push	{r7}
 800a312:	b087      	sub	sp, #28
 800a314:	af00      	add	r7, sp, #0
 800a316:	60f8      	str	r0, [r7, #12]
 800a318:	60b9      	str	r1, [r7, #8]
 800a31a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	6a1b      	ldr	r3, [r3, #32]
 800a320:	f023 0210 	bic.w	r2, r3, #16
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	699b      	ldr	r3, [r3, #24]
 800a32c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	6a1b      	ldr	r3, [r3, #32]
 800a332:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a33a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	031b      	lsls	r3, r3, #12
 800a340:	697a      	ldr	r2, [r7, #20]
 800a342:	4313      	orrs	r3, r2
 800a344:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a34c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	011b      	lsls	r3, r3, #4
 800a352:	693a      	ldr	r2, [r7, #16]
 800a354:	4313      	orrs	r3, r2
 800a356:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	697a      	ldr	r2, [r7, #20]
 800a35c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	693a      	ldr	r2, [r7, #16]
 800a362:	621a      	str	r2, [r3, #32]
}
 800a364:	bf00      	nop
 800a366:	371c      	adds	r7, #28
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr

0800a370 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a370:	b480      	push	{r7}
 800a372:	b087      	sub	sp, #28
 800a374:	af00      	add	r7, sp, #0
 800a376:	60f8      	str	r0, [r7, #12]
 800a378:	60b9      	str	r1, [r7, #8]
 800a37a:	607a      	str	r2, [r7, #4]
 800a37c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	6a1b      	ldr	r3, [r3, #32]
 800a382:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	69db      	ldr	r3, [r3, #28]
 800a38e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	6a1b      	ldr	r3, [r3, #32]
 800a394:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	f023 0303 	bic.w	r3, r3, #3
 800a39c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a39e:	697a      	ldr	r2, [r7, #20]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a3ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	011b      	lsls	r3, r3, #4
 800a3b2:	b2db      	uxtb	r3, r3
 800a3b4:	697a      	ldr	r2, [r7, #20]
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a3c0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	021b      	lsls	r3, r3, #8
 800a3c6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a3ca:	693a      	ldr	r2, [r7, #16]
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	697a      	ldr	r2, [r7, #20]
 800a3d4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	693a      	ldr	r2, [r7, #16]
 800a3da:	621a      	str	r2, [r3, #32]
}
 800a3dc:	bf00      	nop
 800a3de:	371c      	adds	r7, #28
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr

0800a3e8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b087      	sub	sp, #28
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	60f8      	str	r0, [r7, #12]
 800a3f0:	60b9      	str	r1, [r7, #8]
 800a3f2:	607a      	str	r2, [r7, #4]
 800a3f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	6a1b      	ldr	r3, [r3, #32]
 800a3fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	69db      	ldr	r3, [r3, #28]
 800a406:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	6a1b      	ldr	r3, [r3, #32]
 800a40c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a414:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	021b      	lsls	r3, r3, #8
 800a41a:	697a      	ldr	r2, [r7, #20]
 800a41c:	4313      	orrs	r3, r2
 800a41e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a426:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	031b      	lsls	r3, r3, #12
 800a42c:	b29b      	uxth	r3, r3
 800a42e:	697a      	ldr	r2, [r7, #20]
 800a430:	4313      	orrs	r3, r2
 800a432:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a43a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	031b      	lsls	r3, r3, #12
 800a440:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a444:	693a      	ldr	r2, [r7, #16]
 800a446:	4313      	orrs	r3, r2
 800a448:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	697a      	ldr	r2, [r7, #20]
 800a44e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	693a      	ldr	r2, [r7, #16]
 800a454:	621a      	str	r2, [r3, #32]
}
 800a456:	bf00      	nop
 800a458:	371c      	adds	r7, #28
 800a45a:	46bd      	mov	sp, r7
 800a45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a460:	4770      	bx	lr

0800a462 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a462:	b480      	push	{r7}
 800a464:	b085      	sub	sp, #20
 800a466:	af00      	add	r7, sp, #0
 800a468:	6078      	str	r0, [r7, #4]
 800a46a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	689b      	ldr	r3, [r3, #8]
 800a470:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a478:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a47a:	683a      	ldr	r2, [r7, #0]
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	4313      	orrs	r3, r2
 800a480:	f043 0307 	orr.w	r3, r3, #7
 800a484:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	68fa      	ldr	r2, [r7, #12]
 800a48a:	609a      	str	r2, [r3, #8]
}
 800a48c:	bf00      	nop
 800a48e:	3714      	adds	r7, #20
 800a490:	46bd      	mov	sp, r7
 800a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a496:	4770      	bx	lr

0800a498 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a498:	b480      	push	{r7}
 800a49a:	b087      	sub	sp, #28
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	60f8      	str	r0, [r7, #12]
 800a4a0:	60b9      	str	r1, [r7, #8]
 800a4a2:	607a      	str	r2, [r7, #4]
 800a4a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	689b      	ldr	r3, [r3, #8]
 800a4aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a4b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	021a      	lsls	r2, r3, #8
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	431a      	orrs	r2, r3
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	4313      	orrs	r3, r2
 800a4c0:	697a      	ldr	r2, [r7, #20]
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	697a      	ldr	r2, [r7, #20]
 800a4ca:	609a      	str	r2, [r3, #8]
}
 800a4cc:	bf00      	nop
 800a4ce:	371c      	adds	r7, #28
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr

0800a4d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b087      	sub	sp, #28
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	60f8      	str	r0, [r7, #12]
 800a4e0:	60b9      	str	r1, [r7, #8]
 800a4e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	f003 031f 	and.w	r3, r3, #31
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a4f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	6a1a      	ldr	r2, [r3, #32]
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	43db      	mvns	r3, r3
 800a4fa:	401a      	ands	r2, r3
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	6a1a      	ldr	r2, [r3, #32]
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	f003 031f 	and.w	r3, r3, #31
 800a50a:	6879      	ldr	r1, [r7, #4]
 800a50c:	fa01 f303 	lsl.w	r3, r1, r3
 800a510:	431a      	orrs	r2, r3
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	621a      	str	r2, [r3, #32]
}
 800a516:	bf00      	nop
 800a518:	371c      	adds	r7, #28
 800a51a:	46bd      	mov	sp, r7
 800a51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a520:	4770      	bx	lr
	...

0800a524 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a524:	b480      	push	{r7}
 800a526:	b085      	sub	sp, #20
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a534:	2b01      	cmp	r3, #1
 800a536:	d101      	bne.n	800a53c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a538:	2302      	movs	r3, #2
 800a53a:	e05a      	b.n	800a5f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2201      	movs	r2, #1
 800a540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2202      	movs	r2, #2
 800a548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	685b      	ldr	r3, [r3, #4]
 800a552:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	689b      	ldr	r3, [r3, #8]
 800a55a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a562:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	68fa      	ldr	r2, [r7, #12]
 800a56a:	4313      	orrs	r3, r2
 800a56c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	68fa      	ldr	r2, [r7, #12]
 800a574:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	4a21      	ldr	r2, [pc, #132]	; (800a600 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d022      	beq.n	800a5c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a588:	d01d      	beq.n	800a5c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	4a1d      	ldr	r2, [pc, #116]	; (800a604 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d018      	beq.n	800a5c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4a1b      	ldr	r2, [pc, #108]	; (800a608 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d013      	beq.n	800a5c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	4a1a      	ldr	r2, [pc, #104]	; (800a60c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d00e      	beq.n	800a5c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4a18      	ldr	r2, [pc, #96]	; (800a610 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d009      	beq.n	800a5c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	4a17      	ldr	r2, [pc, #92]	; (800a614 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d004      	beq.n	800a5c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	4a15      	ldr	r2, [pc, #84]	; (800a618 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d10c      	bne.n	800a5e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	68ba      	ldr	r2, [r7, #8]
 800a5d4:	4313      	orrs	r3, r2
 800a5d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	68ba      	ldr	r2, [r7, #8]
 800a5de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a5f0:	2300      	movs	r3, #0
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3714      	adds	r7, #20
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fc:	4770      	bx	lr
 800a5fe:	bf00      	nop
 800a600:	40010000 	.word	0x40010000
 800a604:	40000400 	.word	0x40000400
 800a608:	40000800 	.word	0x40000800
 800a60c:	40000c00 	.word	0x40000c00
 800a610:	40010400 	.word	0x40010400
 800a614:	40014000 	.word	0x40014000
 800a618:	40001800 	.word	0x40001800

0800a61c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b085      	sub	sp, #20
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a626:	2300      	movs	r3, #0
 800a628:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a630:	2b01      	cmp	r3, #1
 800a632:	d101      	bne.n	800a638 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a634:	2302      	movs	r3, #2
 800a636:	e03d      	b.n	800a6b4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2201      	movs	r2, #1
 800a63c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	68db      	ldr	r3, [r3, #12]
 800a64a:	4313      	orrs	r3, r2
 800a64c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	689b      	ldr	r3, [r3, #8]
 800a658:	4313      	orrs	r3, r2
 800a65a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	685b      	ldr	r3, [r3, #4]
 800a666:	4313      	orrs	r3, r2
 800a668:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4313      	orrs	r3, r2
 800a676:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	691b      	ldr	r3, [r3, #16]
 800a682:	4313      	orrs	r3, r2
 800a684:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	695b      	ldr	r3, [r3, #20]
 800a690:	4313      	orrs	r3, r2
 800a692:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	69db      	ldr	r3, [r3, #28]
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	68fa      	ldr	r2, [r7, #12]
 800a6a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a6b2:	2300      	movs	r3, #0
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3714      	adds	r7, #20
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr

0800a6c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b083      	sub	sp, #12
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a6c8:	bf00      	nop
 800a6ca:	370c      	adds	r7, #12
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d2:	4770      	bx	lr

0800a6d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b083      	sub	sp, #12
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a6dc:	bf00      	nop
 800a6de:	370c      	adds	r7, #12
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e6:	4770      	bx	lr

0800a6e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b082      	sub	sp, #8
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d101      	bne.n	800a6fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	e03f      	b.n	800a77a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a700:	b2db      	uxtb	r3, r3
 800a702:	2b00      	cmp	r3, #0
 800a704:	d106      	bne.n	800a714 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2200      	movs	r2, #0
 800a70a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f7fc fa68 	bl	8006be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2224      	movs	r2, #36	; 0x24
 800a718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	68da      	ldr	r2, [r3, #12]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a72a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f001 f8a9 	bl	800b884 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	691a      	ldr	r2, [r3, #16]
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a740:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	695a      	ldr	r2, [r3, #20]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a750:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	68da      	ldr	r2, [r3, #12]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a760:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2200      	movs	r2, #0
 800a766:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2220      	movs	r2, #32
 800a76c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2220      	movs	r2, #32
 800a774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a778:	2300      	movs	r3, #0
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3708      	adds	r7, #8
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}

0800a782 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a782:	b580      	push	{r7, lr}
 800a784:	b08a      	sub	sp, #40	; 0x28
 800a786:	af02      	add	r7, sp, #8
 800a788:	60f8      	str	r0, [r7, #12]
 800a78a:	60b9      	str	r1, [r7, #8]
 800a78c:	603b      	str	r3, [r7, #0]
 800a78e:	4613      	mov	r3, r2
 800a790:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a792:	2300      	movs	r3, #0
 800a794:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a79c:	b2db      	uxtb	r3, r3
 800a79e:	2b20      	cmp	r3, #32
 800a7a0:	d17c      	bne.n	800a89c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d002      	beq.n	800a7ae <HAL_UART_Transmit+0x2c>
 800a7a8:	88fb      	ldrh	r3, [r7, #6]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d101      	bne.n	800a7b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	e075      	b.n	800a89e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	d101      	bne.n	800a7c0 <HAL_UART_Transmit+0x3e>
 800a7bc:	2302      	movs	r3, #2
 800a7be:	e06e      	b.n	800a89e <HAL_UART_Transmit+0x11c>
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	2221      	movs	r2, #33	; 0x21
 800a7d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a7d6:	f7fc fff9 	bl	80077cc <HAL_GetTick>
 800a7da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	88fa      	ldrh	r2, [r7, #6]
 800a7e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	88fa      	ldrh	r2, [r7, #6]
 800a7e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	689b      	ldr	r3, [r3, #8]
 800a7ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7f0:	d108      	bne.n	800a804 <HAL_UART_Transmit+0x82>
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	691b      	ldr	r3, [r3, #16]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d104      	bne.n	800a804 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	61bb      	str	r3, [r7, #24]
 800a802:	e003      	b.n	800a80c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a808:	2300      	movs	r3, #0
 800a80a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	2200      	movs	r2, #0
 800a810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a814:	e02a      	b.n	800a86c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	9300      	str	r3, [sp, #0]
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	2200      	movs	r2, #0
 800a81e:	2180      	movs	r1, #128	; 0x80
 800a820:	68f8      	ldr	r0, [r7, #12]
 800a822:	f000 fd2a 	bl	800b27a <UART_WaitOnFlagUntilTimeout>
 800a826:	4603      	mov	r3, r0
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d001      	beq.n	800a830 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a82c:	2303      	movs	r3, #3
 800a82e:	e036      	b.n	800a89e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a830:	69fb      	ldr	r3, [r7, #28]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d10b      	bne.n	800a84e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a836:	69bb      	ldr	r3, [r7, #24]
 800a838:	881b      	ldrh	r3, [r3, #0]
 800a83a:	461a      	mov	r2, r3
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a844:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a846:	69bb      	ldr	r3, [r7, #24]
 800a848:	3302      	adds	r3, #2
 800a84a:	61bb      	str	r3, [r7, #24]
 800a84c:	e007      	b.n	800a85e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a84e:	69fb      	ldr	r3, [r7, #28]
 800a850:	781a      	ldrb	r2, [r3, #0]
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a858:	69fb      	ldr	r3, [r7, #28]
 800a85a:	3301      	adds	r3, #1
 800a85c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a862:	b29b      	uxth	r3, r3
 800a864:	3b01      	subs	r3, #1
 800a866:	b29a      	uxth	r2, r3
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a870:	b29b      	uxth	r3, r3
 800a872:	2b00      	cmp	r3, #0
 800a874:	d1cf      	bne.n	800a816 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	9300      	str	r3, [sp, #0]
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	2200      	movs	r2, #0
 800a87e:	2140      	movs	r1, #64	; 0x40
 800a880:	68f8      	ldr	r0, [r7, #12]
 800a882:	f000 fcfa 	bl	800b27a <UART_WaitOnFlagUntilTimeout>
 800a886:	4603      	mov	r3, r0
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d001      	beq.n	800a890 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a88c:	2303      	movs	r3, #3
 800a88e:	e006      	b.n	800a89e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	2220      	movs	r2, #32
 800a894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a898:	2300      	movs	r3, #0
 800a89a:	e000      	b.n	800a89e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a89c:	2302      	movs	r3, #2
  }
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3720      	adds	r7, #32
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}

0800a8a6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a8a6:	b580      	push	{r7, lr}
 800a8a8:	b084      	sub	sp, #16
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	60f8      	str	r0, [r7, #12]
 800a8ae:	60b9      	str	r1, [r7, #8]
 800a8b0:	4613      	mov	r3, r2
 800a8b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a8ba:	b2db      	uxtb	r3, r3
 800a8bc:	2b20      	cmp	r3, #32
 800a8be:	d11d      	bne.n	800a8fc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d002      	beq.n	800a8cc <HAL_UART_Receive_IT+0x26>
 800a8c6:	88fb      	ldrh	r3, [r7, #6]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d101      	bne.n	800a8d0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	e016      	b.n	800a8fe <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8d6:	2b01      	cmp	r3, #1
 800a8d8:	d101      	bne.n	800a8de <HAL_UART_Receive_IT+0x38>
 800a8da:	2302      	movs	r3, #2
 800a8dc:	e00f      	b.n	800a8fe <HAL_UART_Receive_IT+0x58>
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a8ec:	88fb      	ldrh	r3, [r7, #6]
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	68b9      	ldr	r1, [r7, #8]
 800a8f2:	68f8      	ldr	r0, [r7, #12]
 800a8f4:	f000 fd2f 	bl	800b356 <UART_Start_Receive_IT>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	e000      	b.n	800a8fe <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a8fc:	2302      	movs	r3, #2
  }
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3710      	adds	r7, #16
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}
	...

0800a908 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b08c      	sub	sp, #48	; 0x30
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	60f8      	str	r0, [r7, #12]
 800a910:	60b9      	str	r1, [r7, #8]
 800a912:	4613      	mov	r3, r2
 800a914:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a91c:	b2db      	uxtb	r3, r3
 800a91e:	2b20      	cmp	r3, #32
 800a920:	d165      	bne.n	800a9ee <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d002      	beq.n	800a92e <HAL_UART_Transmit_DMA+0x26>
 800a928:	88fb      	ldrh	r3, [r7, #6]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d101      	bne.n	800a932 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a92e:	2301      	movs	r3, #1
 800a930:	e05e      	b.n	800a9f0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a938:	2b01      	cmp	r3, #1
 800a93a:	d101      	bne.n	800a940 <HAL_UART_Transmit_DMA+0x38>
 800a93c:	2302      	movs	r3, #2
 800a93e:	e057      	b.n	800a9f0 <HAL_UART_Transmit_DMA+0xe8>
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	2201      	movs	r2, #1
 800a944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a948:	68ba      	ldr	r2, [r7, #8]
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	88fa      	ldrh	r2, [r7, #6]
 800a952:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	88fa      	ldrh	r2, [r7, #6]
 800a958:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2200      	movs	r2, #0
 800a95e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	2221      	movs	r2, #33	; 0x21
 800a964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a96c:	4a22      	ldr	r2, [pc, #136]	; (800a9f8 <HAL_UART_Transmit_DMA+0xf0>)
 800a96e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a974:	4a21      	ldr	r2, [pc, #132]	; (800a9fc <HAL_UART_Transmit_DMA+0xf4>)
 800a976:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a97c:	4a20      	ldr	r2, [pc, #128]	; (800aa00 <HAL_UART_Transmit_DMA+0xf8>)
 800a97e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a984:	2200      	movs	r2, #0
 800a986:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800a988:	f107 0308 	add.w	r3, r7, #8
 800a98c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a994:	6819      	ldr	r1, [r3, #0]
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	3304      	adds	r3, #4
 800a99c:	461a      	mov	r2, r3
 800a99e:	88fb      	ldrh	r3, [r7, #6]
 800a9a0:	f7fd f8e0 	bl	8007b64 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a9ac:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	3314      	adds	r3, #20
 800a9bc:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9be:	69bb      	ldr	r3, [r7, #24]
 800a9c0:	e853 3f00 	ldrex	r3, [r3]
 800a9c4:	617b      	str	r3, [r7, #20]
   return(result);
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9cc:	62bb      	str	r3, [r7, #40]	; 0x28
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	3314      	adds	r3, #20
 800a9d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9d6:	627a      	str	r2, [r7, #36]	; 0x24
 800a9d8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9da:	6a39      	ldr	r1, [r7, #32]
 800a9dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9de:	e841 2300 	strex	r3, r2, [r1]
 800a9e2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a9e4:	69fb      	ldr	r3, [r7, #28]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d1e5      	bne.n	800a9b6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	e000      	b.n	800a9f0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800a9ee:	2302      	movs	r3, #2
  }
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3730      	adds	r7, #48	; 0x30
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}
 800a9f8:	0800afd5 	.word	0x0800afd5
 800a9fc:	0800b06f 	.word	0x0800b06f
 800aa00:	0800b1e7 	.word	0x0800b1e7

0800aa04 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b084      	sub	sp, #16
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	60f8      	str	r0, [r7, #12]
 800aa0c:	60b9      	str	r1, [r7, #8]
 800aa0e:	4613      	mov	r3, r2
 800aa10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	2b20      	cmp	r3, #32
 800aa1c:	d11d      	bne.n	800aa5a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d002      	beq.n	800aa2a <HAL_UART_Receive_DMA+0x26>
 800aa24:	88fb      	ldrh	r3, [r7, #6]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d101      	bne.n	800aa2e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	e016      	b.n	800aa5c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	d101      	bne.n	800aa3c <HAL_UART_Receive_DMA+0x38>
 800aa38:	2302      	movs	r3, #2
 800aa3a:	e00f      	b.n	800aa5c <HAL_UART_Receive_DMA+0x58>
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2201      	movs	r2, #1
 800aa40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	2200      	movs	r2, #0
 800aa48:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800aa4a:	88fb      	ldrh	r3, [r7, #6]
 800aa4c:	461a      	mov	r2, r3
 800aa4e:	68b9      	ldr	r1, [r7, #8]
 800aa50:	68f8      	ldr	r0, [r7, #12]
 800aa52:	f000 fcbb 	bl	800b3cc <UART_Start_Receive_DMA>
 800aa56:	4603      	mov	r3, r0
 800aa58:	e000      	b.n	800aa5c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800aa5a:	2302      	movs	r3, #2
  }
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3710      	adds	r7, #16
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}

0800aa64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b0ba      	sub	sp, #232	; 0xe8
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	68db      	ldr	r3, [r3, #12]
 800aa7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	695b      	ldr	r3, [r3, #20]
 800aa86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800aa90:	2300      	movs	r3, #0
 800aa92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800aa96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa9a:	f003 030f 	and.w	r3, r3, #15
 800aa9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800aaa2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d10f      	bne.n	800aaca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800aaaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aaae:	f003 0320 	and.w	r3, r3, #32
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d009      	beq.n	800aaca <HAL_UART_IRQHandler+0x66>
 800aab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aaba:	f003 0320 	and.w	r3, r3, #32
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d003      	beq.n	800aaca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f000 fe23 	bl	800b70e <UART_Receive_IT>
      return;
 800aac8:	e256      	b.n	800af78 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800aaca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aace:	2b00      	cmp	r3, #0
 800aad0:	f000 80de 	beq.w	800ac90 <HAL_UART_IRQHandler+0x22c>
 800aad4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aad8:	f003 0301 	and.w	r3, r3, #1
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d106      	bne.n	800aaee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800aae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aae4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	f000 80d1 	beq.w	800ac90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800aaee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aaf2:	f003 0301 	and.w	r3, r3, #1
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d00b      	beq.n	800ab12 <HAL_UART_IRQHandler+0xae>
 800aafa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aafe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d005      	beq.n	800ab12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab0a:	f043 0201 	orr.w	r2, r3, #1
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ab12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab16:	f003 0304 	and.w	r3, r3, #4
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d00b      	beq.n	800ab36 <HAL_UART_IRQHandler+0xd2>
 800ab1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab22:	f003 0301 	and.w	r3, r3, #1
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d005      	beq.n	800ab36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab2e:	f043 0202 	orr.w	r2, r3, #2
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ab36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab3a:	f003 0302 	and.w	r3, r3, #2
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d00b      	beq.n	800ab5a <HAL_UART_IRQHandler+0xf6>
 800ab42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab46:	f003 0301 	and.w	r3, r3, #1
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d005      	beq.n	800ab5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab52:	f043 0204 	orr.w	r2, r3, #4
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ab5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab5e:	f003 0308 	and.w	r3, r3, #8
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d011      	beq.n	800ab8a <HAL_UART_IRQHandler+0x126>
 800ab66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab6a:	f003 0320 	and.w	r3, r3, #32
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d105      	bne.n	800ab7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ab72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab76:	f003 0301 	and.w	r3, r3, #1
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d005      	beq.n	800ab8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab82:	f043 0208 	orr.w	r2, r3, #8
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	f000 81ed 	beq.w	800af6e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ab94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab98:	f003 0320 	and.w	r3, r3, #32
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d008      	beq.n	800abb2 <HAL_UART_IRQHandler+0x14e>
 800aba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aba4:	f003 0320 	and.w	r3, r3, #32
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d002      	beq.n	800abb2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f000 fdae 	bl	800b70e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	695b      	ldr	r3, [r3, #20]
 800abb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abbc:	2b40      	cmp	r3, #64	; 0x40
 800abbe:	bf0c      	ite	eq
 800abc0:	2301      	moveq	r3, #1
 800abc2:	2300      	movne	r3, #0
 800abc4:	b2db      	uxtb	r3, r3
 800abc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abce:	f003 0308 	and.w	r3, r3, #8
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d103      	bne.n	800abde <HAL_UART_IRQHandler+0x17a>
 800abd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d04f      	beq.n	800ac7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f000 fcb6 	bl	800b550 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	695b      	ldr	r3, [r3, #20]
 800abea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abee:	2b40      	cmp	r3, #64	; 0x40
 800abf0:	d141      	bne.n	800ac76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	3314      	adds	r3, #20
 800abf8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ac00:	e853 3f00 	ldrex	r3, [r3]
 800ac04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ac08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ac0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	3314      	adds	r3, #20
 800ac1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ac1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ac22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ac2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ac2e:	e841 2300 	strex	r3, r2, [r1]
 800ac32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ac36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d1d9      	bne.n	800abf2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d013      	beq.n	800ac6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac4a:	4a7d      	ldr	r2, [pc, #500]	; (800ae40 <HAL_UART_IRQHandler+0x3dc>)
 800ac4c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac52:	4618      	mov	r0, r3
 800ac54:	f7fd f84e 	bl	8007cf4 <HAL_DMA_Abort_IT>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d016      	beq.n	800ac8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac64:	687a      	ldr	r2, [r7, #4]
 800ac66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ac68:	4610      	mov	r0, r2
 800ac6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac6c:	e00e      	b.n	800ac8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f000 f99a 	bl	800afa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac74:	e00a      	b.n	800ac8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f000 f996 	bl	800afa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac7c:	e006      	b.n	800ac8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f000 f992 	bl	800afa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2200      	movs	r2, #0
 800ac88:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800ac8a:	e170      	b.n	800af6e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac8c:	bf00      	nop
    return;
 800ac8e:	e16e      	b.n	800af6e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac94:	2b01      	cmp	r3, #1
 800ac96:	f040 814a 	bne.w	800af2e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ac9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac9e:	f003 0310 	and.w	r3, r3, #16
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	f000 8143 	beq.w	800af2e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800aca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acac:	f003 0310 	and.w	r3, r3, #16
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	f000 813c 	beq.w	800af2e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800acb6:	2300      	movs	r3, #0
 800acb8:	60bb      	str	r3, [r7, #8]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	60bb      	str	r3, [r7, #8]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	685b      	ldr	r3, [r3, #4]
 800acc8:	60bb      	str	r3, [r7, #8]
 800acca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	695b      	ldr	r3, [r3, #20]
 800acd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acd6:	2b40      	cmp	r3, #64	; 0x40
 800acd8:	f040 80b4 	bne.w	800ae44 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ace8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800acec:	2b00      	cmp	r3, #0
 800acee:	f000 8140 	beq.w	800af72 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800acf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800acfa:	429a      	cmp	r2, r3
 800acfc:	f080 8139 	bcs.w	800af72 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ad06:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad0c:	69db      	ldr	r3, [r3, #28]
 800ad0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad12:	f000 8088 	beq.w	800ae26 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	330c      	adds	r3, #12
 800ad1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ad24:	e853 3f00 	ldrex	r3, [r3]
 800ad28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ad2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ad30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	330c      	adds	r3, #12
 800ad3e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ad42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ad46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ad4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ad52:	e841 2300 	strex	r3, r2, [r1]
 800ad56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ad5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d1d9      	bne.n	800ad16 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	3314      	adds	r3, #20
 800ad68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad6c:	e853 3f00 	ldrex	r3, [r3]
 800ad70:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ad72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ad74:	f023 0301 	bic.w	r3, r3, #1
 800ad78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	3314      	adds	r3, #20
 800ad82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ad86:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ad8a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad8c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ad8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ad92:	e841 2300 	strex	r3, r2, [r1]
 800ad96:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ad98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d1e1      	bne.n	800ad62 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	3314      	adds	r3, #20
 800ada4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ada6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ada8:	e853 3f00 	ldrex	r3, [r3]
 800adac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800adae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800adb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800adb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	3314      	adds	r3, #20
 800adbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800adc2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800adc4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adc6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800adc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800adca:	e841 2300 	strex	r3, r2, [r1]
 800adce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800add0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800add2:	2b00      	cmp	r3, #0
 800add4:	d1e3      	bne.n	800ad9e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2220      	movs	r2, #32
 800adda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2200      	movs	r2, #0
 800ade2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	330c      	adds	r3, #12
 800adea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adee:	e853 3f00 	ldrex	r3, [r3]
 800adf2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800adf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800adf6:	f023 0310 	bic.w	r3, r3, #16
 800adfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	330c      	adds	r3, #12
 800ae04:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ae08:	65ba      	str	r2, [r7, #88]	; 0x58
 800ae0a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ae0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ae10:	e841 2300 	strex	r3, r2, [r1]
 800ae14:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ae16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d1e3      	bne.n	800ade4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae20:	4618      	mov	r0, r3
 800ae22:	f7fc fef7 	bl	8007c14 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ae2e:	b29b      	uxth	r3, r3
 800ae30:	1ad3      	subs	r3, r2, r3
 800ae32:	b29b      	uxth	r3, r3
 800ae34:	4619      	mov	r1, r3
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f000 f8c0 	bl	800afbc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ae3c:	e099      	b.n	800af72 <HAL_UART_IRQHandler+0x50e>
 800ae3e:	bf00      	nop
 800ae40:	0800b617 	.word	0x0800b617
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ae4c:	b29b      	uxth	r3, r3
 800ae4e:	1ad3      	subs	r3, r2, r3
 800ae50:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ae58:	b29b      	uxth	r3, r3
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	f000 808b 	beq.w	800af76 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800ae60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	f000 8086 	beq.w	800af76 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	330c      	adds	r3, #12
 800ae70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae74:	e853 3f00 	ldrex	r3, [r3]
 800ae78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ae7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ae80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	330c      	adds	r3, #12
 800ae8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ae8e:	647a      	str	r2, [r7, #68]	; 0x44
 800ae90:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ae94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae96:	e841 2300 	strex	r3, r2, [r1]
 800ae9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ae9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d1e3      	bne.n	800ae6a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	3314      	adds	r3, #20
 800aea8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeac:	e853 3f00 	ldrex	r3, [r3]
 800aeb0:	623b      	str	r3, [r7, #32]
   return(result);
 800aeb2:	6a3b      	ldr	r3, [r7, #32]
 800aeb4:	f023 0301 	bic.w	r3, r3, #1
 800aeb8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	3314      	adds	r3, #20
 800aec2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800aec6:	633a      	str	r2, [r7, #48]	; 0x30
 800aec8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aece:	e841 2300 	strex	r3, r2, [r1]
 800aed2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d1e3      	bne.n	800aea2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2220      	movs	r2, #32
 800aede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2200      	movs	r2, #0
 800aee6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	330c      	adds	r3, #12
 800aeee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	e853 3f00 	ldrex	r3, [r3]
 800aef6:	60fb      	str	r3, [r7, #12]
   return(result);
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	f023 0310 	bic.w	r3, r3, #16
 800aefe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	330c      	adds	r3, #12
 800af08:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800af0c:	61fa      	str	r2, [r7, #28]
 800af0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af10:	69b9      	ldr	r1, [r7, #24]
 800af12:	69fa      	ldr	r2, [r7, #28]
 800af14:	e841 2300 	strex	r3, r2, [r1]
 800af18:	617b      	str	r3, [r7, #20]
   return(result);
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d1e3      	bne.n	800aee8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800af20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800af24:	4619      	mov	r1, r3
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f000 f848 	bl	800afbc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800af2c:	e023      	b.n	800af76 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800af2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af36:	2b00      	cmp	r3, #0
 800af38:	d009      	beq.n	800af4e <HAL_UART_IRQHandler+0x4ea>
 800af3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af42:	2b00      	cmp	r3, #0
 800af44:	d003      	beq.n	800af4e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 fb79 	bl	800b63e <UART_Transmit_IT>
    return;
 800af4c:	e014      	b.n	800af78 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800af4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af56:	2b00      	cmp	r3, #0
 800af58:	d00e      	beq.n	800af78 <HAL_UART_IRQHandler+0x514>
 800af5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af62:	2b00      	cmp	r3, #0
 800af64:	d008      	beq.n	800af78 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f000 fbb9 	bl	800b6de <UART_EndTransmit_IT>
    return;
 800af6c:	e004      	b.n	800af78 <HAL_UART_IRQHandler+0x514>
    return;
 800af6e:	bf00      	nop
 800af70:	e002      	b.n	800af78 <HAL_UART_IRQHandler+0x514>
      return;
 800af72:	bf00      	nop
 800af74:	e000      	b.n	800af78 <HAL_UART_IRQHandler+0x514>
      return;
 800af76:	bf00      	nop
  }
}
 800af78:	37e8      	adds	r7, #232	; 0xe8
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}
 800af7e:	bf00      	nop

0800af80 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800af80:	b480      	push	{r7}
 800af82:	b083      	sub	sp, #12
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800af88:	bf00      	nop
 800af8a:	370c      	adds	r7, #12
 800af8c:	46bd      	mov	sp, r7
 800af8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af92:	4770      	bx	lr

0800af94 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800af94:	b480      	push	{r7}
 800af96:	b083      	sub	sp, #12
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800af9c:	bf00      	nop
 800af9e:	370c      	adds	r7, #12
 800afa0:	46bd      	mov	sp, r7
 800afa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa6:	4770      	bx	lr

0800afa8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b083      	sub	sp, #12
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800afb0:	bf00      	nop
 800afb2:	370c      	adds	r7, #12
 800afb4:	46bd      	mov	sp, r7
 800afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afba:	4770      	bx	lr

0800afbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800afbc:	b480      	push	{r7}
 800afbe:	b083      	sub	sp, #12
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
 800afc4:	460b      	mov	r3, r1
 800afc6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800afc8:	bf00      	nop
 800afca:	370c      	adds	r7, #12
 800afcc:	46bd      	mov	sp, r7
 800afce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd2:	4770      	bx	lr

0800afd4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b090      	sub	sp, #64	; 0x40
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afe0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afec:	2b00      	cmp	r3, #0
 800afee:	d137      	bne.n	800b060 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800aff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aff2:	2200      	movs	r2, #0
 800aff4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	3314      	adds	r3, #20
 800affc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800affe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b000:	e853 3f00 	ldrex	r3, [r3]
 800b004:	623b      	str	r3, [r7, #32]
   return(result);
 800b006:	6a3b      	ldr	r3, [r7, #32]
 800b008:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b00c:	63bb      	str	r3, [r7, #56]	; 0x38
 800b00e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	3314      	adds	r3, #20
 800b014:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b016:	633a      	str	r2, [r7, #48]	; 0x30
 800b018:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b01a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b01c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b01e:	e841 2300 	strex	r3, r2, [r1]
 800b022:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b026:	2b00      	cmp	r3, #0
 800b028:	d1e5      	bne.n	800aff6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b02a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	330c      	adds	r3, #12
 800b030:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	e853 3f00 	ldrex	r3, [r3]
 800b038:	60fb      	str	r3, [r7, #12]
   return(result);
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b040:	637b      	str	r3, [r7, #52]	; 0x34
 800b042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	330c      	adds	r3, #12
 800b048:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b04a:	61fa      	str	r2, [r7, #28]
 800b04c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b04e:	69b9      	ldr	r1, [r7, #24]
 800b050:	69fa      	ldr	r2, [r7, #28]
 800b052:	e841 2300 	strex	r3, r2, [r1]
 800b056:	617b      	str	r3, [r7, #20]
   return(result);
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d1e5      	bne.n	800b02a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b05e:	e002      	b.n	800b066 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b060:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b062:	f7fa fab5 	bl	80055d0 <HAL_UART_TxCpltCallback>
}
 800b066:	bf00      	nop
 800b068:	3740      	adds	r7, #64	; 0x40
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}

0800b06e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b06e:	b580      	push	{r7, lr}
 800b070:	b084      	sub	sp, #16
 800b072:	af00      	add	r7, sp, #0
 800b074:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b07a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b07c:	68f8      	ldr	r0, [r7, #12]
 800b07e:	f7ff ff7f 	bl	800af80 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b082:	bf00      	nop
 800b084:	3710      	adds	r7, #16
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}

0800b08a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b08a:	b580      	push	{r7, lr}
 800b08c:	b09c      	sub	sp, #112	; 0x70
 800b08e:	af00      	add	r7, sp, #0
 800b090:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b096:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d172      	bne.n	800b18c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b0a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b0ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	330c      	adds	r3, #12
 800b0b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0b6:	e853 3f00 	ldrex	r3, [r3]
 800b0ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b0bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0c2:	66bb      	str	r3, [r7, #104]	; 0x68
 800b0c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	330c      	adds	r3, #12
 800b0ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b0cc:	65ba      	str	r2, [r7, #88]	; 0x58
 800b0ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b0d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b0d4:	e841 2300 	strex	r3, r2, [r1]
 800b0d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b0da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d1e5      	bne.n	800b0ac <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	3314      	adds	r3, #20
 800b0e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ea:	e853 3f00 	ldrex	r3, [r3]
 800b0ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b0f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0f2:	f023 0301 	bic.w	r3, r3, #1
 800b0f6:	667b      	str	r3, [r7, #100]	; 0x64
 800b0f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	3314      	adds	r3, #20
 800b0fe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b100:	647a      	str	r2, [r7, #68]	; 0x44
 800b102:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b104:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b106:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b108:	e841 2300 	strex	r3, r2, [r1]
 800b10c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b10e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b110:	2b00      	cmp	r3, #0
 800b112:	d1e5      	bne.n	800b0e0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	3314      	adds	r3, #20
 800b11a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b11e:	e853 3f00 	ldrex	r3, [r3]
 800b122:	623b      	str	r3, [r7, #32]
   return(result);
 800b124:	6a3b      	ldr	r3, [r7, #32]
 800b126:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b12a:	663b      	str	r3, [r7, #96]	; 0x60
 800b12c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	3314      	adds	r3, #20
 800b132:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b134:	633a      	str	r2, [r7, #48]	; 0x30
 800b136:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b138:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b13a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b13c:	e841 2300 	strex	r3, r2, [r1]
 800b140:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b144:	2b00      	cmp	r3, #0
 800b146:	d1e5      	bne.n	800b114 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b14a:	2220      	movs	r2, #32
 800b14c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b150:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b154:	2b01      	cmp	r3, #1
 800b156:	d119      	bne.n	800b18c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	330c      	adds	r3, #12
 800b15e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	e853 3f00 	ldrex	r3, [r3]
 800b166:	60fb      	str	r3, [r7, #12]
   return(result);
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	f023 0310 	bic.w	r3, r3, #16
 800b16e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	330c      	adds	r3, #12
 800b176:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b178:	61fa      	str	r2, [r7, #28]
 800b17a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b17c:	69b9      	ldr	r1, [r7, #24]
 800b17e:	69fa      	ldr	r2, [r7, #28]
 800b180:	e841 2300 	strex	r3, r2, [r1]
 800b184:	617b      	str	r3, [r7, #20]
   return(result);
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d1e5      	bne.n	800b158 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b18c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b18e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b190:	2b01      	cmp	r3, #1
 800b192:	d106      	bne.n	800b1a2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b196:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b198:	4619      	mov	r1, r3
 800b19a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b19c:	f7ff ff0e 	bl	800afbc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b1a0:	e002      	b.n	800b1a8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800b1a2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b1a4:	f7fa fa26 	bl	80055f4 <HAL_UART_RxCpltCallback>
}
 800b1a8:	bf00      	nop
 800b1aa:	3770      	adds	r7, #112	; 0x70
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}

0800b1b0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b084      	sub	sp, #16
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1bc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1c2:	2b01      	cmp	r3, #1
 800b1c4:	d108      	bne.n	800b1d8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b1ca:	085b      	lsrs	r3, r3, #1
 800b1cc:	b29b      	uxth	r3, r3
 800b1ce:	4619      	mov	r1, r3
 800b1d0:	68f8      	ldr	r0, [r7, #12]
 800b1d2:	f7ff fef3 	bl	800afbc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b1d6:	e002      	b.n	800b1de <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800b1d8:	68f8      	ldr	r0, [r7, #12]
 800b1da:	f7ff fedb 	bl	800af94 <HAL_UART_RxHalfCpltCallback>
}
 800b1de:	bf00      	nop
 800b1e0:	3710      	adds	r7, #16
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}

0800b1e6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b1e6:	b580      	push	{r7, lr}
 800b1e8:	b084      	sub	sp, #16
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1f6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	695b      	ldr	r3, [r3, #20]
 800b1fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b202:	2b80      	cmp	r3, #128	; 0x80
 800b204:	bf0c      	ite	eq
 800b206:	2301      	moveq	r3, #1
 800b208:	2300      	movne	r3, #0
 800b20a:	b2db      	uxtb	r3, r3
 800b20c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b214:	b2db      	uxtb	r3, r3
 800b216:	2b21      	cmp	r3, #33	; 0x21
 800b218:	d108      	bne.n	800b22c <UART_DMAError+0x46>
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d005      	beq.n	800b22c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	2200      	movs	r2, #0
 800b224:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b226:	68b8      	ldr	r0, [r7, #8]
 800b228:	f000 f96a 	bl	800b500 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	695b      	ldr	r3, [r3, #20]
 800b232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b236:	2b40      	cmp	r3, #64	; 0x40
 800b238:	bf0c      	ite	eq
 800b23a:	2301      	moveq	r3, #1
 800b23c:	2300      	movne	r3, #0
 800b23e:	b2db      	uxtb	r3, r3
 800b240:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b248:	b2db      	uxtb	r3, r3
 800b24a:	2b22      	cmp	r3, #34	; 0x22
 800b24c:	d108      	bne.n	800b260 <UART_DMAError+0x7a>
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d005      	beq.n	800b260 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	2200      	movs	r2, #0
 800b258:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b25a:	68b8      	ldr	r0, [r7, #8]
 800b25c:	f000 f978 	bl	800b550 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b264:	f043 0210 	orr.w	r2, r3, #16
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b26c:	68b8      	ldr	r0, [r7, #8]
 800b26e:	f7ff fe9b 	bl	800afa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b272:	bf00      	nop
 800b274:	3710      	adds	r7, #16
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}

0800b27a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b27a:	b580      	push	{r7, lr}
 800b27c:	b090      	sub	sp, #64	; 0x40
 800b27e:	af00      	add	r7, sp, #0
 800b280:	60f8      	str	r0, [r7, #12]
 800b282:	60b9      	str	r1, [r7, #8]
 800b284:	603b      	str	r3, [r7, #0]
 800b286:	4613      	mov	r3, r2
 800b288:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b28a:	e050      	b.n	800b32e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b28c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b28e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b292:	d04c      	beq.n	800b32e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b296:	2b00      	cmp	r3, #0
 800b298:	d007      	beq.n	800b2aa <UART_WaitOnFlagUntilTimeout+0x30>
 800b29a:	f7fc fa97 	bl	80077cc <HAL_GetTick>
 800b29e:	4602      	mov	r2, r0
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	1ad3      	subs	r3, r2, r3
 800b2a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d241      	bcs.n	800b32e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	330c      	adds	r3, #12
 800b2b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b4:	e853 3f00 	ldrex	r3, [r3]
 800b2b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b2c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	330c      	adds	r3, #12
 800b2c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b2ca:	637a      	str	r2, [r7, #52]	; 0x34
 800b2cc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b2d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b2d2:	e841 2300 	strex	r3, r2, [r1]
 800b2d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d1e5      	bne.n	800b2aa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	3314      	adds	r3, #20
 800b2e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	e853 3f00 	ldrex	r3, [r3]
 800b2ec:	613b      	str	r3, [r7, #16]
   return(result);
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	f023 0301 	bic.w	r3, r3, #1
 800b2f4:	63bb      	str	r3, [r7, #56]	; 0x38
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	3314      	adds	r3, #20
 800b2fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b2fe:	623a      	str	r2, [r7, #32]
 800b300:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b302:	69f9      	ldr	r1, [r7, #28]
 800b304:	6a3a      	ldr	r2, [r7, #32]
 800b306:	e841 2300 	strex	r3, r2, [r1]
 800b30a:	61bb      	str	r3, [r7, #24]
   return(result);
 800b30c:	69bb      	ldr	r3, [r7, #24]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d1e5      	bne.n	800b2de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	2220      	movs	r2, #32
 800b316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	2220      	movs	r2, #32
 800b31e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	2200      	movs	r2, #0
 800b326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b32a:	2303      	movs	r3, #3
 800b32c:	e00f      	b.n	800b34e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	681a      	ldr	r2, [r3, #0]
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	4013      	ands	r3, r2
 800b338:	68ba      	ldr	r2, [r7, #8]
 800b33a:	429a      	cmp	r2, r3
 800b33c:	bf0c      	ite	eq
 800b33e:	2301      	moveq	r3, #1
 800b340:	2300      	movne	r3, #0
 800b342:	b2db      	uxtb	r3, r3
 800b344:	461a      	mov	r2, r3
 800b346:	79fb      	ldrb	r3, [r7, #7]
 800b348:	429a      	cmp	r2, r3
 800b34a:	d09f      	beq.n	800b28c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b34c:	2300      	movs	r3, #0
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3740      	adds	r7, #64	; 0x40
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}

0800b356 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b356:	b480      	push	{r7}
 800b358:	b085      	sub	sp, #20
 800b35a:	af00      	add	r7, sp, #0
 800b35c:	60f8      	str	r0, [r7, #12]
 800b35e:	60b9      	str	r1, [r7, #8]
 800b360:	4613      	mov	r3, r2
 800b362:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	68ba      	ldr	r2, [r7, #8]
 800b368:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	88fa      	ldrh	r2, [r7, #6]
 800b36e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	88fa      	ldrh	r2, [r7, #6]
 800b374:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	2200      	movs	r2, #0
 800b37a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	2222      	movs	r2, #34	; 0x22
 800b380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	2200      	movs	r2, #0
 800b388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	68da      	ldr	r2, [r3, #12]
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b39a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	695a      	ldr	r2, [r3, #20]
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f042 0201 	orr.w	r2, r2, #1
 800b3aa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	68da      	ldr	r2, [r3, #12]
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f042 0220 	orr.w	r2, r2, #32
 800b3ba:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b3bc:	2300      	movs	r3, #0
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3714      	adds	r7, #20
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c8:	4770      	bx	lr
	...

0800b3cc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b098      	sub	sp, #96	; 0x60
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	60f8      	str	r0, [r7, #12]
 800b3d4:	60b9      	str	r1, [r7, #8]
 800b3d6:	4613      	mov	r3, r2
 800b3d8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b3da:	68ba      	ldr	r2, [r7, #8]
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	88fa      	ldrh	r2, [r7, #6]
 800b3e4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	2222      	movs	r2, #34	; 0x22
 800b3f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3f8:	4a3e      	ldr	r2, [pc, #248]	; (800b4f4 <UART_Start_Receive_DMA+0x128>)
 800b3fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b400:	4a3d      	ldr	r2, [pc, #244]	; (800b4f8 <UART_Start_Receive_DMA+0x12c>)
 800b402:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b408:	4a3c      	ldr	r2, [pc, #240]	; (800b4fc <UART_Start_Receive_DMA+0x130>)
 800b40a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b410:	2200      	movs	r2, #0
 800b412:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b414:	f107 0308 	add.w	r3, r7, #8
 800b418:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	3304      	adds	r3, #4
 800b424:	4619      	mov	r1, r3
 800b426:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b428:	681a      	ldr	r2, [r3, #0]
 800b42a:	88fb      	ldrh	r3, [r7, #6]
 800b42c:	f7fc fb9a 	bl	8007b64 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b430:	2300      	movs	r3, #0
 800b432:	613b      	str	r3, [r7, #16]
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	613b      	str	r3, [r7, #16]
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	613b      	str	r3, [r7, #16]
 800b444:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	2200      	movs	r2, #0
 800b44a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	330c      	adds	r3, #12
 800b454:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b458:	e853 3f00 	ldrex	r3, [r3]
 800b45c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b45e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b464:	65bb      	str	r3, [r7, #88]	; 0x58
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	330c      	adds	r3, #12
 800b46c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b46e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b470:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b472:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b474:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b476:	e841 2300 	strex	r3, r2, [r1]
 800b47a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b47c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d1e5      	bne.n	800b44e <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	3314      	adds	r3, #20
 800b488:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b48a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b48c:	e853 3f00 	ldrex	r3, [r3]
 800b490:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b494:	f043 0301 	orr.w	r3, r3, #1
 800b498:	657b      	str	r3, [r7, #84]	; 0x54
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	3314      	adds	r3, #20
 800b4a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b4a2:	63ba      	str	r2, [r7, #56]	; 0x38
 800b4a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b4a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4aa:	e841 2300 	strex	r3, r2, [r1]
 800b4ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b4b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d1e5      	bne.n	800b482 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	3314      	adds	r3, #20
 800b4bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4be:	69bb      	ldr	r3, [r7, #24]
 800b4c0:	e853 3f00 	ldrex	r3, [r3]
 800b4c4:	617b      	str	r3, [r7, #20]
   return(result);
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4cc:	653b      	str	r3, [r7, #80]	; 0x50
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	3314      	adds	r3, #20
 800b4d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b4d6:	627a      	str	r2, [r7, #36]	; 0x24
 800b4d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4da:	6a39      	ldr	r1, [r7, #32]
 800b4dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4de:	e841 2300 	strex	r3, r2, [r1]
 800b4e2:	61fb      	str	r3, [r7, #28]
   return(result);
 800b4e4:	69fb      	ldr	r3, [r7, #28]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d1e5      	bne.n	800b4b6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800b4ea:	2300      	movs	r3, #0
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3760      	adds	r7, #96	; 0x60
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}
 800b4f4:	0800b08b 	.word	0x0800b08b
 800b4f8:	0800b1b1 	.word	0x0800b1b1
 800b4fc:	0800b1e7 	.word	0x0800b1e7

0800b500 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b500:	b480      	push	{r7}
 800b502:	b089      	sub	sp, #36	; 0x24
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	330c      	adds	r3, #12
 800b50e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	e853 3f00 	ldrex	r3, [r3]
 800b516:	60bb      	str	r3, [r7, #8]
   return(result);
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b51e:	61fb      	str	r3, [r7, #28]
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	330c      	adds	r3, #12
 800b526:	69fa      	ldr	r2, [r7, #28]
 800b528:	61ba      	str	r2, [r7, #24]
 800b52a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b52c:	6979      	ldr	r1, [r7, #20]
 800b52e:	69ba      	ldr	r2, [r7, #24]
 800b530:	e841 2300 	strex	r3, r2, [r1]
 800b534:	613b      	str	r3, [r7, #16]
   return(result);
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d1e5      	bne.n	800b508 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2220      	movs	r2, #32
 800b540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b544:	bf00      	nop
 800b546:	3724      	adds	r7, #36	; 0x24
 800b548:	46bd      	mov	sp, r7
 800b54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54e:	4770      	bx	lr

0800b550 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b550:	b480      	push	{r7}
 800b552:	b095      	sub	sp, #84	; 0x54
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	330c      	adds	r3, #12
 800b55e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b562:	e853 3f00 	ldrex	r3, [r3]
 800b566:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b56a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b56e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	330c      	adds	r3, #12
 800b576:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b578:	643a      	str	r2, [r7, #64]	; 0x40
 800b57a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b57c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b57e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b580:	e841 2300 	strex	r3, r2, [r1]
 800b584:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d1e5      	bne.n	800b558 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	3314      	adds	r3, #20
 800b592:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b594:	6a3b      	ldr	r3, [r7, #32]
 800b596:	e853 3f00 	ldrex	r3, [r3]
 800b59a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b59c:	69fb      	ldr	r3, [r7, #28]
 800b59e:	f023 0301 	bic.w	r3, r3, #1
 800b5a2:	64bb      	str	r3, [r7, #72]	; 0x48
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	3314      	adds	r3, #20
 800b5aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b5ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b5ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b5b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b5b4:	e841 2300 	strex	r3, r2, [r1]
 800b5b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d1e5      	bne.n	800b58c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5c4:	2b01      	cmp	r3, #1
 800b5c6:	d119      	bne.n	800b5fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	330c      	adds	r3, #12
 800b5ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	e853 3f00 	ldrex	r3, [r3]
 800b5d6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	f023 0310 	bic.w	r3, r3, #16
 800b5de:	647b      	str	r3, [r7, #68]	; 0x44
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	330c      	adds	r3, #12
 800b5e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b5e8:	61ba      	str	r2, [r7, #24]
 800b5ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ec:	6979      	ldr	r1, [r7, #20]
 800b5ee:	69ba      	ldr	r2, [r7, #24]
 800b5f0:	e841 2300 	strex	r3, r2, [r1]
 800b5f4:	613b      	str	r3, [r7, #16]
   return(result);
 800b5f6:	693b      	ldr	r3, [r7, #16]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d1e5      	bne.n	800b5c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2220      	movs	r2, #32
 800b600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2200      	movs	r2, #0
 800b608:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b60a:	bf00      	nop
 800b60c:	3754      	adds	r7, #84	; 0x54
 800b60e:	46bd      	mov	sp, r7
 800b610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b614:	4770      	bx	lr

0800b616 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b616:	b580      	push	{r7, lr}
 800b618:	b084      	sub	sp, #16
 800b61a:	af00      	add	r7, sp, #0
 800b61c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b622:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	2200      	movs	r2, #0
 800b628:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	2200      	movs	r2, #0
 800b62e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b630:	68f8      	ldr	r0, [r7, #12]
 800b632:	f7ff fcb9 	bl	800afa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b636:	bf00      	nop
 800b638:	3710      	adds	r7, #16
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}

0800b63e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b63e:	b480      	push	{r7}
 800b640:	b085      	sub	sp, #20
 800b642:	af00      	add	r7, sp, #0
 800b644:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b64c:	b2db      	uxtb	r3, r3
 800b64e:	2b21      	cmp	r3, #33	; 0x21
 800b650:	d13e      	bne.n	800b6d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	689b      	ldr	r3, [r3, #8]
 800b656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b65a:	d114      	bne.n	800b686 <UART_Transmit_IT+0x48>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	691b      	ldr	r3, [r3, #16]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d110      	bne.n	800b686 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6a1b      	ldr	r3, [r3, #32]
 800b668:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	881b      	ldrh	r3, [r3, #0]
 800b66e:	461a      	mov	r2, r3
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b678:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6a1b      	ldr	r3, [r3, #32]
 800b67e:	1c9a      	adds	r2, r3, #2
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	621a      	str	r2, [r3, #32]
 800b684:	e008      	b.n	800b698 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6a1b      	ldr	r3, [r3, #32]
 800b68a:	1c59      	adds	r1, r3, #1
 800b68c:	687a      	ldr	r2, [r7, #4]
 800b68e:	6211      	str	r1, [r2, #32]
 800b690:	781a      	ldrb	r2, [r3, #0]
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b69c:	b29b      	uxth	r3, r3
 800b69e:	3b01      	subs	r3, #1
 800b6a0:	b29b      	uxth	r3, r3
 800b6a2:	687a      	ldr	r2, [r7, #4]
 800b6a4:	4619      	mov	r1, r3
 800b6a6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d10f      	bne.n	800b6cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	68da      	ldr	r2, [r3, #12]
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b6ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	68da      	ldr	r2, [r3, #12]
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b6ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	e000      	b.n	800b6d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b6d0:	2302      	movs	r3, #2
  }
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3714      	adds	r7, #20
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6dc:	4770      	bx	lr

0800b6de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b6de:	b580      	push	{r7, lr}
 800b6e0:	b082      	sub	sp, #8
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	68da      	ldr	r2, [r3, #12]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b6f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2220      	movs	r2, #32
 800b6fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f7f9 ff66 	bl	80055d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b704:	2300      	movs	r3, #0
}
 800b706:	4618      	mov	r0, r3
 800b708:	3708      	adds	r7, #8
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}

0800b70e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b70e:	b580      	push	{r7, lr}
 800b710:	b08c      	sub	sp, #48	; 0x30
 800b712:	af00      	add	r7, sp, #0
 800b714:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b71c:	b2db      	uxtb	r3, r3
 800b71e:	2b22      	cmp	r3, #34	; 0x22
 800b720:	f040 80ab 	bne.w	800b87a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	689b      	ldr	r3, [r3, #8]
 800b728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b72c:	d117      	bne.n	800b75e <UART_Receive_IT+0x50>
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	691b      	ldr	r3, [r3, #16]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d113      	bne.n	800b75e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b736:	2300      	movs	r3, #0
 800b738:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b73e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	685b      	ldr	r3, [r3, #4]
 800b746:	b29b      	uxth	r3, r3
 800b748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b74c:	b29a      	uxth	r2, r3
 800b74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b750:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b756:	1c9a      	adds	r2, r3, #2
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	629a      	str	r2, [r3, #40]	; 0x28
 800b75c:	e026      	b.n	800b7ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b762:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b764:	2300      	movs	r3, #0
 800b766:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	689b      	ldr	r3, [r3, #8]
 800b76c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b770:	d007      	beq.n	800b782 <UART_Receive_IT+0x74>
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	689b      	ldr	r3, [r3, #8]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d10a      	bne.n	800b790 <UART_Receive_IT+0x82>
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	691b      	ldr	r3, [r3, #16]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d106      	bne.n	800b790 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	685b      	ldr	r3, [r3, #4]
 800b788:	b2da      	uxtb	r2, r3
 800b78a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b78c:	701a      	strb	r2, [r3, #0]
 800b78e:	e008      	b.n	800b7a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	685b      	ldr	r3, [r3, #4]
 800b796:	b2db      	uxtb	r3, r3
 800b798:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b79c:	b2da      	uxtb	r2, r3
 800b79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7a6:	1c5a      	adds	r2, r3, #1
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b7b0:	b29b      	uxth	r3, r3
 800b7b2:	3b01      	subs	r3, #1
 800b7b4:	b29b      	uxth	r3, r3
 800b7b6:	687a      	ldr	r2, [r7, #4]
 800b7b8:	4619      	mov	r1, r3
 800b7ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d15a      	bne.n	800b876 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	68da      	ldr	r2, [r3, #12]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	f022 0220 	bic.w	r2, r2, #32
 800b7ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	68da      	ldr	r2, [r3, #12]
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b7de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	695a      	ldr	r2, [r3, #20]
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f022 0201 	bic.w	r2, r2, #1
 800b7ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2220      	movs	r2, #32
 800b7f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d135      	bne.n	800b86c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2200      	movs	r2, #0
 800b804:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	330c      	adds	r3, #12
 800b80c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	e853 3f00 	ldrex	r3, [r3]
 800b814:	613b      	str	r3, [r7, #16]
   return(result);
 800b816:	693b      	ldr	r3, [r7, #16]
 800b818:	f023 0310 	bic.w	r3, r3, #16
 800b81c:	627b      	str	r3, [r7, #36]	; 0x24
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	330c      	adds	r3, #12
 800b824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b826:	623a      	str	r2, [r7, #32]
 800b828:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b82a:	69f9      	ldr	r1, [r7, #28]
 800b82c:	6a3a      	ldr	r2, [r7, #32]
 800b82e:	e841 2300 	strex	r3, r2, [r1]
 800b832:	61bb      	str	r3, [r7, #24]
   return(result);
 800b834:	69bb      	ldr	r3, [r7, #24]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d1e5      	bne.n	800b806 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f003 0310 	and.w	r3, r3, #16
 800b844:	2b10      	cmp	r3, #16
 800b846:	d10a      	bne.n	800b85e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b848:	2300      	movs	r3, #0
 800b84a:	60fb      	str	r3, [r7, #12]
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	60fb      	str	r3, [r7, #12]
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	685b      	ldr	r3, [r3, #4]
 800b85a:	60fb      	str	r3, [r7, #12]
 800b85c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b862:	4619      	mov	r1, r3
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f7ff fba9 	bl	800afbc <HAL_UARTEx_RxEventCallback>
 800b86a:	e002      	b.n	800b872 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f7f9 fec1 	bl	80055f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b872:	2300      	movs	r3, #0
 800b874:	e002      	b.n	800b87c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b876:	2300      	movs	r3, #0
 800b878:	e000      	b.n	800b87c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b87a:	2302      	movs	r3, #2
  }
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3730      	adds	r7, #48	; 0x30
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b888:	b09f      	sub	sp, #124	; 0x7c
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b88e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	691b      	ldr	r3, [r3, #16]
 800b894:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b89a:	68d9      	ldr	r1, [r3, #12]
 800b89c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b89e:	681a      	ldr	r2, [r3, #0]
 800b8a0:	ea40 0301 	orr.w	r3, r0, r1
 800b8a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b8a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8a8:	689a      	ldr	r2, [r3, #8]
 800b8aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8ac:	691b      	ldr	r3, [r3, #16]
 800b8ae:	431a      	orrs	r2, r3
 800b8b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8b2:	695b      	ldr	r3, [r3, #20]
 800b8b4:	431a      	orrs	r2, r3
 800b8b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8b8:	69db      	ldr	r3, [r3, #28]
 800b8ba:	4313      	orrs	r3, r2
 800b8bc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800b8be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	68db      	ldr	r3, [r3, #12]
 800b8c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b8c8:	f021 010c 	bic.w	r1, r1, #12
 800b8cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8ce:	681a      	ldr	r2, [r3, #0]
 800b8d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b8d2:	430b      	orrs	r3, r1
 800b8d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b8d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	695b      	ldr	r3, [r3, #20]
 800b8dc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b8e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8e2:	6999      	ldr	r1, [r3, #24]
 800b8e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8e6:	681a      	ldr	r2, [r3, #0]
 800b8e8:	ea40 0301 	orr.w	r3, r0, r1
 800b8ec:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b8ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8f0:	681a      	ldr	r2, [r3, #0]
 800b8f2:	4bc5      	ldr	r3, [pc, #788]	; (800bc08 <UART_SetConfig+0x384>)
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	d004      	beq.n	800b902 <UART_SetConfig+0x7e>
 800b8f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8fa:	681a      	ldr	r2, [r3, #0]
 800b8fc:	4bc3      	ldr	r3, [pc, #780]	; (800bc0c <UART_SetConfig+0x388>)
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d103      	bne.n	800b90a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b902:	f7fd faa9 	bl	8008e58 <HAL_RCC_GetPCLK2Freq>
 800b906:	6778      	str	r0, [r7, #116]	; 0x74
 800b908:	e002      	b.n	800b910 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b90a:	f7fd fa91 	bl	8008e30 <HAL_RCC_GetPCLK1Freq>
 800b90e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b912:	69db      	ldr	r3, [r3, #28]
 800b914:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b918:	f040 80b6 	bne.w	800ba88 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b91c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b91e:	461c      	mov	r4, r3
 800b920:	f04f 0500 	mov.w	r5, #0
 800b924:	4622      	mov	r2, r4
 800b926:	462b      	mov	r3, r5
 800b928:	1891      	adds	r1, r2, r2
 800b92a:	6439      	str	r1, [r7, #64]	; 0x40
 800b92c:	415b      	adcs	r3, r3
 800b92e:	647b      	str	r3, [r7, #68]	; 0x44
 800b930:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b934:	1912      	adds	r2, r2, r4
 800b936:	eb45 0303 	adc.w	r3, r5, r3
 800b93a:	f04f 0000 	mov.w	r0, #0
 800b93e:	f04f 0100 	mov.w	r1, #0
 800b942:	00d9      	lsls	r1, r3, #3
 800b944:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b948:	00d0      	lsls	r0, r2, #3
 800b94a:	4602      	mov	r2, r0
 800b94c:	460b      	mov	r3, r1
 800b94e:	1911      	adds	r1, r2, r4
 800b950:	6639      	str	r1, [r7, #96]	; 0x60
 800b952:	416b      	adcs	r3, r5
 800b954:	667b      	str	r3, [r7, #100]	; 0x64
 800b956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b958:	685b      	ldr	r3, [r3, #4]
 800b95a:	461a      	mov	r2, r3
 800b95c:	f04f 0300 	mov.w	r3, #0
 800b960:	1891      	adds	r1, r2, r2
 800b962:	63b9      	str	r1, [r7, #56]	; 0x38
 800b964:	415b      	adcs	r3, r3
 800b966:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b968:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b96c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800b970:	f7f5 f98a 	bl	8000c88 <__aeabi_uldivmod>
 800b974:	4602      	mov	r2, r0
 800b976:	460b      	mov	r3, r1
 800b978:	4ba5      	ldr	r3, [pc, #660]	; (800bc10 <UART_SetConfig+0x38c>)
 800b97a:	fba3 2302 	umull	r2, r3, r3, r2
 800b97e:	095b      	lsrs	r3, r3, #5
 800b980:	011e      	lsls	r6, r3, #4
 800b982:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b984:	461c      	mov	r4, r3
 800b986:	f04f 0500 	mov.w	r5, #0
 800b98a:	4622      	mov	r2, r4
 800b98c:	462b      	mov	r3, r5
 800b98e:	1891      	adds	r1, r2, r2
 800b990:	6339      	str	r1, [r7, #48]	; 0x30
 800b992:	415b      	adcs	r3, r3
 800b994:	637b      	str	r3, [r7, #52]	; 0x34
 800b996:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800b99a:	1912      	adds	r2, r2, r4
 800b99c:	eb45 0303 	adc.w	r3, r5, r3
 800b9a0:	f04f 0000 	mov.w	r0, #0
 800b9a4:	f04f 0100 	mov.w	r1, #0
 800b9a8:	00d9      	lsls	r1, r3, #3
 800b9aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b9ae:	00d0      	lsls	r0, r2, #3
 800b9b0:	4602      	mov	r2, r0
 800b9b2:	460b      	mov	r3, r1
 800b9b4:	1911      	adds	r1, r2, r4
 800b9b6:	65b9      	str	r1, [r7, #88]	; 0x58
 800b9b8:	416b      	adcs	r3, r5
 800b9ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b9bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b9be:	685b      	ldr	r3, [r3, #4]
 800b9c0:	461a      	mov	r2, r3
 800b9c2:	f04f 0300 	mov.w	r3, #0
 800b9c6:	1891      	adds	r1, r2, r2
 800b9c8:	62b9      	str	r1, [r7, #40]	; 0x28
 800b9ca:	415b      	adcs	r3, r3
 800b9cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b9ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b9d2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800b9d6:	f7f5 f957 	bl	8000c88 <__aeabi_uldivmod>
 800b9da:	4602      	mov	r2, r0
 800b9dc:	460b      	mov	r3, r1
 800b9de:	4b8c      	ldr	r3, [pc, #560]	; (800bc10 <UART_SetConfig+0x38c>)
 800b9e0:	fba3 1302 	umull	r1, r3, r3, r2
 800b9e4:	095b      	lsrs	r3, r3, #5
 800b9e6:	2164      	movs	r1, #100	; 0x64
 800b9e8:	fb01 f303 	mul.w	r3, r1, r3
 800b9ec:	1ad3      	subs	r3, r2, r3
 800b9ee:	00db      	lsls	r3, r3, #3
 800b9f0:	3332      	adds	r3, #50	; 0x32
 800b9f2:	4a87      	ldr	r2, [pc, #540]	; (800bc10 <UART_SetConfig+0x38c>)
 800b9f4:	fba2 2303 	umull	r2, r3, r2, r3
 800b9f8:	095b      	lsrs	r3, r3, #5
 800b9fa:	005b      	lsls	r3, r3, #1
 800b9fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ba00:	441e      	add	r6, r3
 800ba02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ba04:	4618      	mov	r0, r3
 800ba06:	f04f 0100 	mov.w	r1, #0
 800ba0a:	4602      	mov	r2, r0
 800ba0c:	460b      	mov	r3, r1
 800ba0e:	1894      	adds	r4, r2, r2
 800ba10:	623c      	str	r4, [r7, #32]
 800ba12:	415b      	adcs	r3, r3
 800ba14:	627b      	str	r3, [r7, #36]	; 0x24
 800ba16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ba1a:	1812      	adds	r2, r2, r0
 800ba1c:	eb41 0303 	adc.w	r3, r1, r3
 800ba20:	f04f 0400 	mov.w	r4, #0
 800ba24:	f04f 0500 	mov.w	r5, #0
 800ba28:	00dd      	lsls	r5, r3, #3
 800ba2a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ba2e:	00d4      	lsls	r4, r2, #3
 800ba30:	4622      	mov	r2, r4
 800ba32:	462b      	mov	r3, r5
 800ba34:	1814      	adds	r4, r2, r0
 800ba36:	653c      	str	r4, [r7, #80]	; 0x50
 800ba38:	414b      	adcs	r3, r1
 800ba3a:	657b      	str	r3, [r7, #84]	; 0x54
 800ba3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba3e:	685b      	ldr	r3, [r3, #4]
 800ba40:	461a      	mov	r2, r3
 800ba42:	f04f 0300 	mov.w	r3, #0
 800ba46:	1891      	adds	r1, r2, r2
 800ba48:	61b9      	str	r1, [r7, #24]
 800ba4a:	415b      	adcs	r3, r3
 800ba4c:	61fb      	str	r3, [r7, #28]
 800ba4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ba52:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800ba56:	f7f5 f917 	bl	8000c88 <__aeabi_uldivmod>
 800ba5a:	4602      	mov	r2, r0
 800ba5c:	460b      	mov	r3, r1
 800ba5e:	4b6c      	ldr	r3, [pc, #432]	; (800bc10 <UART_SetConfig+0x38c>)
 800ba60:	fba3 1302 	umull	r1, r3, r3, r2
 800ba64:	095b      	lsrs	r3, r3, #5
 800ba66:	2164      	movs	r1, #100	; 0x64
 800ba68:	fb01 f303 	mul.w	r3, r1, r3
 800ba6c:	1ad3      	subs	r3, r2, r3
 800ba6e:	00db      	lsls	r3, r3, #3
 800ba70:	3332      	adds	r3, #50	; 0x32
 800ba72:	4a67      	ldr	r2, [pc, #412]	; (800bc10 <UART_SetConfig+0x38c>)
 800ba74:	fba2 2303 	umull	r2, r3, r2, r3
 800ba78:	095b      	lsrs	r3, r3, #5
 800ba7a:	f003 0207 	and.w	r2, r3, #7
 800ba7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	4432      	add	r2, r6
 800ba84:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ba86:	e0b9      	b.n	800bbfc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ba88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ba8a:	461c      	mov	r4, r3
 800ba8c:	f04f 0500 	mov.w	r5, #0
 800ba90:	4622      	mov	r2, r4
 800ba92:	462b      	mov	r3, r5
 800ba94:	1891      	adds	r1, r2, r2
 800ba96:	6139      	str	r1, [r7, #16]
 800ba98:	415b      	adcs	r3, r3
 800ba9a:	617b      	str	r3, [r7, #20]
 800ba9c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800baa0:	1912      	adds	r2, r2, r4
 800baa2:	eb45 0303 	adc.w	r3, r5, r3
 800baa6:	f04f 0000 	mov.w	r0, #0
 800baaa:	f04f 0100 	mov.w	r1, #0
 800baae:	00d9      	lsls	r1, r3, #3
 800bab0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bab4:	00d0      	lsls	r0, r2, #3
 800bab6:	4602      	mov	r2, r0
 800bab8:	460b      	mov	r3, r1
 800baba:	eb12 0804 	adds.w	r8, r2, r4
 800babe:	eb43 0905 	adc.w	r9, r3, r5
 800bac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bac4:	685b      	ldr	r3, [r3, #4]
 800bac6:	4618      	mov	r0, r3
 800bac8:	f04f 0100 	mov.w	r1, #0
 800bacc:	f04f 0200 	mov.w	r2, #0
 800bad0:	f04f 0300 	mov.w	r3, #0
 800bad4:	008b      	lsls	r3, r1, #2
 800bad6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bada:	0082      	lsls	r2, r0, #2
 800badc:	4640      	mov	r0, r8
 800bade:	4649      	mov	r1, r9
 800bae0:	f7f5 f8d2 	bl	8000c88 <__aeabi_uldivmod>
 800bae4:	4602      	mov	r2, r0
 800bae6:	460b      	mov	r3, r1
 800bae8:	4b49      	ldr	r3, [pc, #292]	; (800bc10 <UART_SetConfig+0x38c>)
 800baea:	fba3 2302 	umull	r2, r3, r3, r2
 800baee:	095b      	lsrs	r3, r3, #5
 800baf0:	011e      	lsls	r6, r3, #4
 800baf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800baf4:	4618      	mov	r0, r3
 800baf6:	f04f 0100 	mov.w	r1, #0
 800bafa:	4602      	mov	r2, r0
 800bafc:	460b      	mov	r3, r1
 800bafe:	1894      	adds	r4, r2, r2
 800bb00:	60bc      	str	r4, [r7, #8]
 800bb02:	415b      	adcs	r3, r3
 800bb04:	60fb      	str	r3, [r7, #12]
 800bb06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bb0a:	1812      	adds	r2, r2, r0
 800bb0c:	eb41 0303 	adc.w	r3, r1, r3
 800bb10:	f04f 0400 	mov.w	r4, #0
 800bb14:	f04f 0500 	mov.w	r5, #0
 800bb18:	00dd      	lsls	r5, r3, #3
 800bb1a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800bb1e:	00d4      	lsls	r4, r2, #3
 800bb20:	4622      	mov	r2, r4
 800bb22:	462b      	mov	r3, r5
 800bb24:	1814      	adds	r4, r2, r0
 800bb26:	64bc      	str	r4, [r7, #72]	; 0x48
 800bb28:	414b      	adcs	r3, r1
 800bb2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb2e:	685b      	ldr	r3, [r3, #4]
 800bb30:	4618      	mov	r0, r3
 800bb32:	f04f 0100 	mov.w	r1, #0
 800bb36:	f04f 0200 	mov.w	r2, #0
 800bb3a:	f04f 0300 	mov.w	r3, #0
 800bb3e:	008b      	lsls	r3, r1, #2
 800bb40:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bb44:	0082      	lsls	r2, r0, #2
 800bb46:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800bb4a:	f7f5 f89d 	bl	8000c88 <__aeabi_uldivmod>
 800bb4e:	4602      	mov	r2, r0
 800bb50:	460b      	mov	r3, r1
 800bb52:	4b2f      	ldr	r3, [pc, #188]	; (800bc10 <UART_SetConfig+0x38c>)
 800bb54:	fba3 1302 	umull	r1, r3, r3, r2
 800bb58:	095b      	lsrs	r3, r3, #5
 800bb5a:	2164      	movs	r1, #100	; 0x64
 800bb5c:	fb01 f303 	mul.w	r3, r1, r3
 800bb60:	1ad3      	subs	r3, r2, r3
 800bb62:	011b      	lsls	r3, r3, #4
 800bb64:	3332      	adds	r3, #50	; 0x32
 800bb66:	4a2a      	ldr	r2, [pc, #168]	; (800bc10 <UART_SetConfig+0x38c>)
 800bb68:	fba2 2303 	umull	r2, r3, r2, r3
 800bb6c:	095b      	lsrs	r3, r3, #5
 800bb6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bb72:	441e      	add	r6, r3
 800bb74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bb76:	4618      	mov	r0, r3
 800bb78:	f04f 0100 	mov.w	r1, #0
 800bb7c:	4602      	mov	r2, r0
 800bb7e:	460b      	mov	r3, r1
 800bb80:	1894      	adds	r4, r2, r2
 800bb82:	603c      	str	r4, [r7, #0]
 800bb84:	415b      	adcs	r3, r3
 800bb86:	607b      	str	r3, [r7, #4]
 800bb88:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb8c:	1812      	adds	r2, r2, r0
 800bb8e:	eb41 0303 	adc.w	r3, r1, r3
 800bb92:	f04f 0400 	mov.w	r4, #0
 800bb96:	f04f 0500 	mov.w	r5, #0
 800bb9a:	00dd      	lsls	r5, r3, #3
 800bb9c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800bba0:	00d4      	lsls	r4, r2, #3
 800bba2:	4622      	mov	r2, r4
 800bba4:	462b      	mov	r3, r5
 800bba6:	eb12 0a00 	adds.w	sl, r2, r0
 800bbaa:	eb43 0b01 	adc.w	fp, r3, r1
 800bbae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbb0:	685b      	ldr	r3, [r3, #4]
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f04f 0100 	mov.w	r1, #0
 800bbb8:	f04f 0200 	mov.w	r2, #0
 800bbbc:	f04f 0300 	mov.w	r3, #0
 800bbc0:	008b      	lsls	r3, r1, #2
 800bbc2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bbc6:	0082      	lsls	r2, r0, #2
 800bbc8:	4650      	mov	r0, sl
 800bbca:	4659      	mov	r1, fp
 800bbcc:	f7f5 f85c 	bl	8000c88 <__aeabi_uldivmod>
 800bbd0:	4602      	mov	r2, r0
 800bbd2:	460b      	mov	r3, r1
 800bbd4:	4b0e      	ldr	r3, [pc, #56]	; (800bc10 <UART_SetConfig+0x38c>)
 800bbd6:	fba3 1302 	umull	r1, r3, r3, r2
 800bbda:	095b      	lsrs	r3, r3, #5
 800bbdc:	2164      	movs	r1, #100	; 0x64
 800bbde:	fb01 f303 	mul.w	r3, r1, r3
 800bbe2:	1ad3      	subs	r3, r2, r3
 800bbe4:	011b      	lsls	r3, r3, #4
 800bbe6:	3332      	adds	r3, #50	; 0x32
 800bbe8:	4a09      	ldr	r2, [pc, #36]	; (800bc10 <UART_SetConfig+0x38c>)
 800bbea:	fba2 2303 	umull	r2, r3, r2, r3
 800bbee:	095b      	lsrs	r3, r3, #5
 800bbf0:	f003 020f 	and.w	r2, r3, #15
 800bbf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	4432      	add	r2, r6
 800bbfa:	609a      	str	r2, [r3, #8]
}
 800bbfc:	bf00      	nop
 800bbfe:	377c      	adds	r7, #124	; 0x7c
 800bc00:	46bd      	mov	sp, r7
 800bc02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc06:	bf00      	nop
 800bc08:	40011000 	.word	0x40011000
 800bc0c:	40011400 	.word	0x40011400
 800bc10:	51eb851f 	.word	0x51eb851f

0800bc14 <__cxa_pure_virtual>:
 800bc14:	b508      	push	{r3, lr}
 800bc16:	f000 f80d 	bl	800bc34 <_ZSt9terminatev>

0800bc1a <_ZN10__cxxabiv111__terminateEPFvvE>:
 800bc1a:	b508      	push	{r3, lr}
 800bc1c:	4780      	blx	r0
 800bc1e:	f000 f855 	bl	800bccc <abort>
	...

0800bc24 <_ZSt13get_terminatev>:
 800bc24:	4b02      	ldr	r3, [pc, #8]	; (800bc30 <_ZSt13get_terminatev+0xc>)
 800bc26:	6818      	ldr	r0, [r3, #0]
 800bc28:	f3bf 8f5b 	dmb	ish
 800bc2c:	4770      	bx	lr
 800bc2e:	bf00      	nop
 800bc30:	2000001c 	.word	0x2000001c

0800bc34 <_ZSt9terminatev>:
 800bc34:	b508      	push	{r3, lr}
 800bc36:	f7ff fff5 	bl	800bc24 <_ZSt13get_terminatev>
 800bc3a:	f7ff ffee 	bl	800bc1a <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800bc40 <round>:
 800bc40:	ec51 0b10 	vmov	r0, r1, d0
 800bc44:	b570      	push	{r4, r5, r6, lr}
 800bc46:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800bc4a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800bc4e:	2c13      	cmp	r4, #19
 800bc50:	ee10 2a10 	vmov	r2, s0
 800bc54:	460b      	mov	r3, r1
 800bc56:	dc19      	bgt.n	800bc8c <round+0x4c>
 800bc58:	2c00      	cmp	r4, #0
 800bc5a:	da09      	bge.n	800bc70 <round+0x30>
 800bc5c:	3401      	adds	r4, #1
 800bc5e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800bc62:	d103      	bne.n	800bc6c <round+0x2c>
 800bc64:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800bc68:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bc6c:	2100      	movs	r1, #0
 800bc6e:	e028      	b.n	800bcc2 <round+0x82>
 800bc70:	4d15      	ldr	r5, [pc, #84]	; (800bcc8 <round+0x88>)
 800bc72:	4125      	asrs	r5, r4
 800bc74:	ea01 0605 	and.w	r6, r1, r5
 800bc78:	4332      	orrs	r2, r6
 800bc7a:	d00e      	beq.n	800bc9a <round+0x5a>
 800bc7c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800bc80:	fa42 f404 	asr.w	r4, r2, r4
 800bc84:	4423      	add	r3, r4
 800bc86:	ea23 0305 	bic.w	r3, r3, r5
 800bc8a:	e7ef      	b.n	800bc6c <round+0x2c>
 800bc8c:	2c33      	cmp	r4, #51	; 0x33
 800bc8e:	dd07      	ble.n	800bca0 <round+0x60>
 800bc90:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800bc94:	d101      	bne.n	800bc9a <round+0x5a>
 800bc96:	f7f4 faf9 	bl	800028c <__adddf3>
 800bc9a:	ec41 0b10 	vmov	d0, r0, r1
 800bc9e:	bd70      	pop	{r4, r5, r6, pc}
 800bca0:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800bca4:	f04f 35ff 	mov.w	r5, #4294967295
 800bca8:	40f5      	lsrs	r5, r6
 800bcaa:	4228      	tst	r0, r5
 800bcac:	d0f5      	beq.n	800bc9a <round+0x5a>
 800bcae:	2101      	movs	r1, #1
 800bcb0:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800bcb4:	fa01 f404 	lsl.w	r4, r1, r4
 800bcb8:	1912      	adds	r2, r2, r4
 800bcba:	bf28      	it	cs
 800bcbc:	185b      	addcs	r3, r3, r1
 800bcbe:	ea22 0105 	bic.w	r1, r2, r5
 800bcc2:	4608      	mov	r0, r1
 800bcc4:	4619      	mov	r1, r3
 800bcc6:	e7e8      	b.n	800bc9a <round+0x5a>
 800bcc8:	000fffff 	.word	0x000fffff

0800bccc <abort>:
 800bccc:	b508      	push	{r3, lr}
 800bcce:	2006      	movs	r0, #6
 800bcd0:	f000 fef6 	bl	800cac0 <raise>
 800bcd4:	2001      	movs	r0, #1
 800bcd6:	f7fb fbfd 	bl	80074d4 <_exit>

0800bcda <atof>:
 800bcda:	2100      	movs	r1, #0
 800bcdc:	f001 bd58 	b.w	800d790 <strtod>

0800bce0 <__errno>:
 800bce0:	4b01      	ldr	r3, [pc, #4]	; (800bce8 <__errno+0x8>)
 800bce2:	6818      	ldr	r0, [r3, #0]
 800bce4:	4770      	bx	lr
 800bce6:	bf00      	nop
 800bce8:	20000020 	.word	0x20000020

0800bcec <__libc_init_array>:
 800bcec:	b570      	push	{r4, r5, r6, lr}
 800bcee:	4d0d      	ldr	r5, [pc, #52]	; (800bd24 <__libc_init_array+0x38>)
 800bcf0:	4c0d      	ldr	r4, [pc, #52]	; (800bd28 <__libc_init_array+0x3c>)
 800bcf2:	1b64      	subs	r4, r4, r5
 800bcf4:	10a4      	asrs	r4, r4, #2
 800bcf6:	2600      	movs	r6, #0
 800bcf8:	42a6      	cmp	r6, r4
 800bcfa:	d109      	bne.n	800bd10 <__libc_init_array+0x24>
 800bcfc:	4d0b      	ldr	r5, [pc, #44]	; (800bd2c <__libc_init_array+0x40>)
 800bcfe:	4c0c      	ldr	r4, [pc, #48]	; (800bd30 <__libc_init_array+0x44>)
 800bd00:	f004 fcaa 	bl	8010658 <_init>
 800bd04:	1b64      	subs	r4, r4, r5
 800bd06:	10a4      	asrs	r4, r4, #2
 800bd08:	2600      	movs	r6, #0
 800bd0a:	42a6      	cmp	r6, r4
 800bd0c:	d105      	bne.n	800bd1a <__libc_init_array+0x2e>
 800bd0e:	bd70      	pop	{r4, r5, r6, pc}
 800bd10:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd14:	4798      	blx	r3
 800bd16:	3601      	adds	r6, #1
 800bd18:	e7ee      	b.n	800bcf8 <__libc_init_array+0xc>
 800bd1a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd1e:	4798      	blx	r3
 800bd20:	3601      	adds	r6, #1
 800bd22:	e7f2      	b.n	800bd0a <__libc_init_array+0x1e>
 800bd24:	08010fe0 	.word	0x08010fe0
 800bd28:	08010fe0 	.word	0x08010fe0
 800bd2c:	08010fe0 	.word	0x08010fe0
 800bd30:	08010fe8 	.word	0x08010fe8

0800bd34 <memcpy>:
 800bd34:	440a      	add	r2, r1
 800bd36:	4291      	cmp	r1, r2
 800bd38:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd3c:	d100      	bne.n	800bd40 <memcpy+0xc>
 800bd3e:	4770      	bx	lr
 800bd40:	b510      	push	{r4, lr}
 800bd42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd46:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd4a:	4291      	cmp	r1, r2
 800bd4c:	d1f9      	bne.n	800bd42 <memcpy+0xe>
 800bd4e:	bd10      	pop	{r4, pc}

0800bd50 <memset>:
 800bd50:	4402      	add	r2, r0
 800bd52:	4603      	mov	r3, r0
 800bd54:	4293      	cmp	r3, r2
 800bd56:	d100      	bne.n	800bd5a <memset+0xa>
 800bd58:	4770      	bx	lr
 800bd5a:	f803 1b01 	strb.w	r1, [r3], #1
 800bd5e:	e7f9      	b.n	800bd54 <memset+0x4>

0800bd60 <__cvt>:
 800bd60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd64:	ec55 4b10 	vmov	r4, r5, d0
 800bd68:	2d00      	cmp	r5, #0
 800bd6a:	460e      	mov	r6, r1
 800bd6c:	4619      	mov	r1, r3
 800bd6e:	462b      	mov	r3, r5
 800bd70:	bfbb      	ittet	lt
 800bd72:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bd76:	461d      	movlt	r5, r3
 800bd78:	2300      	movge	r3, #0
 800bd7a:	232d      	movlt	r3, #45	; 0x2d
 800bd7c:	700b      	strb	r3, [r1, #0]
 800bd7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd80:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bd84:	4691      	mov	r9, r2
 800bd86:	f023 0820 	bic.w	r8, r3, #32
 800bd8a:	bfbc      	itt	lt
 800bd8c:	4622      	movlt	r2, r4
 800bd8e:	4614      	movlt	r4, r2
 800bd90:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bd94:	d005      	beq.n	800bda2 <__cvt+0x42>
 800bd96:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bd9a:	d100      	bne.n	800bd9e <__cvt+0x3e>
 800bd9c:	3601      	adds	r6, #1
 800bd9e:	2102      	movs	r1, #2
 800bda0:	e000      	b.n	800bda4 <__cvt+0x44>
 800bda2:	2103      	movs	r1, #3
 800bda4:	ab03      	add	r3, sp, #12
 800bda6:	9301      	str	r3, [sp, #4]
 800bda8:	ab02      	add	r3, sp, #8
 800bdaa:	9300      	str	r3, [sp, #0]
 800bdac:	ec45 4b10 	vmov	d0, r4, r5
 800bdb0:	4653      	mov	r3, sl
 800bdb2:	4632      	mov	r2, r6
 800bdb4:	f001 fe84 	bl	800dac0 <_dtoa_r>
 800bdb8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bdbc:	4607      	mov	r7, r0
 800bdbe:	d102      	bne.n	800bdc6 <__cvt+0x66>
 800bdc0:	f019 0f01 	tst.w	r9, #1
 800bdc4:	d022      	beq.n	800be0c <__cvt+0xac>
 800bdc6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bdca:	eb07 0906 	add.w	r9, r7, r6
 800bdce:	d110      	bne.n	800bdf2 <__cvt+0x92>
 800bdd0:	783b      	ldrb	r3, [r7, #0]
 800bdd2:	2b30      	cmp	r3, #48	; 0x30
 800bdd4:	d10a      	bne.n	800bdec <__cvt+0x8c>
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	2300      	movs	r3, #0
 800bdda:	4620      	mov	r0, r4
 800bddc:	4629      	mov	r1, r5
 800bdde:	f7f4 fe73 	bl	8000ac8 <__aeabi_dcmpeq>
 800bde2:	b918      	cbnz	r0, 800bdec <__cvt+0x8c>
 800bde4:	f1c6 0601 	rsb	r6, r6, #1
 800bde8:	f8ca 6000 	str.w	r6, [sl]
 800bdec:	f8da 3000 	ldr.w	r3, [sl]
 800bdf0:	4499      	add	r9, r3
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	4620      	mov	r0, r4
 800bdf8:	4629      	mov	r1, r5
 800bdfa:	f7f4 fe65 	bl	8000ac8 <__aeabi_dcmpeq>
 800bdfe:	b108      	cbz	r0, 800be04 <__cvt+0xa4>
 800be00:	f8cd 900c 	str.w	r9, [sp, #12]
 800be04:	2230      	movs	r2, #48	; 0x30
 800be06:	9b03      	ldr	r3, [sp, #12]
 800be08:	454b      	cmp	r3, r9
 800be0a:	d307      	bcc.n	800be1c <__cvt+0xbc>
 800be0c:	9b03      	ldr	r3, [sp, #12]
 800be0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be10:	1bdb      	subs	r3, r3, r7
 800be12:	4638      	mov	r0, r7
 800be14:	6013      	str	r3, [r2, #0]
 800be16:	b004      	add	sp, #16
 800be18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be1c:	1c59      	adds	r1, r3, #1
 800be1e:	9103      	str	r1, [sp, #12]
 800be20:	701a      	strb	r2, [r3, #0]
 800be22:	e7f0      	b.n	800be06 <__cvt+0xa6>

0800be24 <__exponent>:
 800be24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be26:	4603      	mov	r3, r0
 800be28:	2900      	cmp	r1, #0
 800be2a:	bfb8      	it	lt
 800be2c:	4249      	neglt	r1, r1
 800be2e:	f803 2b02 	strb.w	r2, [r3], #2
 800be32:	bfb4      	ite	lt
 800be34:	222d      	movlt	r2, #45	; 0x2d
 800be36:	222b      	movge	r2, #43	; 0x2b
 800be38:	2909      	cmp	r1, #9
 800be3a:	7042      	strb	r2, [r0, #1]
 800be3c:	dd2a      	ble.n	800be94 <__exponent+0x70>
 800be3e:	f10d 0407 	add.w	r4, sp, #7
 800be42:	46a4      	mov	ip, r4
 800be44:	270a      	movs	r7, #10
 800be46:	46a6      	mov	lr, r4
 800be48:	460a      	mov	r2, r1
 800be4a:	fb91 f6f7 	sdiv	r6, r1, r7
 800be4e:	fb07 1516 	mls	r5, r7, r6, r1
 800be52:	3530      	adds	r5, #48	; 0x30
 800be54:	2a63      	cmp	r2, #99	; 0x63
 800be56:	f104 34ff 	add.w	r4, r4, #4294967295
 800be5a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800be5e:	4631      	mov	r1, r6
 800be60:	dcf1      	bgt.n	800be46 <__exponent+0x22>
 800be62:	3130      	adds	r1, #48	; 0x30
 800be64:	f1ae 0502 	sub.w	r5, lr, #2
 800be68:	f804 1c01 	strb.w	r1, [r4, #-1]
 800be6c:	1c44      	adds	r4, r0, #1
 800be6e:	4629      	mov	r1, r5
 800be70:	4561      	cmp	r1, ip
 800be72:	d30a      	bcc.n	800be8a <__exponent+0x66>
 800be74:	f10d 0209 	add.w	r2, sp, #9
 800be78:	eba2 020e 	sub.w	r2, r2, lr
 800be7c:	4565      	cmp	r5, ip
 800be7e:	bf88      	it	hi
 800be80:	2200      	movhi	r2, #0
 800be82:	4413      	add	r3, r2
 800be84:	1a18      	subs	r0, r3, r0
 800be86:	b003      	add	sp, #12
 800be88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be8e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800be92:	e7ed      	b.n	800be70 <__exponent+0x4c>
 800be94:	2330      	movs	r3, #48	; 0x30
 800be96:	3130      	adds	r1, #48	; 0x30
 800be98:	7083      	strb	r3, [r0, #2]
 800be9a:	70c1      	strb	r1, [r0, #3]
 800be9c:	1d03      	adds	r3, r0, #4
 800be9e:	e7f1      	b.n	800be84 <__exponent+0x60>

0800bea0 <_printf_float>:
 800bea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bea4:	ed2d 8b02 	vpush	{d8}
 800bea8:	b08d      	sub	sp, #52	; 0x34
 800beaa:	460c      	mov	r4, r1
 800beac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800beb0:	4616      	mov	r6, r2
 800beb2:	461f      	mov	r7, r3
 800beb4:	4605      	mov	r5, r0
 800beb6:	f002 ff71 	bl	800ed9c <_localeconv_r>
 800beba:	f8d0 a000 	ldr.w	sl, [r0]
 800bebe:	4650      	mov	r0, sl
 800bec0:	f7f4 f986 	bl	80001d0 <strlen>
 800bec4:	2300      	movs	r3, #0
 800bec6:	930a      	str	r3, [sp, #40]	; 0x28
 800bec8:	6823      	ldr	r3, [r4, #0]
 800beca:	9305      	str	r3, [sp, #20]
 800becc:	f8d8 3000 	ldr.w	r3, [r8]
 800bed0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bed4:	3307      	adds	r3, #7
 800bed6:	f023 0307 	bic.w	r3, r3, #7
 800beda:	f103 0208 	add.w	r2, r3, #8
 800bede:	f8c8 2000 	str.w	r2, [r8]
 800bee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800beea:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800beee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bef2:	9307      	str	r3, [sp, #28]
 800bef4:	f8cd 8018 	str.w	r8, [sp, #24]
 800bef8:	ee08 0a10 	vmov	s16, r0
 800befc:	4b9f      	ldr	r3, [pc, #636]	; (800c17c <_printf_float+0x2dc>)
 800befe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf02:	f04f 32ff 	mov.w	r2, #4294967295
 800bf06:	f7f4 fe11 	bl	8000b2c <__aeabi_dcmpun>
 800bf0a:	bb88      	cbnz	r0, 800bf70 <_printf_float+0xd0>
 800bf0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf10:	4b9a      	ldr	r3, [pc, #616]	; (800c17c <_printf_float+0x2dc>)
 800bf12:	f04f 32ff 	mov.w	r2, #4294967295
 800bf16:	f7f4 fdeb 	bl	8000af0 <__aeabi_dcmple>
 800bf1a:	bb48      	cbnz	r0, 800bf70 <_printf_float+0xd0>
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	2300      	movs	r3, #0
 800bf20:	4640      	mov	r0, r8
 800bf22:	4649      	mov	r1, r9
 800bf24:	f7f4 fdda 	bl	8000adc <__aeabi_dcmplt>
 800bf28:	b110      	cbz	r0, 800bf30 <_printf_float+0x90>
 800bf2a:	232d      	movs	r3, #45	; 0x2d
 800bf2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf30:	4b93      	ldr	r3, [pc, #588]	; (800c180 <_printf_float+0x2e0>)
 800bf32:	4894      	ldr	r0, [pc, #592]	; (800c184 <_printf_float+0x2e4>)
 800bf34:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bf38:	bf94      	ite	ls
 800bf3a:	4698      	movls	r8, r3
 800bf3c:	4680      	movhi	r8, r0
 800bf3e:	2303      	movs	r3, #3
 800bf40:	6123      	str	r3, [r4, #16]
 800bf42:	9b05      	ldr	r3, [sp, #20]
 800bf44:	f023 0204 	bic.w	r2, r3, #4
 800bf48:	6022      	str	r2, [r4, #0]
 800bf4a:	f04f 0900 	mov.w	r9, #0
 800bf4e:	9700      	str	r7, [sp, #0]
 800bf50:	4633      	mov	r3, r6
 800bf52:	aa0b      	add	r2, sp, #44	; 0x2c
 800bf54:	4621      	mov	r1, r4
 800bf56:	4628      	mov	r0, r5
 800bf58:	f000 f9d8 	bl	800c30c <_printf_common>
 800bf5c:	3001      	adds	r0, #1
 800bf5e:	f040 8090 	bne.w	800c082 <_printf_float+0x1e2>
 800bf62:	f04f 30ff 	mov.w	r0, #4294967295
 800bf66:	b00d      	add	sp, #52	; 0x34
 800bf68:	ecbd 8b02 	vpop	{d8}
 800bf6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf70:	4642      	mov	r2, r8
 800bf72:	464b      	mov	r3, r9
 800bf74:	4640      	mov	r0, r8
 800bf76:	4649      	mov	r1, r9
 800bf78:	f7f4 fdd8 	bl	8000b2c <__aeabi_dcmpun>
 800bf7c:	b140      	cbz	r0, 800bf90 <_printf_float+0xf0>
 800bf7e:	464b      	mov	r3, r9
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	bfbc      	itt	lt
 800bf84:	232d      	movlt	r3, #45	; 0x2d
 800bf86:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bf8a:	487f      	ldr	r0, [pc, #508]	; (800c188 <_printf_float+0x2e8>)
 800bf8c:	4b7f      	ldr	r3, [pc, #508]	; (800c18c <_printf_float+0x2ec>)
 800bf8e:	e7d1      	b.n	800bf34 <_printf_float+0x94>
 800bf90:	6863      	ldr	r3, [r4, #4]
 800bf92:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bf96:	9206      	str	r2, [sp, #24]
 800bf98:	1c5a      	adds	r2, r3, #1
 800bf9a:	d13f      	bne.n	800c01c <_printf_float+0x17c>
 800bf9c:	2306      	movs	r3, #6
 800bf9e:	6063      	str	r3, [r4, #4]
 800bfa0:	9b05      	ldr	r3, [sp, #20]
 800bfa2:	6861      	ldr	r1, [r4, #4]
 800bfa4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	9303      	str	r3, [sp, #12]
 800bfac:	ab0a      	add	r3, sp, #40	; 0x28
 800bfae:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bfb2:	ab09      	add	r3, sp, #36	; 0x24
 800bfb4:	ec49 8b10 	vmov	d0, r8, r9
 800bfb8:	9300      	str	r3, [sp, #0]
 800bfba:	6022      	str	r2, [r4, #0]
 800bfbc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bfc0:	4628      	mov	r0, r5
 800bfc2:	f7ff fecd 	bl	800bd60 <__cvt>
 800bfc6:	9b06      	ldr	r3, [sp, #24]
 800bfc8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bfca:	2b47      	cmp	r3, #71	; 0x47
 800bfcc:	4680      	mov	r8, r0
 800bfce:	d108      	bne.n	800bfe2 <_printf_float+0x142>
 800bfd0:	1cc8      	adds	r0, r1, #3
 800bfd2:	db02      	blt.n	800bfda <_printf_float+0x13a>
 800bfd4:	6863      	ldr	r3, [r4, #4]
 800bfd6:	4299      	cmp	r1, r3
 800bfd8:	dd41      	ble.n	800c05e <_printf_float+0x1be>
 800bfda:	f1ab 0b02 	sub.w	fp, fp, #2
 800bfde:	fa5f fb8b 	uxtb.w	fp, fp
 800bfe2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bfe6:	d820      	bhi.n	800c02a <_printf_float+0x18a>
 800bfe8:	3901      	subs	r1, #1
 800bfea:	465a      	mov	r2, fp
 800bfec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bff0:	9109      	str	r1, [sp, #36]	; 0x24
 800bff2:	f7ff ff17 	bl	800be24 <__exponent>
 800bff6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bff8:	1813      	adds	r3, r2, r0
 800bffa:	2a01      	cmp	r2, #1
 800bffc:	4681      	mov	r9, r0
 800bffe:	6123      	str	r3, [r4, #16]
 800c000:	dc02      	bgt.n	800c008 <_printf_float+0x168>
 800c002:	6822      	ldr	r2, [r4, #0]
 800c004:	07d2      	lsls	r2, r2, #31
 800c006:	d501      	bpl.n	800c00c <_printf_float+0x16c>
 800c008:	3301      	adds	r3, #1
 800c00a:	6123      	str	r3, [r4, #16]
 800c00c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c010:	2b00      	cmp	r3, #0
 800c012:	d09c      	beq.n	800bf4e <_printf_float+0xae>
 800c014:	232d      	movs	r3, #45	; 0x2d
 800c016:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c01a:	e798      	b.n	800bf4e <_printf_float+0xae>
 800c01c:	9a06      	ldr	r2, [sp, #24]
 800c01e:	2a47      	cmp	r2, #71	; 0x47
 800c020:	d1be      	bne.n	800bfa0 <_printf_float+0x100>
 800c022:	2b00      	cmp	r3, #0
 800c024:	d1bc      	bne.n	800bfa0 <_printf_float+0x100>
 800c026:	2301      	movs	r3, #1
 800c028:	e7b9      	b.n	800bf9e <_printf_float+0xfe>
 800c02a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c02e:	d118      	bne.n	800c062 <_printf_float+0x1c2>
 800c030:	2900      	cmp	r1, #0
 800c032:	6863      	ldr	r3, [r4, #4]
 800c034:	dd0b      	ble.n	800c04e <_printf_float+0x1ae>
 800c036:	6121      	str	r1, [r4, #16]
 800c038:	b913      	cbnz	r3, 800c040 <_printf_float+0x1a0>
 800c03a:	6822      	ldr	r2, [r4, #0]
 800c03c:	07d0      	lsls	r0, r2, #31
 800c03e:	d502      	bpl.n	800c046 <_printf_float+0x1a6>
 800c040:	3301      	adds	r3, #1
 800c042:	440b      	add	r3, r1
 800c044:	6123      	str	r3, [r4, #16]
 800c046:	65a1      	str	r1, [r4, #88]	; 0x58
 800c048:	f04f 0900 	mov.w	r9, #0
 800c04c:	e7de      	b.n	800c00c <_printf_float+0x16c>
 800c04e:	b913      	cbnz	r3, 800c056 <_printf_float+0x1b6>
 800c050:	6822      	ldr	r2, [r4, #0]
 800c052:	07d2      	lsls	r2, r2, #31
 800c054:	d501      	bpl.n	800c05a <_printf_float+0x1ba>
 800c056:	3302      	adds	r3, #2
 800c058:	e7f4      	b.n	800c044 <_printf_float+0x1a4>
 800c05a:	2301      	movs	r3, #1
 800c05c:	e7f2      	b.n	800c044 <_printf_float+0x1a4>
 800c05e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c064:	4299      	cmp	r1, r3
 800c066:	db05      	blt.n	800c074 <_printf_float+0x1d4>
 800c068:	6823      	ldr	r3, [r4, #0]
 800c06a:	6121      	str	r1, [r4, #16]
 800c06c:	07d8      	lsls	r0, r3, #31
 800c06e:	d5ea      	bpl.n	800c046 <_printf_float+0x1a6>
 800c070:	1c4b      	adds	r3, r1, #1
 800c072:	e7e7      	b.n	800c044 <_printf_float+0x1a4>
 800c074:	2900      	cmp	r1, #0
 800c076:	bfd4      	ite	le
 800c078:	f1c1 0202 	rsble	r2, r1, #2
 800c07c:	2201      	movgt	r2, #1
 800c07e:	4413      	add	r3, r2
 800c080:	e7e0      	b.n	800c044 <_printf_float+0x1a4>
 800c082:	6823      	ldr	r3, [r4, #0]
 800c084:	055a      	lsls	r2, r3, #21
 800c086:	d407      	bmi.n	800c098 <_printf_float+0x1f8>
 800c088:	6923      	ldr	r3, [r4, #16]
 800c08a:	4642      	mov	r2, r8
 800c08c:	4631      	mov	r1, r6
 800c08e:	4628      	mov	r0, r5
 800c090:	47b8      	blx	r7
 800c092:	3001      	adds	r0, #1
 800c094:	d12c      	bne.n	800c0f0 <_printf_float+0x250>
 800c096:	e764      	b.n	800bf62 <_printf_float+0xc2>
 800c098:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c09c:	f240 80e0 	bls.w	800c260 <_printf_float+0x3c0>
 800c0a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	f7f4 fd0e 	bl	8000ac8 <__aeabi_dcmpeq>
 800c0ac:	2800      	cmp	r0, #0
 800c0ae:	d034      	beq.n	800c11a <_printf_float+0x27a>
 800c0b0:	4a37      	ldr	r2, [pc, #220]	; (800c190 <_printf_float+0x2f0>)
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	4631      	mov	r1, r6
 800c0b6:	4628      	mov	r0, r5
 800c0b8:	47b8      	blx	r7
 800c0ba:	3001      	adds	r0, #1
 800c0bc:	f43f af51 	beq.w	800bf62 <_printf_float+0xc2>
 800c0c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c0c4:	429a      	cmp	r2, r3
 800c0c6:	db02      	blt.n	800c0ce <_printf_float+0x22e>
 800c0c8:	6823      	ldr	r3, [r4, #0]
 800c0ca:	07d8      	lsls	r0, r3, #31
 800c0cc:	d510      	bpl.n	800c0f0 <_printf_float+0x250>
 800c0ce:	ee18 3a10 	vmov	r3, s16
 800c0d2:	4652      	mov	r2, sl
 800c0d4:	4631      	mov	r1, r6
 800c0d6:	4628      	mov	r0, r5
 800c0d8:	47b8      	blx	r7
 800c0da:	3001      	adds	r0, #1
 800c0dc:	f43f af41 	beq.w	800bf62 <_printf_float+0xc2>
 800c0e0:	f04f 0800 	mov.w	r8, #0
 800c0e4:	f104 091a 	add.w	r9, r4, #26
 800c0e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0ea:	3b01      	subs	r3, #1
 800c0ec:	4543      	cmp	r3, r8
 800c0ee:	dc09      	bgt.n	800c104 <_printf_float+0x264>
 800c0f0:	6823      	ldr	r3, [r4, #0]
 800c0f2:	079b      	lsls	r3, r3, #30
 800c0f4:	f100 8105 	bmi.w	800c302 <_printf_float+0x462>
 800c0f8:	68e0      	ldr	r0, [r4, #12]
 800c0fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0fc:	4298      	cmp	r0, r3
 800c0fe:	bfb8      	it	lt
 800c100:	4618      	movlt	r0, r3
 800c102:	e730      	b.n	800bf66 <_printf_float+0xc6>
 800c104:	2301      	movs	r3, #1
 800c106:	464a      	mov	r2, r9
 800c108:	4631      	mov	r1, r6
 800c10a:	4628      	mov	r0, r5
 800c10c:	47b8      	blx	r7
 800c10e:	3001      	adds	r0, #1
 800c110:	f43f af27 	beq.w	800bf62 <_printf_float+0xc2>
 800c114:	f108 0801 	add.w	r8, r8, #1
 800c118:	e7e6      	b.n	800c0e8 <_printf_float+0x248>
 800c11a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	dc39      	bgt.n	800c194 <_printf_float+0x2f4>
 800c120:	4a1b      	ldr	r2, [pc, #108]	; (800c190 <_printf_float+0x2f0>)
 800c122:	2301      	movs	r3, #1
 800c124:	4631      	mov	r1, r6
 800c126:	4628      	mov	r0, r5
 800c128:	47b8      	blx	r7
 800c12a:	3001      	adds	r0, #1
 800c12c:	f43f af19 	beq.w	800bf62 <_printf_float+0xc2>
 800c130:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c134:	4313      	orrs	r3, r2
 800c136:	d102      	bne.n	800c13e <_printf_float+0x29e>
 800c138:	6823      	ldr	r3, [r4, #0]
 800c13a:	07d9      	lsls	r1, r3, #31
 800c13c:	d5d8      	bpl.n	800c0f0 <_printf_float+0x250>
 800c13e:	ee18 3a10 	vmov	r3, s16
 800c142:	4652      	mov	r2, sl
 800c144:	4631      	mov	r1, r6
 800c146:	4628      	mov	r0, r5
 800c148:	47b8      	blx	r7
 800c14a:	3001      	adds	r0, #1
 800c14c:	f43f af09 	beq.w	800bf62 <_printf_float+0xc2>
 800c150:	f04f 0900 	mov.w	r9, #0
 800c154:	f104 0a1a 	add.w	sl, r4, #26
 800c158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c15a:	425b      	negs	r3, r3
 800c15c:	454b      	cmp	r3, r9
 800c15e:	dc01      	bgt.n	800c164 <_printf_float+0x2c4>
 800c160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c162:	e792      	b.n	800c08a <_printf_float+0x1ea>
 800c164:	2301      	movs	r3, #1
 800c166:	4652      	mov	r2, sl
 800c168:	4631      	mov	r1, r6
 800c16a:	4628      	mov	r0, r5
 800c16c:	47b8      	blx	r7
 800c16e:	3001      	adds	r0, #1
 800c170:	f43f aef7 	beq.w	800bf62 <_printf_float+0xc2>
 800c174:	f109 0901 	add.w	r9, r9, #1
 800c178:	e7ee      	b.n	800c158 <_printf_float+0x2b8>
 800c17a:	bf00      	nop
 800c17c:	7fefffff 	.word	0x7fefffff
 800c180:	08010ac8 	.word	0x08010ac8
 800c184:	08010acc 	.word	0x08010acc
 800c188:	08010ad4 	.word	0x08010ad4
 800c18c:	08010ad0 	.word	0x08010ad0
 800c190:	08010ad8 	.word	0x08010ad8
 800c194:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c196:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c198:	429a      	cmp	r2, r3
 800c19a:	bfa8      	it	ge
 800c19c:	461a      	movge	r2, r3
 800c19e:	2a00      	cmp	r2, #0
 800c1a0:	4691      	mov	r9, r2
 800c1a2:	dc37      	bgt.n	800c214 <_printf_float+0x374>
 800c1a4:	f04f 0b00 	mov.w	fp, #0
 800c1a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c1ac:	f104 021a 	add.w	r2, r4, #26
 800c1b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c1b2:	9305      	str	r3, [sp, #20]
 800c1b4:	eba3 0309 	sub.w	r3, r3, r9
 800c1b8:	455b      	cmp	r3, fp
 800c1ba:	dc33      	bgt.n	800c224 <_printf_float+0x384>
 800c1bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c1c0:	429a      	cmp	r2, r3
 800c1c2:	db3b      	blt.n	800c23c <_printf_float+0x39c>
 800c1c4:	6823      	ldr	r3, [r4, #0]
 800c1c6:	07da      	lsls	r2, r3, #31
 800c1c8:	d438      	bmi.n	800c23c <_printf_float+0x39c>
 800c1ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c1cc:	9b05      	ldr	r3, [sp, #20]
 800c1ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c1d0:	1ad3      	subs	r3, r2, r3
 800c1d2:	eba2 0901 	sub.w	r9, r2, r1
 800c1d6:	4599      	cmp	r9, r3
 800c1d8:	bfa8      	it	ge
 800c1da:	4699      	movge	r9, r3
 800c1dc:	f1b9 0f00 	cmp.w	r9, #0
 800c1e0:	dc35      	bgt.n	800c24e <_printf_float+0x3ae>
 800c1e2:	f04f 0800 	mov.w	r8, #0
 800c1e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c1ea:	f104 0a1a 	add.w	sl, r4, #26
 800c1ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c1f2:	1a9b      	subs	r3, r3, r2
 800c1f4:	eba3 0309 	sub.w	r3, r3, r9
 800c1f8:	4543      	cmp	r3, r8
 800c1fa:	f77f af79 	ble.w	800c0f0 <_printf_float+0x250>
 800c1fe:	2301      	movs	r3, #1
 800c200:	4652      	mov	r2, sl
 800c202:	4631      	mov	r1, r6
 800c204:	4628      	mov	r0, r5
 800c206:	47b8      	blx	r7
 800c208:	3001      	adds	r0, #1
 800c20a:	f43f aeaa 	beq.w	800bf62 <_printf_float+0xc2>
 800c20e:	f108 0801 	add.w	r8, r8, #1
 800c212:	e7ec      	b.n	800c1ee <_printf_float+0x34e>
 800c214:	4613      	mov	r3, r2
 800c216:	4631      	mov	r1, r6
 800c218:	4642      	mov	r2, r8
 800c21a:	4628      	mov	r0, r5
 800c21c:	47b8      	blx	r7
 800c21e:	3001      	adds	r0, #1
 800c220:	d1c0      	bne.n	800c1a4 <_printf_float+0x304>
 800c222:	e69e      	b.n	800bf62 <_printf_float+0xc2>
 800c224:	2301      	movs	r3, #1
 800c226:	4631      	mov	r1, r6
 800c228:	4628      	mov	r0, r5
 800c22a:	9205      	str	r2, [sp, #20]
 800c22c:	47b8      	blx	r7
 800c22e:	3001      	adds	r0, #1
 800c230:	f43f ae97 	beq.w	800bf62 <_printf_float+0xc2>
 800c234:	9a05      	ldr	r2, [sp, #20]
 800c236:	f10b 0b01 	add.w	fp, fp, #1
 800c23a:	e7b9      	b.n	800c1b0 <_printf_float+0x310>
 800c23c:	ee18 3a10 	vmov	r3, s16
 800c240:	4652      	mov	r2, sl
 800c242:	4631      	mov	r1, r6
 800c244:	4628      	mov	r0, r5
 800c246:	47b8      	blx	r7
 800c248:	3001      	adds	r0, #1
 800c24a:	d1be      	bne.n	800c1ca <_printf_float+0x32a>
 800c24c:	e689      	b.n	800bf62 <_printf_float+0xc2>
 800c24e:	9a05      	ldr	r2, [sp, #20]
 800c250:	464b      	mov	r3, r9
 800c252:	4442      	add	r2, r8
 800c254:	4631      	mov	r1, r6
 800c256:	4628      	mov	r0, r5
 800c258:	47b8      	blx	r7
 800c25a:	3001      	adds	r0, #1
 800c25c:	d1c1      	bne.n	800c1e2 <_printf_float+0x342>
 800c25e:	e680      	b.n	800bf62 <_printf_float+0xc2>
 800c260:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c262:	2a01      	cmp	r2, #1
 800c264:	dc01      	bgt.n	800c26a <_printf_float+0x3ca>
 800c266:	07db      	lsls	r3, r3, #31
 800c268:	d538      	bpl.n	800c2dc <_printf_float+0x43c>
 800c26a:	2301      	movs	r3, #1
 800c26c:	4642      	mov	r2, r8
 800c26e:	4631      	mov	r1, r6
 800c270:	4628      	mov	r0, r5
 800c272:	47b8      	blx	r7
 800c274:	3001      	adds	r0, #1
 800c276:	f43f ae74 	beq.w	800bf62 <_printf_float+0xc2>
 800c27a:	ee18 3a10 	vmov	r3, s16
 800c27e:	4652      	mov	r2, sl
 800c280:	4631      	mov	r1, r6
 800c282:	4628      	mov	r0, r5
 800c284:	47b8      	blx	r7
 800c286:	3001      	adds	r0, #1
 800c288:	f43f ae6b 	beq.w	800bf62 <_printf_float+0xc2>
 800c28c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c290:	2200      	movs	r2, #0
 800c292:	2300      	movs	r3, #0
 800c294:	f7f4 fc18 	bl	8000ac8 <__aeabi_dcmpeq>
 800c298:	b9d8      	cbnz	r0, 800c2d2 <_printf_float+0x432>
 800c29a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c29c:	f108 0201 	add.w	r2, r8, #1
 800c2a0:	3b01      	subs	r3, #1
 800c2a2:	4631      	mov	r1, r6
 800c2a4:	4628      	mov	r0, r5
 800c2a6:	47b8      	blx	r7
 800c2a8:	3001      	adds	r0, #1
 800c2aa:	d10e      	bne.n	800c2ca <_printf_float+0x42a>
 800c2ac:	e659      	b.n	800bf62 <_printf_float+0xc2>
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	4652      	mov	r2, sl
 800c2b2:	4631      	mov	r1, r6
 800c2b4:	4628      	mov	r0, r5
 800c2b6:	47b8      	blx	r7
 800c2b8:	3001      	adds	r0, #1
 800c2ba:	f43f ae52 	beq.w	800bf62 <_printf_float+0xc2>
 800c2be:	f108 0801 	add.w	r8, r8, #1
 800c2c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2c4:	3b01      	subs	r3, #1
 800c2c6:	4543      	cmp	r3, r8
 800c2c8:	dcf1      	bgt.n	800c2ae <_printf_float+0x40e>
 800c2ca:	464b      	mov	r3, r9
 800c2cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c2d0:	e6dc      	b.n	800c08c <_printf_float+0x1ec>
 800c2d2:	f04f 0800 	mov.w	r8, #0
 800c2d6:	f104 0a1a 	add.w	sl, r4, #26
 800c2da:	e7f2      	b.n	800c2c2 <_printf_float+0x422>
 800c2dc:	2301      	movs	r3, #1
 800c2de:	4642      	mov	r2, r8
 800c2e0:	e7df      	b.n	800c2a2 <_printf_float+0x402>
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	464a      	mov	r2, r9
 800c2e6:	4631      	mov	r1, r6
 800c2e8:	4628      	mov	r0, r5
 800c2ea:	47b8      	blx	r7
 800c2ec:	3001      	adds	r0, #1
 800c2ee:	f43f ae38 	beq.w	800bf62 <_printf_float+0xc2>
 800c2f2:	f108 0801 	add.w	r8, r8, #1
 800c2f6:	68e3      	ldr	r3, [r4, #12]
 800c2f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c2fa:	1a5b      	subs	r3, r3, r1
 800c2fc:	4543      	cmp	r3, r8
 800c2fe:	dcf0      	bgt.n	800c2e2 <_printf_float+0x442>
 800c300:	e6fa      	b.n	800c0f8 <_printf_float+0x258>
 800c302:	f04f 0800 	mov.w	r8, #0
 800c306:	f104 0919 	add.w	r9, r4, #25
 800c30a:	e7f4      	b.n	800c2f6 <_printf_float+0x456>

0800c30c <_printf_common>:
 800c30c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c310:	4616      	mov	r6, r2
 800c312:	4699      	mov	r9, r3
 800c314:	688a      	ldr	r2, [r1, #8]
 800c316:	690b      	ldr	r3, [r1, #16]
 800c318:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c31c:	4293      	cmp	r3, r2
 800c31e:	bfb8      	it	lt
 800c320:	4613      	movlt	r3, r2
 800c322:	6033      	str	r3, [r6, #0]
 800c324:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c328:	4607      	mov	r7, r0
 800c32a:	460c      	mov	r4, r1
 800c32c:	b10a      	cbz	r2, 800c332 <_printf_common+0x26>
 800c32e:	3301      	adds	r3, #1
 800c330:	6033      	str	r3, [r6, #0]
 800c332:	6823      	ldr	r3, [r4, #0]
 800c334:	0699      	lsls	r1, r3, #26
 800c336:	bf42      	ittt	mi
 800c338:	6833      	ldrmi	r3, [r6, #0]
 800c33a:	3302      	addmi	r3, #2
 800c33c:	6033      	strmi	r3, [r6, #0]
 800c33e:	6825      	ldr	r5, [r4, #0]
 800c340:	f015 0506 	ands.w	r5, r5, #6
 800c344:	d106      	bne.n	800c354 <_printf_common+0x48>
 800c346:	f104 0a19 	add.w	sl, r4, #25
 800c34a:	68e3      	ldr	r3, [r4, #12]
 800c34c:	6832      	ldr	r2, [r6, #0]
 800c34e:	1a9b      	subs	r3, r3, r2
 800c350:	42ab      	cmp	r3, r5
 800c352:	dc26      	bgt.n	800c3a2 <_printf_common+0x96>
 800c354:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c358:	1e13      	subs	r3, r2, #0
 800c35a:	6822      	ldr	r2, [r4, #0]
 800c35c:	bf18      	it	ne
 800c35e:	2301      	movne	r3, #1
 800c360:	0692      	lsls	r2, r2, #26
 800c362:	d42b      	bmi.n	800c3bc <_printf_common+0xb0>
 800c364:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c368:	4649      	mov	r1, r9
 800c36a:	4638      	mov	r0, r7
 800c36c:	47c0      	blx	r8
 800c36e:	3001      	adds	r0, #1
 800c370:	d01e      	beq.n	800c3b0 <_printf_common+0xa4>
 800c372:	6823      	ldr	r3, [r4, #0]
 800c374:	68e5      	ldr	r5, [r4, #12]
 800c376:	6832      	ldr	r2, [r6, #0]
 800c378:	f003 0306 	and.w	r3, r3, #6
 800c37c:	2b04      	cmp	r3, #4
 800c37e:	bf08      	it	eq
 800c380:	1aad      	subeq	r5, r5, r2
 800c382:	68a3      	ldr	r3, [r4, #8]
 800c384:	6922      	ldr	r2, [r4, #16]
 800c386:	bf0c      	ite	eq
 800c388:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c38c:	2500      	movne	r5, #0
 800c38e:	4293      	cmp	r3, r2
 800c390:	bfc4      	itt	gt
 800c392:	1a9b      	subgt	r3, r3, r2
 800c394:	18ed      	addgt	r5, r5, r3
 800c396:	2600      	movs	r6, #0
 800c398:	341a      	adds	r4, #26
 800c39a:	42b5      	cmp	r5, r6
 800c39c:	d11a      	bne.n	800c3d4 <_printf_common+0xc8>
 800c39e:	2000      	movs	r0, #0
 800c3a0:	e008      	b.n	800c3b4 <_printf_common+0xa8>
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	4652      	mov	r2, sl
 800c3a6:	4649      	mov	r1, r9
 800c3a8:	4638      	mov	r0, r7
 800c3aa:	47c0      	blx	r8
 800c3ac:	3001      	adds	r0, #1
 800c3ae:	d103      	bne.n	800c3b8 <_printf_common+0xac>
 800c3b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c3b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3b8:	3501      	adds	r5, #1
 800c3ba:	e7c6      	b.n	800c34a <_printf_common+0x3e>
 800c3bc:	18e1      	adds	r1, r4, r3
 800c3be:	1c5a      	adds	r2, r3, #1
 800c3c0:	2030      	movs	r0, #48	; 0x30
 800c3c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c3c6:	4422      	add	r2, r4
 800c3c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c3cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c3d0:	3302      	adds	r3, #2
 800c3d2:	e7c7      	b.n	800c364 <_printf_common+0x58>
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	4622      	mov	r2, r4
 800c3d8:	4649      	mov	r1, r9
 800c3da:	4638      	mov	r0, r7
 800c3dc:	47c0      	blx	r8
 800c3de:	3001      	adds	r0, #1
 800c3e0:	d0e6      	beq.n	800c3b0 <_printf_common+0xa4>
 800c3e2:	3601      	adds	r6, #1
 800c3e4:	e7d9      	b.n	800c39a <_printf_common+0x8e>
	...

0800c3e8 <_printf_i>:
 800c3e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c3ec:	460c      	mov	r4, r1
 800c3ee:	4691      	mov	r9, r2
 800c3f0:	7e27      	ldrb	r7, [r4, #24]
 800c3f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c3f4:	2f78      	cmp	r7, #120	; 0x78
 800c3f6:	4680      	mov	r8, r0
 800c3f8:	469a      	mov	sl, r3
 800c3fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c3fe:	d807      	bhi.n	800c410 <_printf_i+0x28>
 800c400:	2f62      	cmp	r7, #98	; 0x62
 800c402:	d80a      	bhi.n	800c41a <_printf_i+0x32>
 800c404:	2f00      	cmp	r7, #0
 800c406:	f000 80d8 	beq.w	800c5ba <_printf_i+0x1d2>
 800c40a:	2f58      	cmp	r7, #88	; 0x58
 800c40c:	f000 80a3 	beq.w	800c556 <_printf_i+0x16e>
 800c410:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c414:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c418:	e03a      	b.n	800c490 <_printf_i+0xa8>
 800c41a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c41e:	2b15      	cmp	r3, #21
 800c420:	d8f6      	bhi.n	800c410 <_printf_i+0x28>
 800c422:	a001      	add	r0, pc, #4	; (adr r0, 800c428 <_printf_i+0x40>)
 800c424:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c428:	0800c481 	.word	0x0800c481
 800c42c:	0800c495 	.word	0x0800c495
 800c430:	0800c411 	.word	0x0800c411
 800c434:	0800c411 	.word	0x0800c411
 800c438:	0800c411 	.word	0x0800c411
 800c43c:	0800c411 	.word	0x0800c411
 800c440:	0800c495 	.word	0x0800c495
 800c444:	0800c411 	.word	0x0800c411
 800c448:	0800c411 	.word	0x0800c411
 800c44c:	0800c411 	.word	0x0800c411
 800c450:	0800c411 	.word	0x0800c411
 800c454:	0800c5a1 	.word	0x0800c5a1
 800c458:	0800c4c5 	.word	0x0800c4c5
 800c45c:	0800c583 	.word	0x0800c583
 800c460:	0800c411 	.word	0x0800c411
 800c464:	0800c411 	.word	0x0800c411
 800c468:	0800c5c3 	.word	0x0800c5c3
 800c46c:	0800c411 	.word	0x0800c411
 800c470:	0800c4c5 	.word	0x0800c4c5
 800c474:	0800c411 	.word	0x0800c411
 800c478:	0800c411 	.word	0x0800c411
 800c47c:	0800c58b 	.word	0x0800c58b
 800c480:	680b      	ldr	r3, [r1, #0]
 800c482:	1d1a      	adds	r2, r3, #4
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	600a      	str	r2, [r1, #0]
 800c488:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c48c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c490:	2301      	movs	r3, #1
 800c492:	e0a3      	b.n	800c5dc <_printf_i+0x1f4>
 800c494:	6825      	ldr	r5, [r4, #0]
 800c496:	6808      	ldr	r0, [r1, #0]
 800c498:	062e      	lsls	r6, r5, #24
 800c49a:	f100 0304 	add.w	r3, r0, #4
 800c49e:	d50a      	bpl.n	800c4b6 <_printf_i+0xce>
 800c4a0:	6805      	ldr	r5, [r0, #0]
 800c4a2:	600b      	str	r3, [r1, #0]
 800c4a4:	2d00      	cmp	r5, #0
 800c4a6:	da03      	bge.n	800c4b0 <_printf_i+0xc8>
 800c4a8:	232d      	movs	r3, #45	; 0x2d
 800c4aa:	426d      	negs	r5, r5
 800c4ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c4b0:	485e      	ldr	r0, [pc, #376]	; (800c62c <_printf_i+0x244>)
 800c4b2:	230a      	movs	r3, #10
 800c4b4:	e019      	b.n	800c4ea <_printf_i+0x102>
 800c4b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c4ba:	6805      	ldr	r5, [r0, #0]
 800c4bc:	600b      	str	r3, [r1, #0]
 800c4be:	bf18      	it	ne
 800c4c0:	b22d      	sxthne	r5, r5
 800c4c2:	e7ef      	b.n	800c4a4 <_printf_i+0xbc>
 800c4c4:	680b      	ldr	r3, [r1, #0]
 800c4c6:	6825      	ldr	r5, [r4, #0]
 800c4c8:	1d18      	adds	r0, r3, #4
 800c4ca:	6008      	str	r0, [r1, #0]
 800c4cc:	0628      	lsls	r0, r5, #24
 800c4ce:	d501      	bpl.n	800c4d4 <_printf_i+0xec>
 800c4d0:	681d      	ldr	r5, [r3, #0]
 800c4d2:	e002      	b.n	800c4da <_printf_i+0xf2>
 800c4d4:	0669      	lsls	r1, r5, #25
 800c4d6:	d5fb      	bpl.n	800c4d0 <_printf_i+0xe8>
 800c4d8:	881d      	ldrh	r5, [r3, #0]
 800c4da:	4854      	ldr	r0, [pc, #336]	; (800c62c <_printf_i+0x244>)
 800c4dc:	2f6f      	cmp	r7, #111	; 0x6f
 800c4de:	bf0c      	ite	eq
 800c4e0:	2308      	moveq	r3, #8
 800c4e2:	230a      	movne	r3, #10
 800c4e4:	2100      	movs	r1, #0
 800c4e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c4ea:	6866      	ldr	r6, [r4, #4]
 800c4ec:	60a6      	str	r6, [r4, #8]
 800c4ee:	2e00      	cmp	r6, #0
 800c4f0:	bfa2      	ittt	ge
 800c4f2:	6821      	ldrge	r1, [r4, #0]
 800c4f4:	f021 0104 	bicge.w	r1, r1, #4
 800c4f8:	6021      	strge	r1, [r4, #0]
 800c4fa:	b90d      	cbnz	r5, 800c500 <_printf_i+0x118>
 800c4fc:	2e00      	cmp	r6, #0
 800c4fe:	d04d      	beq.n	800c59c <_printf_i+0x1b4>
 800c500:	4616      	mov	r6, r2
 800c502:	fbb5 f1f3 	udiv	r1, r5, r3
 800c506:	fb03 5711 	mls	r7, r3, r1, r5
 800c50a:	5dc7      	ldrb	r7, [r0, r7]
 800c50c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c510:	462f      	mov	r7, r5
 800c512:	42bb      	cmp	r3, r7
 800c514:	460d      	mov	r5, r1
 800c516:	d9f4      	bls.n	800c502 <_printf_i+0x11a>
 800c518:	2b08      	cmp	r3, #8
 800c51a:	d10b      	bne.n	800c534 <_printf_i+0x14c>
 800c51c:	6823      	ldr	r3, [r4, #0]
 800c51e:	07df      	lsls	r7, r3, #31
 800c520:	d508      	bpl.n	800c534 <_printf_i+0x14c>
 800c522:	6923      	ldr	r3, [r4, #16]
 800c524:	6861      	ldr	r1, [r4, #4]
 800c526:	4299      	cmp	r1, r3
 800c528:	bfde      	ittt	le
 800c52a:	2330      	movle	r3, #48	; 0x30
 800c52c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c530:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c534:	1b92      	subs	r2, r2, r6
 800c536:	6122      	str	r2, [r4, #16]
 800c538:	f8cd a000 	str.w	sl, [sp]
 800c53c:	464b      	mov	r3, r9
 800c53e:	aa03      	add	r2, sp, #12
 800c540:	4621      	mov	r1, r4
 800c542:	4640      	mov	r0, r8
 800c544:	f7ff fee2 	bl	800c30c <_printf_common>
 800c548:	3001      	adds	r0, #1
 800c54a:	d14c      	bne.n	800c5e6 <_printf_i+0x1fe>
 800c54c:	f04f 30ff 	mov.w	r0, #4294967295
 800c550:	b004      	add	sp, #16
 800c552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c556:	4835      	ldr	r0, [pc, #212]	; (800c62c <_printf_i+0x244>)
 800c558:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c55c:	6823      	ldr	r3, [r4, #0]
 800c55e:	680e      	ldr	r6, [r1, #0]
 800c560:	061f      	lsls	r7, r3, #24
 800c562:	f856 5b04 	ldr.w	r5, [r6], #4
 800c566:	600e      	str	r6, [r1, #0]
 800c568:	d514      	bpl.n	800c594 <_printf_i+0x1ac>
 800c56a:	07d9      	lsls	r1, r3, #31
 800c56c:	bf44      	itt	mi
 800c56e:	f043 0320 	orrmi.w	r3, r3, #32
 800c572:	6023      	strmi	r3, [r4, #0]
 800c574:	b91d      	cbnz	r5, 800c57e <_printf_i+0x196>
 800c576:	6823      	ldr	r3, [r4, #0]
 800c578:	f023 0320 	bic.w	r3, r3, #32
 800c57c:	6023      	str	r3, [r4, #0]
 800c57e:	2310      	movs	r3, #16
 800c580:	e7b0      	b.n	800c4e4 <_printf_i+0xfc>
 800c582:	6823      	ldr	r3, [r4, #0]
 800c584:	f043 0320 	orr.w	r3, r3, #32
 800c588:	6023      	str	r3, [r4, #0]
 800c58a:	2378      	movs	r3, #120	; 0x78
 800c58c:	4828      	ldr	r0, [pc, #160]	; (800c630 <_printf_i+0x248>)
 800c58e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c592:	e7e3      	b.n	800c55c <_printf_i+0x174>
 800c594:	065e      	lsls	r6, r3, #25
 800c596:	bf48      	it	mi
 800c598:	b2ad      	uxthmi	r5, r5
 800c59a:	e7e6      	b.n	800c56a <_printf_i+0x182>
 800c59c:	4616      	mov	r6, r2
 800c59e:	e7bb      	b.n	800c518 <_printf_i+0x130>
 800c5a0:	680b      	ldr	r3, [r1, #0]
 800c5a2:	6826      	ldr	r6, [r4, #0]
 800c5a4:	6960      	ldr	r0, [r4, #20]
 800c5a6:	1d1d      	adds	r5, r3, #4
 800c5a8:	600d      	str	r5, [r1, #0]
 800c5aa:	0635      	lsls	r5, r6, #24
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	d501      	bpl.n	800c5b4 <_printf_i+0x1cc>
 800c5b0:	6018      	str	r0, [r3, #0]
 800c5b2:	e002      	b.n	800c5ba <_printf_i+0x1d2>
 800c5b4:	0671      	lsls	r1, r6, #25
 800c5b6:	d5fb      	bpl.n	800c5b0 <_printf_i+0x1c8>
 800c5b8:	8018      	strh	r0, [r3, #0]
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	6123      	str	r3, [r4, #16]
 800c5be:	4616      	mov	r6, r2
 800c5c0:	e7ba      	b.n	800c538 <_printf_i+0x150>
 800c5c2:	680b      	ldr	r3, [r1, #0]
 800c5c4:	1d1a      	adds	r2, r3, #4
 800c5c6:	600a      	str	r2, [r1, #0]
 800c5c8:	681e      	ldr	r6, [r3, #0]
 800c5ca:	6862      	ldr	r2, [r4, #4]
 800c5cc:	2100      	movs	r1, #0
 800c5ce:	4630      	mov	r0, r6
 800c5d0:	f7f3 fe06 	bl	80001e0 <memchr>
 800c5d4:	b108      	cbz	r0, 800c5da <_printf_i+0x1f2>
 800c5d6:	1b80      	subs	r0, r0, r6
 800c5d8:	6060      	str	r0, [r4, #4]
 800c5da:	6863      	ldr	r3, [r4, #4]
 800c5dc:	6123      	str	r3, [r4, #16]
 800c5de:	2300      	movs	r3, #0
 800c5e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5e4:	e7a8      	b.n	800c538 <_printf_i+0x150>
 800c5e6:	6923      	ldr	r3, [r4, #16]
 800c5e8:	4632      	mov	r2, r6
 800c5ea:	4649      	mov	r1, r9
 800c5ec:	4640      	mov	r0, r8
 800c5ee:	47d0      	blx	sl
 800c5f0:	3001      	adds	r0, #1
 800c5f2:	d0ab      	beq.n	800c54c <_printf_i+0x164>
 800c5f4:	6823      	ldr	r3, [r4, #0]
 800c5f6:	079b      	lsls	r3, r3, #30
 800c5f8:	d413      	bmi.n	800c622 <_printf_i+0x23a>
 800c5fa:	68e0      	ldr	r0, [r4, #12]
 800c5fc:	9b03      	ldr	r3, [sp, #12]
 800c5fe:	4298      	cmp	r0, r3
 800c600:	bfb8      	it	lt
 800c602:	4618      	movlt	r0, r3
 800c604:	e7a4      	b.n	800c550 <_printf_i+0x168>
 800c606:	2301      	movs	r3, #1
 800c608:	4632      	mov	r2, r6
 800c60a:	4649      	mov	r1, r9
 800c60c:	4640      	mov	r0, r8
 800c60e:	47d0      	blx	sl
 800c610:	3001      	adds	r0, #1
 800c612:	d09b      	beq.n	800c54c <_printf_i+0x164>
 800c614:	3501      	adds	r5, #1
 800c616:	68e3      	ldr	r3, [r4, #12]
 800c618:	9903      	ldr	r1, [sp, #12]
 800c61a:	1a5b      	subs	r3, r3, r1
 800c61c:	42ab      	cmp	r3, r5
 800c61e:	dcf2      	bgt.n	800c606 <_printf_i+0x21e>
 800c620:	e7eb      	b.n	800c5fa <_printf_i+0x212>
 800c622:	2500      	movs	r5, #0
 800c624:	f104 0619 	add.w	r6, r4, #25
 800c628:	e7f5      	b.n	800c616 <_printf_i+0x22e>
 800c62a:	bf00      	nop
 800c62c:	08010ada 	.word	0x08010ada
 800c630:	08010aeb 	.word	0x08010aeb

0800c634 <_scanf_float>:
 800c634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c638:	b087      	sub	sp, #28
 800c63a:	4617      	mov	r7, r2
 800c63c:	9303      	str	r3, [sp, #12]
 800c63e:	688b      	ldr	r3, [r1, #8]
 800c640:	1e5a      	subs	r2, r3, #1
 800c642:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c646:	bf83      	ittte	hi
 800c648:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c64c:	195b      	addhi	r3, r3, r5
 800c64e:	9302      	strhi	r3, [sp, #8]
 800c650:	2300      	movls	r3, #0
 800c652:	bf86      	itte	hi
 800c654:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c658:	608b      	strhi	r3, [r1, #8]
 800c65a:	9302      	strls	r3, [sp, #8]
 800c65c:	680b      	ldr	r3, [r1, #0]
 800c65e:	468b      	mov	fp, r1
 800c660:	2500      	movs	r5, #0
 800c662:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c666:	f84b 3b1c 	str.w	r3, [fp], #28
 800c66a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c66e:	4680      	mov	r8, r0
 800c670:	460c      	mov	r4, r1
 800c672:	465e      	mov	r6, fp
 800c674:	46aa      	mov	sl, r5
 800c676:	46a9      	mov	r9, r5
 800c678:	9501      	str	r5, [sp, #4]
 800c67a:	68a2      	ldr	r2, [r4, #8]
 800c67c:	b152      	cbz	r2, 800c694 <_scanf_float+0x60>
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	781b      	ldrb	r3, [r3, #0]
 800c682:	2b4e      	cmp	r3, #78	; 0x4e
 800c684:	d864      	bhi.n	800c750 <_scanf_float+0x11c>
 800c686:	2b40      	cmp	r3, #64	; 0x40
 800c688:	d83c      	bhi.n	800c704 <_scanf_float+0xd0>
 800c68a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c68e:	b2c8      	uxtb	r0, r1
 800c690:	280e      	cmp	r0, #14
 800c692:	d93a      	bls.n	800c70a <_scanf_float+0xd6>
 800c694:	f1b9 0f00 	cmp.w	r9, #0
 800c698:	d003      	beq.n	800c6a2 <_scanf_float+0x6e>
 800c69a:	6823      	ldr	r3, [r4, #0]
 800c69c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c6a0:	6023      	str	r3, [r4, #0]
 800c6a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c6a6:	f1ba 0f01 	cmp.w	sl, #1
 800c6aa:	f200 8113 	bhi.w	800c8d4 <_scanf_float+0x2a0>
 800c6ae:	455e      	cmp	r6, fp
 800c6b0:	f200 8105 	bhi.w	800c8be <_scanf_float+0x28a>
 800c6b4:	2501      	movs	r5, #1
 800c6b6:	4628      	mov	r0, r5
 800c6b8:	b007      	add	sp, #28
 800c6ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6be:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c6c2:	2a0d      	cmp	r2, #13
 800c6c4:	d8e6      	bhi.n	800c694 <_scanf_float+0x60>
 800c6c6:	a101      	add	r1, pc, #4	; (adr r1, 800c6cc <_scanf_float+0x98>)
 800c6c8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c6cc:	0800c80b 	.word	0x0800c80b
 800c6d0:	0800c695 	.word	0x0800c695
 800c6d4:	0800c695 	.word	0x0800c695
 800c6d8:	0800c695 	.word	0x0800c695
 800c6dc:	0800c86b 	.word	0x0800c86b
 800c6e0:	0800c843 	.word	0x0800c843
 800c6e4:	0800c695 	.word	0x0800c695
 800c6e8:	0800c695 	.word	0x0800c695
 800c6ec:	0800c819 	.word	0x0800c819
 800c6f0:	0800c695 	.word	0x0800c695
 800c6f4:	0800c695 	.word	0x0800c695
 800c6f8:	0800c695 	.word	0x0800c695
 800c6fc:	0800c695 	.word	0x0800c695
 800c700:	0800c7d1 	.word	0x0800c7d1
 800c704:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800c708:	e7db      	b.n	800c6c2 <_scanf_float+0x8e>
 800c70a:	290e      	cmp	r1, #14
 800c70c:	d8c2      	bhi.n	800c694 <_scanf_float+0x60>
 800c70e:	a001      	add	r0, pc, #4	; (adr r0, 800c714 <_scanf_float+0xe0>)
 800c710:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c714:	0800c7c3 	.word	0x0800c7c3
 800c718:	0800c695 	.word	0x0800c695
 800c71c:	0800c7c3 	.word	0x0800c7c3
 800c720:	0800c857 	.word	0x0800c857
 800c724:	0800c695 	.word	0x0800c695
 800c728:	0800c771 	.word	0x0800c771
 800c72c:	0800c7ad 	.word	0x0800c7ad
 800c730:	0800c7ad 	.word	0x0800c7ad
 800c734:	0800c7ad 	.word	0x0800c7ad
 800c738:	0800c7ad 	.word	0x0800c7ad
 800c73c:	0800c7ad 	.word	0x0800c7ad
 800c740:	0800c7ad 	.word	0x0800c7ad
 800c744:	0800c7ad 	.word	0x0800c7ad
 800c748:	0800c7ad 	.word	0x0800c7ad
 800c74c:	0800c7ad 	.word	0x0800c7ad
 800c750:	2b6e      	cmp	r3, #110	; 0x6e
 800c752:	d809      	bhi.n	800c768 <_scanf_float+0x134>
 800c754:	2b60      	cmp	r3, #96	; 0x60
 800c756:	d8b2      	bhi.n	800c6be <_scanf_float+0x8a>
 800c758:	2b54      	cmp	r3, #84	; 0x54
 800c75a:	d077      	beq.n	800c84c <_scanf_float+0x218>
 800c75c:	2b59      	cmp	r3, #89	; 0x59
 800c75e:	d199      	bne.n	800c694 <_scanf_float+0x60>
 800c760:	2d07      	cmp	r5, #7
 800c762:	d197      	bne.n	800c694 <_scanf_float+0x60>
 800c764:	2508      	movs	r5, #8
 800c766:	e029      	b.n	800c7bc <_scanf_float+0x188>
 800c768:	2b74      	cmp	r3, #116	; 0x74
 800c76a:	d06f      	beq.n	800c84c <_scanf_float+0x218>
 800c76c:	2b79      	cmp	r3, #121	; 0x79
 800c76e:	e7f6      	b.n	800c75e <_scanf_float+0x12a>
 800c770:	6821      	ldr	r1, [r4, #0]
 800c772:	05c8      	lsls	r0, r1, #23
 800c774:	d51a      	bpl.n	800c7ac <_scanf_float+0x178>
 800c776:	9b02      	ldr	r3, [sp, #8]
 800c778:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c77c:	6021      	str	r1, [r4, #0]
 800c77e:	f109 0901 	add.w	r9, r9, #1
 800c782:	b11b      	cbz	r3, 800c78c <_scanf_float+0x158>
 800c784:	3b01      	subs	r3, #1
 800c786:	3201      	adds	r2, #1
 800c788:	9302      	str	r3, [sp, #8]
 800c78a:	60a2      	str	r2, [r4, #8]
 800c78c:	68a3      	ldr	r3, [r4, #8]
 800c78e:	3b01      	subs	r3, #1
 800c790:	60a3      	str	r3, [r4, #8]
 800c792:	6923      	ldr	r3, [r4, #16]
 800c794:	3301      	adds	r3, #1
 800c796:	6123      	str	r3, [r4, #16]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	3b01      	subs	r3, #1
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	607b      	str	r3, [r7, #4]
 800c7a0:	f340 8084 	ble.w	800c8ac <_scanf_float+0x278>
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	3301      	adds	r3, #1
 800c7a8:	603b      	str	r3, [r7, #0]
 800c7aa:	e766      	b.n	800c67a <_scanf_float+0x46>
 800c7ac:	eb1a 0f05 	cmn.w	sl, r5
 800c7b0:	f47f af70 	bne.w	800c694 <_scanf_float+0x60>
 800c7b4:	6822      	ldr	r2, [r4, #0]
 800c7b6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c7ba:	6022      	str	r2, [r4, #0]
 800c7bc:	f806 3b01 	strb.w	r3, [r6], #1
 800c7c0:	e7e4      	b.n	800c78c <_scanf_float+0x158>
 800c7c2:	6822      	ldr	r2, [r4, #0]
 800c7c4:	0610      	lsls	r0, r2, #24
 800c7c6:	f57f af65 	bpl.w	800c694 <_scanf_float+0x60>
 800c7ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c7ce:	e7f4      	b.n	800c7ba <_scanf_float+0x186>
 800c7d0:	f1ba 0f00 	cmp.w	sl, #0
 800c7d4:	d10e      	bne.n	800c7f4 <_scanf_float+0x1c0>
 800c7d6:	f1b9 0f00 	cmp.w	r9, #0
 800c7da:	d10e      	bne.n	800c7fa <_scanf_float+0x1c6>
 800c7dc:	6822      	ldr	r2, [r4, #0]
 800c7de:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c7e2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c7e6:	d108      	bne.n	800c7fa <_scanf_float+0x1c6>
 800c7e8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c7ec:	6022      	str	r2, [r4, #0]
 800c7ee:	f04f 0a01 	mov.w	sl, #1
 800c7f2:	e7e3      	b.n	800c7bc <_scanf_float+0x188>
 800c7f4:	f1ba 0f02 	cmp.w	sl, #2
 800c7f8:	d055      	beq.n	800c8a6 <_scanf_float+0x272>
 800c7fa:	2d01      	cmp	r5, #1
 800c7fc:	d002      	beq.n	800c804 <_scanf_float+0x1d0>
 800c7fe:	2d04      	cmp	r5, #4
 800c800:	f47f af48 	bne.w	800c694 <_scanf_float+0x60>
 800c804:	3501      	adds	r5, #1
 800c806:	b2ed      	uxtb	r5, r5
 800c808:	e7d8      	b.n	800c7bc <_scanf_float+0x188>
 800c80a:	f1ba 0f01 	cmp.w	sl, #1
 800c80e:	f47f af41 	bne.w	800c694 <_scanf_float+0x60>
 800c812:	f04f 0a02 	mov.w	sl, #2
 800c816:	e7d1      	b.n	800c7bc <_scanf_float+0x188>
 800c818:	b97d      	cbnz	r5, 800c83a <_scanf_float+0x206>
 800c81a:	f1b9 0f00 	cmp.w	r9, #0
 800c81e:	f47f af3c 	bne.w	800c69a <_scanf_float+0x66>
 800c822:	6822      	ldr	r2, [r4, #0]
 800c824:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c828:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c82c:	f47f af39 	bne.w	800c6a2 <_scanf_float+0x6e>
 800c830:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c834:	6022      	str	r2, [r4, #0]
 800c836:	2501      	movs	r5, #1
 800c838:	e7c0      	b.n	800c7bc <_scanf_float+0x188>
 800c83a:	2d03      	cmp	r5, #3
 800c83c:	d0e2      	beq.n	800c804 <_scanf_float+0x1d0>
 800c83e:	2d05      	cmp	r5, #5
 800c840:	e7de      	b.n	800c800 <_scanf_float+0x1cc>
 800c842:	2d02      	cmp	r5, #2
 800c844:	f47f af26 	bne.w	800c694 <_scanf_float+0x60>
 800c848:	2503      	movs	r5, #3
 800c84a:	e7b7      	b.n	800c7bc <_scanf_float+0x188>
 800c84c:	2d06      	cmp	r5, #6
 800c84e:	f47f af21 	bne.w	800c694 <_scanf_float+0x60>
 800c852:	2507      	movs	r5, #7
 800c854:	e7b2      	b.n	800c7bc <_scanf_float+0x188>
 800c856:	6822      	ldr	r2, [r4, #0]
 800c858:	0591      	lsls	r1, r2, #22
 800c85a:	f57f af1b 	bpl.w	800c694 <_scanf_float+0x60>
 800c85e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c862:	6022      	str	r2, [r4, #0]
 800c864:	f8cd 9004 	str.w	r9, [sp, #4]
 800c868:	e7a8      	b.n	800c7bc <_scanf_float+0x188>
 800c86a:	6822      	ldr	r2, [r4, #0]
 800c86c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c870:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c874:	d006      	beq.n	800c884 <_scanf_float+0x250>
 800c876:	0550      	lsls	r0, r2, #21
 800c878:	f57f af0c 	bpl.w	800c694 <_scanf_float+0x60>
 800c87c:	f1b9 0f00 	cmp.w	r9, #0
 800c880:	f43f af0f 	beq.w	800c6a2 <_scanf_float+0x6e>
 800c884:	0591      	lsls	r1, r2, #22
 800c886:	bf58      	it	pl
 800c888:	9901      	ldrpl	r1, [sp, #4]
 800c88a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c88e:	bf58      	it	pl
 800c890:	eba9 0101 	subpl.w	r1, r9, r1
 800c894:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c898:	bf58      	it	pl
 800c89a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c89e:	6022      	str	r2, [r4, #0]
 800c8a0:	f04f 0900 	mov.w	r9, #0
 800c8a4:	e78a      	b.n	800c7bc <_scanf_float+0x188>
 800c8a6:	f04f 0a03 	mov.w	sl, #3
 800c8aa:	e787      	b.n	800c7bc <_scanf_float+0x188>
 800c8ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c8b0:	4639      	mov	r1, r7
 800c8b2:	4640      	mov	r0, r8
 800c8b4:	4798      	blx	r3
 800c8b6:	2800      	cmp	r0, #0
 800c8b8:	f43f aedf 	beq.w	800c67a <_scanf_float+0x46>
 800c8bc:	e6ea      	b.n	800c694 <_scanf_float+0x60>
 800c8be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c8c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c8c6:	463a      	mov	r2, r7
 800c8c8:	4640      	mov	r0, r8
 800c8ca:	4798      	blx	r3
 800c8cc:	6923      	ldr	r3, [r4, #16]
 800c8ce:	3b01      	subs	r3, #1
 800c8d0:	6123      	str	r3, [r4, #16]
 800c8d2:	e6ec      	b.n	800c6ae <_scanf_float+0x7a>
 800c8d4:	1e6b      	subs	r3, r5, #1
 800c8d6:	2b06      	cmp	r3, #6
 800c8d8:	d825      	bhi.n	800c926 <_scanf_float+0x2f2>
 800c8da:	2d02      	cmp	r5, #2
 800c8dc:	d836      	bhi.n	800c94c <_scanf_float+0x318>
 800c8de:	455e      	cmp	r6, fp
 800c8e0:	f67f aee8 	bls.w	800c6b4 <_scanf_float+0x80>
 800c8e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c8e8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c8ec:	463a      	mov	r2, r7
 800c8ee:	4640      	mov	r0, r8
 800c8f0:	4798      	blx	r3
 800c8f2:	6923      	ldr	r3, [r4, #16]
 800c8f4:	3b01      	subs	r3, #1
 800c8f6:	6123      	str	r3, [r4, #16]
 800c8f8:	e7f1      	b.n	800c8de <_scanf_float+0x2aa>
 800c8fa:	9802      	ldr	r0, [sp, #8]
 800c8fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c900:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c904:	9002      	str	r0, [sp, #8]
 800c906:	463a      	mov	r2, r7
 800c908:	4640      	mov	r0, r8
 800c90a:	4798      	blx	r3
 800c90c:	6923      	ldr	r3, [r4, #16]
 800c90e:	3b01      	subs	r3, #1
 800c910:	6123      	str	r3, [r4, #16]
 800c912:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c916:	fa5f fa8a 	uxtb.w	sl, sl
 800c91a:	f1ba 0f02 	cmp.w	sl, #2
 800c91e:	d1ec      	bne.n	800c8fa <_scanf_float+0x2c6>
 800c920:	3d03      	subs	r5, #3
 800c922:	b2ed      	uxtb	r5, r5
 800c924:	1b76      	subs	r6, r6, r5
 800c926:	6823      	ldr	r3, [r4, #0]
 800c928:	05da      	lsls	r2, r3, #23
 800c92a:	d52f      	bpl.n	800c98c <_scanf_float+0x358>
 800c92c:	055b      	lsls	r3, r3, #21
 800c92e:	d510      	bpl.n	800c952 <_scanf_float+0x31e>
 800c930:	455e      	cmp	r6, fp
 800c932:	f67f aebf 	bls.w	800c6b4 <_scanf_float+0x80>
 800c936:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c93a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c93e:	463a      	mov	r2, r7
 800c940:	4640      	mov	r0, r8
 800c942:	4798      	blx	r3
 800c944:	6923      	ldr	r3, [r4, #16]
 800c946:	3b01      	subs	r3, #1
 800c948:	6123      	str	r3, [r4, #16]
 800c94a:	e7f1      	b.n	800c930 <_scanf_float+0x2fc>
 800c94c:	46aa      	mov	sl, r5
 800c94e:	9602      	str	r6, [sp, #8]
 800c950:	e7df      	b.n	800c912 <_scanf_float+0x2de>
 800c952:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c956:	6923      	ldr	r3, [r4, #16]
 800c958:	2965      	cmp	r1, #101	; 0x65
 800c95a:	f103 33ff 	add.w	r3, r3, #4294967295
 800c95e:	f106 35ff 	add.w	r5, r6, #4294967295
 800c962:	6123      	str	r3, [r4, #16]
 800c964:	d00c      	beq.n	800c980 <_scanf_float+0x34c>
 800c966:	2945      	cmp	r1, #69	; 0x45
 800c968:	d00a      	beq.n	800c980 <_scanf_float+0x34c>
 800c96a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c96e:	463a      	mov	r2, r7
 800c970:	4640      	mov	r0, r8
 800c972:	4798      	blx	r3
 800c974:	6923      	ldr	r3, [r4, #16]
 800c976:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c97a:	3b01      	subs	r3, #1
 800c97c:	1eb5      	subs	r5, r6, #2
 800c97e:	6123      	str	r3, [r4, #16]
 800c980:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c984:	463a      	mov	r2, r7
 800c986:	4640      	mov	r0, r8
 800c988:	4798      	blx	r3
 800c98a:	462e      	mov	r6, r5
 800c98c:	6825      	ldr	r5, [r4, #0]
 800c98e:	f015 0510 	ands.w	r5, r5, #16
 800c992:	d158      	bne.n	800ca46 <_scanf_float+0x412>
 800c994:	7035      	strb	r5, [r6, #0]
 800c996:	6823      	ldr	r3, [r4, #0]
 800c998:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c99c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c9a0:	d11c      	bne.n	800c9dc <_scanf_float+0x3a8>
 800c9a2:	9b01      	ldr	r3, [sp, #4]
 800c9a4:	454b      	cmp	r3, r9
 800c9a6:	eba3 0209 	sub.w	r2, r3, r9
 800c9aa:	d124      	bne.n	800c9f6 <_scanf_float+0x3c2>
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	4659      	mov	r1, fp
 800c9b0:	4640      	mov	r0, r8
 800c9b2:	f000 fee7 	bl	800d784 <_strtod_r>
 800c9b6:	9b03      	ldr	r3, [sp, #12]
 800c9b8:	6821      	ldr	r1, [r4, #0]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	f011 0f02 	tst.w	r1, #2
 800c9c0:	ec57 6b10 	vmov	r6, r7, d0
 800c9c4:	f103 0204 	add.w	r2, r3, #4
 800c9c8:	d020      	beq.n	800ca0c <_scanf_float+0x3d8>
 800c9ca:	9903      	ldr	r1, [sp, #12]
 800c9cc:	600a      	str	r2, [r1, #0]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	e9c3 6700 	strd	r6, r7, [r3]
 800c9d4:	68e3      	ldr	r3, [r4, #12]
 800c9d6:	3301      	adds	r3, #1
 800c9d8:	60e3      	str	r3, [r4, #12]
 800c9da:	e66c      	b.n	800c6b6 <_scanf_float+0x82>
 800c9dc:	9b04      	ldr	r3, [sp, #16]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d0e4      	beq.n	800c9ac <_scanf_float+0x378>
 800c9e2:	9905      	ldr	r1, [sp, #20]
 800c9e4:	230a      	movs	r3, #10
 800c9e6:	462a      	mov	r2, r5
 800c9e8:	3101      	adds	r1, #1
 800c9ea:	4640      	mov	r0, r8
 800c9ec:	f000 ffbc 	bl	800d968 <_strtol_r>
 800c9f0:	9b04      	ldr	r3, [sp, #16]
 800c9f2:	9e05      	ldr	r6, [sp, #20]
 800c9f4:	1ac2      	subs	r2, r0, r3
 800c9f6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c9fa:	429e      	cmp	r6, r3
 800c9fc:	bf28      	it	cs
 800c9fe:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ca02:	4912      	ldr	r1, [pc, #72]	; (800ca4c <_scanf_float+0x418>)
 800ca04:	4630      	mov	r0, r6
 800ca06:	f000 f877 	bl	800caf8 <siprintf>
 800ca0a:	e7cf      	b.n	800c9ac <_scanf_float+0x378>
 800ca0c:	f011 0f04 	tst.w	r1, #4
 800ca10:	9903      	ldr	r1, [sp, #12]
 800ca12:	600a      	str	r2, [r1, #0]
 800ca14:	d1db      	bne.n	800c9ce <_scanf_float+0x39a>
 800ca16:	f8d3 8000 	ldr.w	r8, [r3]
 800ca1a:	ee10 2a10 	vmov	r2, s0
 800ca1e:	ee10 0a10 	vmov	r0, s0
 800ca22:	463b      	mov	r3, r7
 800ca24:	4639      	mov	r1, r7
 800ca26:	f7f4 f881 	bl	8000b2c <__aeabi_dcmpun>
 800ca2a:	b128      	cbz	r0, 800ca38 <_scanf_float+0x404>
 800ca2c:	4808      	ldr	r0, [pc, #32]	; (800ca50 <_scanf_float+0x41c>)
 800ca2e:	f000 f819 	bl	800ca64 <nanf>
 800ca32:	ed88 0a00 	vstr	s0, [r8]
 800ca36:	e7cd      	b.n	800c9d4 <_scanf_float+0x3a0>
 800ca38:	4630      	mov	r0, r6
 800ca3a:	4639      	mov	r1, r7
 800ca3c:	f7f4 f8d4 	bl	8000be8 <__aeabi_d2f>
 800ca40:	f8c8 0000 	str.w	r0, [r8]
 800ca44:	e7c6      	b.n	800c9d4 <_scanf_float+0x3a0>
 800ca46:	2500      	movs	r5, #0
 800ca48:	e635      	b.n	800c6b6 <_scanf_float+0x82>
 800ca4a:	bf00      	nop
 800ca4c:	08010afc 	.word	0x08010afc
 800ca50:	08010c0b 	.word	0x08010c0b

0800ca54 <realloc>:
 800ca54:	4b02      	ldr	r3, [pc, #8]	; (800ca60 <realloc+0xc>)
 800ca56:	460a      	mov	r2, r1
 800ca58:	4601      	mov	r1, r0
 800ca5a:	6818      	ldr	r0, [r3, #0]
 800ca5c:	f002 bf30 	b.w	800f8c0 <_realloc_r>
 800ca60:	20000020 	.word	0x20000020

0800ca64 <nanf>:
 800ca64:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ca6c <nanf+0x8>
 800ca68:	4770      	bx	lr
 800ca6a:	bf00      	nop
 800ca6c:	7fc00000 	.word	0x7fc00000

0800ca70 <_raise_r>:
 800ca70:	291f      	cmp	r1, #31
 800ca72:	b538      	push	{r3, r4, r5, lr}
 800ca74:	4604      	mov	r4, r0
 800ca76:	460d      	mov	r5, r1
 800ca78:	d904      	bls.n	800ca84 <_raise_r+0x14>
 800ca7a:	2316      	movs	r3, #22
 800ca7c:	6003      	str	r3, [r0, #0]
 800ca7e:	f04f 30ff 	mov.w	r0, #4294967295
 800ca82:	bd38      	pop	{r3, r4, r5, pc}
 800ca84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ca86:	b112      	cbz	r2, 800ca8e <_raise_r+0x1e>
 800ca88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ca8c:	b94b      	cbnz	r3, 800caa2 <_raise_r+0x32>
 800ca8e:	4620      	mov	r0, r4
 800ca90:	f000 f830 	bl	800caf4 <_getpid_r>
 800ca94:	462a      	mov	r2, r5
 800ca96:	4601      	mov	r1, r0
 800ca98:	4620      	mov	r0, r4
 800ca9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca9e:	f000 b817 	b.w	800cad0 <_kill_r>
 800caa2:	2b01      	cmp	r3, #1
 800caa4:	d00a      	beq.n	800cabc <_raise_r+0x4c>
 800caa6:	1c59      	adds	r1, r3, #1
 800caa8:	d103      	bne.n	800cab2 <_raise_r+0x42>
 800caaa:	2316      	movs	r3, #22
 800caac:	6003      	str	r3, [r0, #0]
 800caae:	2001      	movs	r0, #1
 800cab0:	e7e7      	b.n	800ca82 <_raise_r+0x12>
 800cab2:	2400      	movs	r4, #0
 800cab4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cab8:	4628      	mov	r0, r5
 800caba:	4798      	blx	r3
 800cabc:	2000      	movs	r0, #0
 800cabe:	e7e0      	b.n	800ca82 <_raise_r+0x12>

0800cac0 <raise>:
 800cac0:	4b02      	ldr	r3, [pc, #8]	; (800cacc <raise+0xc>)
 800cac2:	4601      	mov	r1, r0
 800cac4:	6818      	ldr	r0, [r3, #0]
 800cac6:	f7ff bfd3 	b.w	800ca70 <_raise_r>
 800caca:	bf00      	nop
 800cacc:	20000020 	.word	0x20000020

0800cad0 <_kill_r>:
 800cad0:	b538      	push	{r3, r4, r5, lr}
 800cad2:	4d07      	ldr	r5, [pc, #28]	; (800caf0 <_kill_r+0x20>)
 800cad4:	2300      	movs	r3, #0
 800cad6:	4604      	mov	r4, r0
 800cad8:	4608      	mov	r0, r1
 800cada:	4611      	mov	r1, r2
 800cadc:	602b      	str	r3, [r5, #0]
 800cade:	f7fa fce9 	bl	80074b4 <_kill>
 800cae2:	1c43      	adds	r3, r0, #1
 800cae4:	d102      	bne.n	800caec <_kill_r+0x1c>
 800cae6:	682b      	ldr	r3, [r5, #0]
 800cae8:	b103      	cbz	r3, 800caec <_kill_r+0x1c>
 800caea:	6023      	str	r3, [r4, #0]
 800caec:	bd38      	pop	{r3, r4, r5, pc}
 800caee:	bf00      	nop
 800caf0:	2000135c 	.word	0x2000135c

0800caf4 <_getpid_r>:
 800caf4:	f7fa bcd6 	b.w	80074a4 <_getpid>

0800caf8 <siprintf>:
 800caf8:	b40e      	push	{r1, r2, r3}
 800cafa:	b500      	push	{lr}
 800cafc:	b09c      	sub	sp, #112	; 0x70
 800cafe:	ab1d      	add	r3, sp, #116	; 0x74
 800cb00:	9002      	str	r0, [sp, #8]
 800cb02:	9006      	str	r0, [sp, #24]
 800cb04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cb08:	4809      	ldr	r0, [pc, #36]	; (800cb30 <siprintf+0x38>)
 800cb0a:	9107      	str	r1, [sp, #28]
 800cb0c:	9104      	str	r1, [sp, #16]
 800cb0e:	4909      	ldr	r1, [pc, #36]	; (800cb34 <siprintf+0x3c>)
 800cb10:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb14:	9105      	str	r1, [sp, #20]
 800cb16:	6800      	ldr	r0, [r0, #0]
 800cb18:	9301      	str	r3, [sp, #4]
 800cb1a:	a902      	add	r1, sp, #8
 800cb1c:	f002 ff52 	bl	800f9c4 <_svfiprintf_r>
 800cb20:	9b02      	ldr	r3, [sp, #8]
 800cb22:	2200      	movs	r2, #0
 800cb24:	701a      	strb	r2, [r3, #0]
 800cb26:	b01c      	add	sp, #112	; 0x70
 800cb28:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb2c:	b003      	add	sp, #12
 800cb2e:	4770      	bx	lr
 800cb30:	20000020 	.word	0x20000020
 800cb34:	ffff0208 	.word	0xffff0208

0800cb38 <sulp>:
 800cb38:	b570      	push	{r4, r5, r6, lr}
 800cb3a:	4604      	mov	r4, r0
 800cb3c:	460d      	mov	r5, r1
 800cb3e:	ec45 4b10 	vmov	d0, r4, r5
 800cb42:	4616      	mov	r6, r2
 800cb44:	f002 fcb4 	bl	800f4b0 <__ulp>
 800cb48:	ec51 0b10 	vmov	r0, r1, d0
 800cb4c:	b17e      	cbz	r6, 800cb6e <sulp+0x36>
 800cb4e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cb52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	dd09      	ble.n	800cb6e <sulp+0x36>
 800cb5a:	051b      	lsls	r3, r3, #20
 800cb5c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800cb60:	2400      	movs	r4, #0
 800cb62:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800cb66:	4622      	mov	r2, r4
 800cb68:	462b      	mov	r3, r5
 800cb6a:	f7f3 fd45 	bl	80005f8 <__aeabi_dmul>
 800cb6e:	bd70      	pop	{r4, r5, r6, pc}

0800cb70 <_strtod_l>:
 800cb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb74:	b0a3      	sub	sp, #140	; 0x8c
 800cb76:	461f      	mov	r7, r3
 800cb78:	2300      	movs	r3, #0
 800cb7a:	931e      	str	r3, [sp, #120]	; 0x78
 800cb7c:	4ba4      	ldr	r3, [pc, #656]	; (800ce10 <_strtod_l+0x2a0>)
 800cb7e:	9219      	str	r2, [sp, #100]	; 0x64
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	9307      	str	r3, [sp, #28]
 800cb84:	4604      	mov	r4, r0
 800cb86:	4618      	mov	r0, r3
 800cb88:	4688      	mov	r8, r1
 800cb8a:	f7f3 fb21 	bl	80001d0 <strlen>
 800cb8e:	f04f 0a00 	mov.w	sl, #0
 800cb92:	4605      	mov	r5, r0
 800cb94:	f04f 0b00 	mov.w	fp, #0
 800cb98:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800cb9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cb9e:	781a      	ldrb	r2, [r3, #0]
 800cba0:	2a2b      	cmp	r2, #43	; 0x2b
 800cba2:	d04c      	beq.n	800cc3e <_strtod_l+0xce>
 800cba4:	d839      	bhi.n	800cc1a <_strtod_l+0xaa>
 800cba6:	2a0d      	cmp	r2, #13
 800cba8:	d832      	bhi.n	800cc10 <_strtod_l+0xa0>
 800cbaa:	2a08      	cmp	r2, #8
 800cbac:	d832      	bhi.n	800cc14 <_strtod_l+0xa4>
 800cbae:	2a00      	cmp	r2, #0
 800cbb0:	d03c      	beq.n	800cc2c <_strtod_l+0xbc>
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	930e      	str	r3, [sp, #56]	; 0x38
 800cbb6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800cbb8:	7833      	ldrb	r3, [r6, #0]
 800cbba:	2b30      	cmp	r3, #48	; 0x30
 800cbbc:	f040 80b4 	bne.w	800cd28 <_strtod_l+0x1b8>
 800cbc0:	7873      	ldrb	r3, [r6, #1]
 800cbc2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cbc6:	2b58      	cmp	r3, #88	; 0x58
 800cbc8:	d16c      	bne.n	800cca4 <_strtod_l+0x134>
 800cbca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cbcc:	9301      	str	r3, [sp, #4]
 800cbce:	ab1e      	add	r3, sp, #120	; 0x78
 800cbd0:	9702      	str	r7, [sp, #8]
 800cbd2:	9300      	str	r3, [sp, #0]
 800cbd4:	4a8f      	ldr	r2, [pc, #572]	; (800ce14 <_strtod_l+0x2a4>)
 800cbd6:	ab1f      	add	r3, sp, #124	; 0x7c
 800cbd8:	a91d      	add	r1, sp, #116	; 0x74
 800cbda:	4620      	mov	r0, r4
 800cbdc:	f001 fdd6 	bl	800e78c <__gethex>
 800cbe0:	f010 0707 	ands.w	r7, r0, #7
 800cbe4:	4605      	mov	r5, r0
 800cbe6:	d005      	beq.n	800cbf4 <_strtod_l+0x84>
 800cbe8:	2f06      	cmp	r7, #6
 800cbea:	d12a      	bne.n	800cc42 <_strtod_l+0xd2>
 800cbec:	3601      	adds	r6, #1
 800cbee:	2300      	movs	r3, #0
 800cbf0:	961d      	str	r6, [sp, #116]	; 0x74
 800cbf2:	930e      	str	r3, [sp, #56]	; 0x38
 800cbf4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	f040 8596 	bne.w	800d728 <_strtod_l+0xbb8>
 800cbfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cbfe:	b1db      	cbz	r3, 800cc38 <_strtod_l+0xc8>
 800cc00:	4652      	mov	r2, sl
 800cc02:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cc06:	ec43 2b10 	vmov	d0, r2, r3
 800cc0a:	b023      	add	sp, #140	; 0x8c
 800cc0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc10:	2a20      	cmp	r2, #32
 800cc12:	d1ce      	bne.n	800cbb2 <_strtod_l+0x42>
 800cc14:	3301      	adds	r3, #1
 800cc16:	931d      	str	r3, [sp, #116]	; 0x74
 800cc18:	e7c0      	b.n	800cb9c <_strtod_l+0x2c>
 800cc1a:	2a2d      	cmp	r2, #45	; 0x2d
 800cc1c:	d1c9      	bne.n	800cbb2 <_strtod_l+0x42>
 800cc1e:	2201      	movs	r2, #1
 800cc20:	920e      	str	r2, [sp, #56]	; 0x38
 800cc22:	1c5a      	adds	r2, r3, #1
 800cc24:	921d      	str	r2, [sp, #116]	; 0x74
 800cc26:	785b      	ldrb	r3, [r3, #1]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d1c4      	bne.n	800cbb6 <_strtod_l+0x46>
 800cc2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cc2e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	f040 8576 	bne.w	800d724 <_strtod_l+0xbb4>
 800cc38:	4652      	mov	r2, sl
 800cc3a:	465b      	mov	r3, fp
 800cc3c:	e7e3      	b.n	800cc06 <_strtod_l+0x96>
 800cc3e:	2200      	movs	r2, #0
 800cc40:	e7ee      	b.n	800cc20 <_strtod_l+0xb0>
 800cc42:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800cc44:	b13a      	cbz	r2, 800cc56 <_strtod_l+0xe6>
 800cc46:	2135      	movs	r1, #53	; 0x35
 800cc48:	a820      	add	r0, sp, #128	; 0x80
 800cc4a:	f002 fd3c 	bl	800f6c6 <__copybits>
 800cc4e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800cc50:	4620      	mov	r0, r4
 800cc52:	f002 f901 	bl	800ee58 <_Bfree>
 800cc56:	3f01      	subs	r7, #1
 800cc58:	2f05      	cmp	r7, #5
 800cc5a:	d807      	bhi.n	800cc6c <_strtod_l+0xfc>
 800cc5c:	e8df f007 	tbb	[pc, r7]
 800cc60:	1d180b0e 	.word	0x1d180b0e
 800cc64:	030e      	.short	0x030e
 800cc66:	f04f 0b00 	mov.w	fp, #0
 800cc6a:	46da      	mov	sl, fp
 800cc6c:	0728      	lsls	r0, r5, #28
 800cc6e:	d5c1      	bpl.n	800cbf4 <_strtod_l+0x84>
 800cc70:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800cc74:	e7be      	b.n	800cbf4 <_strtod_l+0x84>
 800cc76:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800cc7a:	e7f7      	b.n	800cc6c <_strtod_l+0xfc>
 800cc7c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800cc80:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800cc82:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800cc86:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cc8a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cc8e:	e7ed      	b.n	800cc6c <_strtod_l+0xfc>
 800cc90:	f8df b184 	ldr.w	fp, [pc, #388]	; 800ce18 <_strtod_l+0x2a8>
 800cc94:	f04f 0a00 	mov.w	sl, #0
 800cc98:	e7e8      	b.n	800cc6c <_strtod_l+0xfc>
 800cc9a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800cc9e:	f04f 3aff 	mov.w	sl, #4294967295
 800cca2:	e7e3      	b.n	800cc6c <_strtod_l+0xfc>
 800cca4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cca6:	1c5a      	adds	r2, r3, #1
 800cca8:	921d      	str	r2, [sp, #116]	; 0x74
 800ccaa:	785b      	ldrb	r3, [r3, #1]
 800ccac:	2b30      	cmp	r3, #48	; 0x30
 800ccae:	d0f9      	beq.n	800cca4 <_strtod_l+0x134>
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d09f      	beq.n	800cbf4 <_strtod_l+0x84>
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	f04f 0900 	mov.w	r9, #0
 800ccba:	9304      	str	r3, [sp, #16]
 800ccbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ccbe:	930a      	str	r3, [sp, #40]	; 0x28
 800ccc0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ccc4:	464f      	mov	r7, r9
 800ccc6:	220a      	movs	r2, #10
 800ccc8:	981d      	ldr	r0, [sp, #116]	; 0x74
 800ccca:	7806      	ldrb	r6, [r0, #0]
 800cccc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ccd0:	b2d9      	uxtb	r1, r3
 800ccd2:	2909      	cmp	r1, #9
 800ccd4:	d92a      	bls.n	800cd2c <_strtod_l+0x1bc>
 800ccd6:	9907      	ldr	r1, [sp, #28]
 800ccd8:	462a      	mov	r2, r5
 800ccda:	f003 f8e5 	bl	800fea8 <strncmp>
 800ccde:	b398      	cbz	r0, 800cd48 <_strtod_l+0x1d8>
 800cce0:	2000      	movs	r0, #0
 800cce2:	4633      	mov	r3, r6
 800cce4:	463d      	mov	r5, r7
 800cce6:	9007      	str	r0, [sp, #28]
 800cce8:	4602      	mov	r2, r0
 800ccea:	2b65      	cmp	r3, #101	; 0x65
 800ccec:	d001      	beq.n	800ccf2 <_strtod_l+0x182>
 800ccee:	2b45      	cmp	r3, #69	; 0x45
 800ccf0:	d118      	bne.n	800cd24 <_strtod_l+0x1b4>
 800ccf2:	b91d      	cbnz	r5, 800ccfc <_strtod_l+0x18c>
 800ccf4:	9b04      	ldr	r3, [sp, #16]
 800ccf6:	4303      	orrs	r3, r0
 800ccf8:	d098      	beq.n	800cc2c <_strtod_l+0xbc>
 800ccfa:	2500      	movs	r5, #0
 800ccfc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800cd00:	f108 0301 	add.w	r3, r8, #1
 800cd04:	931d      	str	r3, [sp, #116]	; 0x74
 800cd06:	f898 3001 	ldrb.w	r3, [r8, #1]
 800cd0a:	2b2b      	cmp	r3, #43	; 0x2b
 800cd0c:	d075      	beq.n	800cdfa <_strtod_l+0x28a>
 800cd0e:	2b2d      	cmp	r3, #45	; 0x2d
 800cd10:	d07b      	beq.n	800ce0a <_strtod_l+0x29a>
 800cd12:	f04f 0c00 	mov.w	ip, #0
 800cd16:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800cd1a:	2909      	cmp	r1, #9
 800cd1c:	f240 8082 	bls.w	800ce24 <_strtod_l+0x2b4>
 800cd20:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800cd24:	2600      	movs	r6, #0
 800cd26:	e09d      	b.n	800ce64 <_strtod_l+0x2f4>
 800cd28:	2300      	movs	r3, #0
 800cd2a:	e7c4      	b.n	800ccb6 <_strtod_l+0x146>
 800cd2c:	2f08      	cmp	r7, #8
 800cd2e:	bfd8      	it	le
 800cd30:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800cd32:	f100 0001 	add.w	r0, r0, #1
 800cd36:	bfda      	itte	le
 800cd38:	fb02 3301 	mlale	r3, r2, r1, r3
 800cd3c:	9309      	strle	r3, [sp, #36]	; 0x24
 800cd3e:	fb02 3909 	mlagt	r9, r2, r9, r3
 800cd42:	3701      	adds	r7, #1
 800cd44:	901d      	str	r0, [sp, #116]	; 0x74
 800cd46:	e7bf      	b.n	800ccc8 <_strtod_l+0x158>
 800cd48:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cd4a:	195a      	adds	r2, r3, r5
 800cd4c:	921d      	str	r2, [sp, #116]	; 0x74
 800cd4e:	5d5b      	ldrb	r3, [r3, r5]
 800cd50:	2f00      	cmp	r7, #0
 800cd52:	d037      	beq.n	800cdc4 <_strtod_l+0x254>
 800cd54:	9007      	str	r0, [sp, #28]
 800cd56:	463d      	mov	r5, r7
 800cd58:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800cd5c:	2a09      	cmp	r2, #9
 800cd5e:	d912      	bls.n	800cd86 <_strtod_l+0x216>
 800cd60:	2201      	movs	r2, #1
 800cd62:	e7c2      	b.n	800ccea <_strtod_l+0x17a>
 800cd64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cd66:	1c5a      	adds	r2, r3, #1
 800cd68:	921d      	str	r2, [sp, #116]	; 0x74
 800cd6a:	785b      	ldrb	r3, [r3, #1]
 800cd6c:	3001      	adds	r0, #1
 800cd6e:	2b30      	cmp	r3, #48	; 0x30
 800cd70:	d0f8      	beq.n	800cd64 <_strtod_l+0x1f4>
 800cd72:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800cd76:	2a08      	cmp	r2, #8
 800cd78:	f200 84db 	bhi.w	800d732 <_strtod_l+0xbc2>
 800cd7c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800cd7e:	9007      	str	r0, [sp, #28]
 800cd80:	2000      	movs	r0, #0
 800cd82:	920a      	str	r2, [sp, #40]	; 0x28
 800cd84:	4605      	mov	r5, r0
 800cd86:	3b30      	subs	r3, #48	; 0x30
 800cd88:	f100 0201 	add.w	r2, r0, #1
 800cd8c:	d014      	beq.n	800cdb8 <_strtod_l+0x248>
 800cd8e:	9907      	ldr	r1, [sp, #28]
 800cd90:	4411      	add	r1, r2
 800cd92:	9107      	str	r1, [sp, #28]
 800cd94:	462a      	mov	r2, r5
 800cd96:	eb00 0e05 	add.w	lr, r0, r5
 800cd9a:	210a      	movs	r1, #10
 800cd9c:	4572      	cmp	r2, lr
 800cd9e:	d113      	bne.n	800cdc8 <_strtod_l+0x258>
 800cda0:	182a      	adds	r2, r5, r0
 800cda2:	2a08      	cmp	r2, #8
 800cda4:	f105 0501 	add.w	r5, r5, #1
 800cda8:	4405      	add	r5, r0
 800cdaa:	dc1c      	bgt.n	800cde6 <_strtod_l+0x276>
 800cdac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cdae:	220a      	movs	r2, #10
 800cdb0:	fb02 3301 	mla	r3, r2, r1, r3
 800cdb4:	9309      	str	r3, [sp, #36]	; 0x24
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cdba:	1c59      	adds	r1, r3, #1
 800cdbc:	911d      	str	r1, [sp, #116]	; 0x74
 800cdbe:	785b      	ldrb	r3, [r3, #1]
 800cdc0:	4610      	mov	r0, r2
 800cdc2:	e7c9      	b.n	800cd58 <_strtod_l+0x1e8>
 800cdc4:	4638      	mov	r0, r7
 800cdc6:	e7d2      	b.n	800cd6e <_strtod_l+0x1fe>
 800cdc8:	2a08      	cmp	r2, #8
 800cdca:	dc04      	bgt.n	800cdd6 <_strtod_l+0x266>
 800cdcc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800cdce:	434e      	muls	r6, r1
 800cdd0:	9609      	str	r6, [sp, #36]	; 0x24
 800cdd2:	3201      	adds	r2, #1
 800cdd4:	e7e2      	b.n	800cd9c <_strtod_l+0x22c>
 800cdd6:	f102 0c01 	add.w	ip, r2, #1
 800cdda:	f1bc 0f10 	cmp.w	ip, #16
 800cdde:	bfd8      	it	le
 800cde0:	fb01 f909 	mulle.w	r9, r1, r9
 800cde4:	e7f5      	b.n	800cdd2 <_strtod_l+0x262>
 800cde6:	2d10      	cmp	r5, #16
 800cde8:	bfdc      	itt	le
 800cdea:	220a      	movle	r2, #10
 800cdec:	fb02 3909 	mlale	r9, r2, r9, r3
 800cdf0:	e7e1      	b.n	800cdb6 <_strtod_l+0x246>
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	9307      	str	r3, [sp, #28]
 800cdf6:	2201      	movs	r2, #1
 800cdf8:	e77c      	b.n	800ccf4 <_strtod_l+0x184>
 800cdfa:	f04f 0c00 	mov.w	ip, #0
 800cdfe:	f108 0302 	add.w	r3, r8, #2
 800ce02:	931d      	str	r3, [sp, #116]	; 0x74
 800ce04:	f898 3002 	ldrb.w	r3, [r8, #2]
 800ce08:	e785      	b.n	800cd16 <_strtod_l+0x1a6>
 800ce0a:	f04f 0c01 	mov.w	ip, #1
 800ce0e:	e7f6      	b.n	800cdfe <_strtod_l+0x28e>
 800ce10:	08010df4 	.word	0x08010df4
 800ce14:	08010b04 	.word	0x08010b04
 800ce18:	7ff00000 	.word	0x7ff00000
 800ce1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ce1e:	1c59      	adds	r1, r3, #1
 800ce20:	911d      	str	r1, [sp, #116]	; 0x74
 800ce22:	785b      	ldrb	r3, [r3, #1]
 800ce24:	2b30      	cmp	r3, #48	; 0x30
 800ce26:	d0f9      	beq.n	800ce1c <_strtod_l+0x2ac>
 800ce28:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800ce2c:	2908      	cmp	r1, #8
 800ce2e:	f63f af79 	bhi.w	800cd24 <_strtod_l+0x1b4>
 800ce32:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800ce36:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ce38:	9308      	str	r3, [sp, #32]
 800ce3a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ce3c:	1c59      	adds	r1, r3, #1
 800ce3e:	911d      	str	r1, [sp, #116]	; 0x74
 800ce40:	785b      	ldrb	r3, [r3, #1]
 800ce42:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800ce46:	2e09      	cmp	r6, #9
 800ce48:	d937      	bls.n	800ceba <_strtod_l+0x34a>
 800ce4a:	9e08      	ldr	r6, [sp, #32]
 800ce4c:	1b89      	subs	r1, r1, r6
 800ce4e:	2908      	cmp	r1, #8
 800ce50:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800ce54:	dc02      	bgt.n	800ce5c <_strtod_l+0x2ec>
 800ce56:	4576      	cmp	r6, lr
 800ce58:	bfa8      	it	ge
 800ce5a:	4676      	movge	r6, lr
 800ce5c:	f1bc 0f00 	cmp.w	ip, #0
 800ce60:	d000      	beq.n	800ce64 <_strtod_l+0x2f4>
 800ce62:	4276      	negs	r6, r6
 800ce64:	2d00      	cmp	r5, #0
 800ce66:	d14f      	bne.n	800cf08 <_strtod_l+0x398>
 800ce68:	9904      	ldr	r1, [sp, #16]
 800ce6a:	4301      	orrs	r1, r0
 800ce6c:	f47f aec2 	bne.w	800cbf4 <_strtod_l+0x84>
 800ce70:	2a00      	cmp	r2, #0
 800ce72:	f47f aedb 	bne.w	800cc2c <_strtod_l+0xbc>
 800ce76:	2b69      	cmp	r3, #105	; 0x69
 800ce78:	d027      	beq.n	800ceca <_strtod_l+0x35a>
 800ce7a:	dc24      	bgt.n	800cec6 <_strtod_l+0x356>
 800ce7c:	2b49      	cmp	r3, #73	; 0x49
 800ce7e:	d024      	beq.n	800ceca <_strtod_l+0x35a>
 800ce80:	2b4e      	cmp	r3, #78	; 0x4e
 800ce82:	f47f aed3 	bne.w	800cc2c <_strtod_l+0xbc>
 800ce86:	499e      	ldr	r1, [pc, #632]	; (800d100 <_strtod_l+0x590>)
 800ce88:	a81d      	add	r0, sp, #116	; 0x74
 800ce8a:	f001 fed7 	bl	800ec3c <__match>
 800ce8e:	2800      	cmp	r0, #0
 800ce90:	f43f aecc 	beq.w	800cc2c <_strtod_l+0xbc>
 800ce94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ce96:	781b      	ldrb	r3, [r3, #0]
 800ce98:	2b28      	cmp	r3, #40	; 0x28
 800ce9a:	d12d      	bne.n	800cef8 <_strtod_l+0x388>
 800ce9c:	4999      	ldr	r1, [pc, #612]	; (800d104 <_strtod_l+0x594>)
 800ce9e:	aa20      	add	r2, sp, #128	; 0x80
 800cea0:	a81d      	add	r0, sp, #116	; 0x74
 800cea2:	f001 fedf 	bl	800ec64 <__hexnan>
 800cea6:	2805      	cmp	r0, #5
 800cea8:	d126      	bne.n	800cef8 <_strtod_l+0x388>
 800ceaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ceac:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800ceb0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ceb4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800ceb8:	e69c      	b.n	800cbf4 <_strtod_l+0x84>
 800ceba:	210a      	movs	r1, #10
 800cebc:	fb01 3e0e 	mla	lr, r1, lr, r3
 800cec0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800cec4:	e7b9      	b.n	800ce3a <_strtod_l+0x2ca>
 800cec6:	2b6e      	cmp	r3, #110	; 0x6e
 800cec8:	e7db      	b.n	800ce82 <_strtod_l+0x312>
 800ceca:	498f      	ldr	r1, [pc, #572]	; (800d108 <_strtod_l+0x598>)
 800cecc:	a81d      	add	r0, sp, #116	; 0x74
 800cece:	f001 feb5 	bl	800ec3c <__match>
 800ced2:	2800      	cmp	r0, #0
 800ced4:	f43f aeaa 	beq.w	800cc2c <_strtod_l+0xbc>
 800ced8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ceda:	498c      	ldr	r1, [pc, #560]	; (800d10c <_strtod_l+0x59c>)
 800cedc:	3b01      	subs	r3, #1
 800cede:	a81d      	add	r0, sp, #116	; 0x74
 800cee0:	931d      	str	r3, [sp, #116]	; 0x74
 800cee2:	f001 feab 	bl	800ec3c <__match>
 800cee6:	b910      	cbnz	r0, 800ceee <_strtod_l+0x37e>
 800cee8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ceea:	3301      	adds	r3, #1
 800ceec:	931d      	str	r3, [sp, #116]	; 0x74
 800ceee:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800d11c <_strtod_l+0x5ac>
 800cef2:	f04f 0a00 	mov.w	sl, #0
 800cef6:	e67d      	b.n	800cbf4 <_strtod_l+0x84>
 800cef8:	4885      	ldr	r0, [pc, #532]	; (800d110 <_strtod_l+0x5a0>)
 800cefa:	f002 ffbd 	bl	800fe78 <nan>
 800cefe:	ed8d 0b04 	vstr	d0, [sp, #16]
 800cf02:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800cf06:	e675      	b.n	800cbf4 <_strtod_l+0x84>
 800cf08:	9b07      	ldr	r3, [sp, #28]
 800cf0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cf0c:	1af3      	subs	r3, r6, r3
 800cf0e:	2f00      	cmp	r7, #0
 800cf10:	bf08      	it	eq
 800cf12:	462f      	moveq	r7, r5
 800cf14:	2d10      	cmp	r5, #16
 800cf16:	9308      	str	r3, [sp, #32]
 800cf18:	46a8      	mov	r8, r5
 800cf1a:	bfa8      	it	ge
 800cf1c:	f04f 0810 	movge.w	r8, #16
 800cf20:	f7f3 faf0 	bl	8000504 <__aeabi_ui2d>
 800cf24:	2d09      	cmp	r5, #9
 800cf26:	4682      	mov	sl, r0
 800cf28:	468b      	mov	fp, r1
 800cf2a:	dd13      	ble.n	800cf54 <_strtod_l+0x3e4>
 800cf2c:	4b79      	ldr	r3, [pc, #484]	; (800d114 <_strtod_l+0x5a4>)
 800cf2e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800cf32:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800cf36:	f7f3 fb5f 	bl	80005f8 <__aeabi_dmul>
 800cf3a:	4682      	mov	sl, r0
 800cf3c:	4648      	mov	r0, r9
 800cf3e:	468b      	mov	fp, r1
 800cf40:	f7f3 fae0 	bl	8000504 <__aeabi_ui2d>
 800cf44:	4602      	mov	r2, r0
 800cf46:	460b      	mov	r3, r1
 800cf48:	4650      	mov	r0, sl
 800cf4a:	4659      	mov	r1, fp
 800cf4c:	f7f3 f99e 	bl	800028c <__adddf3>
 800cf50:	4682      	mov	sl, r0
 800cf52:	468b      	mov	fp, r1
 800cf54:	2d0f      	cmp	r5, #15
 800cf56:	dc38      	bgt.n	800cfca <_strtod_l+0x45a>
 800cf58:	9b08      	ldr	r3, [sp, #32]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	f43f ae4a 	beq.w	800cbf4 <_strtod_l+0x84>
 800cf60:	dd24      	ble.n	800cfac <_strtod_l+0x43c>
 800cf62:	2b16      	cmp	r3, #22
 800cf64:	dc0b      	bgt.n	800cf7e <_strtod_l+0x40e>
 800cf66:	4d6b      	ldr	r5, [pc, #428]	; (800d114 <_strtod_l+0x5a4>)
 800cf68:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800cf6c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800cf70:	4652      	mov	r2, sl
 800cf72:	465b      	mov	r3, fp
 800cf74:	f7f3 fb40 	bl	80005f8 <__aeabi_dmul>
 800cf78:	4682      	mov	sl, r0
 800cf7a:	468b      	mov	fp, r1
 800cf7c:	e63a      	b.n	800cbf4 <_strtod_l+0x84>
 800cf7e:	9a08      	ldr	r2, [sp, #32]
 800cf80:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800cf84:	4293      	cmp	r3, r2
 800cf86:	db20      	blt.n	800cfca <_strtod_l+0x45a>
 800cf88:	4c62      	ldr	r4, [pc, #392]	; (800d114 <_strtod_l+0x5a4>)
 800cf8a:	f1c5 050f 	rsb	r5, r5, #15
 800cf8e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cf92:	4652      	mov	r2, sl
 800cf94:	465b      	mov	r3, fp
 800cf96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf9a:	f7f3 fb2d 	bl	80005f8 <__aeabi_dmul>
 800cf9e:	9b08      	ldr	r3, [sp, #32]
 800cfa0:	1b5d      	subs	r5, r3, r5
 800cfa2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cfa6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cfaa:	e7e3      	b.n	800cf74 <_strtod_l+0x404>
 800cfac:	9b08      	ldr	r3, [sp, #32]
 800cfae:	3316      	adds	r3, #22
 800cfb0:	db0b      	blt.n	800cfca <_strtod_l+0x45a>
 800cfb2:	9b07      	ldr	r3, [sp, #28]
 800cfb4:	4a57      	ldr	r2, [pc, #348]	; (800d114 <_strtod_l+0x5a4>)
 800cfb6:	1b9e      	subs	r6, r3, r6
 800cfb8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800cfbc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cfc0:	4650      	mov	r0, sl
 800cfc2:	4659      	mov	r1, fp
 800cfc4:	f7f3 fc42 	bl	800084c <__aeabi_ddiv>
 800cfc8:	e7d6      	b.n	800cf78 <_strtod_l+0x408>
 800cfca:	9b08      	ldr	r3, [sp, #32]
 800cfcc:	eba5 0808 	sub.w	r8, r5, r8
 800cfd0:	4498      	add	r8, r3
 800cfd2:	f1b8 0f00 	cmp.w	r8, #0
 800cfd6:	dd71      	ble.n	800d0bc <_strtod_l+0x54c>
 800cfd8:	f018 030f 	ands.w	r3, r8, #15
 800cfdc:	d00a      	beq.n	800cff4 <_strtod_l+0x484>
 800cfde:	494d      	ldr	r1, [pc, #308]	; (800d114 <_strtod_l+0x5a4>)
 800cfe0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cfe4:	4652      	mov	r2, sl
 800cfe6:	465b      	mov	r3, fp
 800cfe8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfec:	f7f3 fb04 	bl	80005f8 <__aeabi_dmul>
 800cff0:	4682      	mov	sl, r0
 800cff2:	468b      	mov	fp, r1
 800cff4:	f038 080f 	bics.w	r8, r8, #15
 800cff8:	d04d      	beq.n	800d096 <_strtod_l+0x526>
 800cffa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800cffe:	dd22      	ble.n	800d046 <_strtod_l+0x4d6>
 800d000:	2500      	movs	r5, #0
 800d002:	462e      	mov	r6, r5
 800d004:	9509      	str	r5, [sp, #36]	; 0x24
 800d006:	9507      	str	r5, [sp, #28]
 800d008:	2322      	movs	r3, #34	; 0x22
 800d00a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800d11c <_strtod_l+0x5ac>
 800d00e:	6023      	str	r3, [r4, #0]
 800d010:	f04f 0a00 	mov.w	sl, #0
 800d014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d016:	2b00      	cmp	r3, #0
 800d018:	f43f adec 	beq.w	800cbf4 <_strtod_l+0x84>
 800d01c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d01e:	4620      	mov	r0, r4
 800d020:	f001 ff1a 	bl	800ee58 <_Bfree>
 800d024:	9907      	ldr	r1, [sp, #28]
 800d026:	4620      	mov	r0, r4
 800d028:	f001 ff16 	bl	800ee58 <_Bfree>
 800d02c:	4631      	mov	r1, r6
 800d02e:	4620      	mov	r0, r4
 800d030:	f001 ff12 	bl	800ee58 <_Bfree>
 800d034:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d036:	4620      	mov	r0, r4
 800d038:	f001 ff0e 	bl	800ee58 <_Bfree>
 800d03c:	4629      	mov	r1, r5
 800d03e:	4620      	mov	r0, r4
 800d040:	f001 ff0a 	bl	800ee58 <_Bfree>
 800d044:	e5d6      	b.n	800cbf4 <_strtod_l+0x84>
 800d046:	2300      	movs	r3, #0
 800d048:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d04c:	4650      	mov	r0, sl
 800d04e:	4659      	mov	r1, fp
 800d050:	4699      	mov	r9, r3
 800d052:	f1b8 0f01 	cmp.w	r8, #1
 800d056:	dc21      	bgt.n	800d09c <_strtod_l+0x52c>
 800d058:	b10b      	cbz	r3, 800d05e <_strtod_l+0x4ee>
 800d05a:	4682      	mov	sl, r0
 800d05c:	468b      	mov	fp, r1
 800d05e:	4b2e      	ldr	r3, [pc, #184]	; (800d118 <_strtod_l+0x5a8>)
 800d060:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d064:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d068:	4652      	mov	r2, sl
 800d06a:	465b      	mov	r3, fp
 800d06c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d070:	f7f3 fac2 	bl	80005f8 <__aeabi_dmul>
 800d074:	4b29      	ldr	r3, [pc, #164]	; (800d11c <_strtod_l+0x5ac>)
 800d076:	460a      	mov	r2, r1
 800d078:	400b      	ands	r3, r1
 800d07a:	4929      	ldr	r1, [pc, #164]	; (800d120 <_strtod_l+0x5b0>)
 800d07c:	428b      	cmp	r3, r1
 800d07e:	4682      	mov	sl, r0
 800d080:	d8be      	bhi.n	800d000 <_strtod_l+0x490>
 800d082:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d086:	428b      	cmp	r3, r1
 800d088:	bf86      	itte	hi
 800d08a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800d124 <_strtod_l+0x5b4>
 800d08e:	f04f 3aff 	movhi.w	sl, #4294967295
 800d092:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d096:	2300      	movs	r3, #0
 800d098:	9304      	str	r3, [sp, #16]
 800d09a:	e081      	b.n	800d1a0 <_strtod_l+0x630>
 800d09c:	f018 0f01 	tst.w	r8, #1
 800d0a0:	d007      	beq.n	800d0b2 <_strtod_l+0x542>
 800d0a2:	4b1d      	ldr	r3, [pc, #116]	; (800d118 <_strtod_l+0x5a8>)
 800d0a4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800d0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ac:	f7f3 faa4 	bl	80005f8 <__aeabi_dmul>
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	f109 0901 	add.w	r9, r9, #1
 800d0b6:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d0ba:	e7ca      	b.n	800d052 <_strtod_l+0x4e2>
 800d0bc:	d0eb      	beq.n	800d096 <_strtod_l+0x526>
 800d0be:	f1c8 0800 	rsb	r8, r8, #0
 800d0c2:	f018 020f 	ands.w	r2, r8, #15
 800d0c6:	d00a      	beq.n	800d0de <_strtod_l+0x56e>
 800d0c8:	4b12      	ldr	r3, [pc, #72]	; (800d114 <_strtod_l+0x5a4>)
 800d0ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d0ce:	4650      	mov	r0, sl
 800d0d0:	4659      	mov	r1, fp
 800d0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0d6:	f7f3 fbb9 	bl	800084c <__aeabi_ddiv>
 800d0da:	4682      	mov	sl, r0
 800d0dc:	468b      	mov	fp, r1
 800d0de:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d0e2:	d0d8      	beq.n	800d096 <_strtod_l+0x526>
 800d0e4:	f1b8 0f1f 	cmp.w	r8, #31
 800d0e8:	dd1e      	ble.n	800d128 <_strtod_l+0x5b8>
 800d0ea:	2500      	movs	r5, #0
 800d0ec:	462e      	mov	r6, r5
 800d0ee:	9509      	str	r5, [sp, #36]	; 0x24
 800d0f0:	9507      	str	r5, [sp, #28]
 800d0f2:	2322      	movs	r3, #34	; 0x22
 800d0f4:	f04f 0a00 	mov.w	sl, #0
 800d0f8:	f04f 0b00 	mov.w	fp, #0
 800d0fc:	6023      	str	r3, [r4, #0]
 800d0fe:	e789      	b.n	800d014 <_strtod_l+0x4a4>
 800d100:	08010ad5 	.word	0x08010ad5
 800d104:	08010b18 	.word	0x08010b18
 800d108:	08010acd 	.word	0x08010acd
 800d10c:	08010d10 	.word	0x08010d10
 800d110:	08010c0b 	.word	0x08010c0b
 800d114:	08010e90 	.word	0x08010e90
 800d118:	08010e68 	.word	0x08010e68
 800d11c:	7ff00000 	.word	0x7ff00000
 800d120:	7ca00000 	.word	0x7ca00000
 800d124:	7fefffff 	.word	0x7fefffff
 800d128:	f018 0310 	ands.w	r3, r8, #16
 800d12c:	bf18      	it	ne
 800d12e:	236a      	movne	r3, #106	; 0x6a
 800d130:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800d4e8 <_strtod_l+0x978>
 800d134:	9304      	str	r3, [sp, #16]
 800d136:	4650      	mov	r0, sl
 800d138:	4659      	mov	r1, fp
 800d13a:	2300      	movs	r3, #0
 800d13c:	f018 0f01 	tst.w	r8, #1
 800d140:	d004      	beq.n	800d14c <_strtod_l+0x5dc>
 800d142:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d146:	f7f3 fa57 	bl	80005f8 <__aeabi_dmul>
 800d14a:	2301      	movs	r3, #1
 800d14c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d150:	f109 0908 	add.w	r9, r9, #8
 800d154:	d1f2      	bne.n	800d13c <_strtod_l+0x5cc>
 800d156:	b10b      	cbz	r3, 800d15c <_strtod_l+0x5ec>
 800d158:	4682      	mov	sl, r0
 800d15a:	468b      	mov	fp, r1
 800d15c:	9b04      	ldr	r3, [sp, #16]
 800d15e:	b1bb      	cbz	r3, 800d190 <_strtod_l+0x620>
 800d160:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800d164:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d168:	2b00      	cmp	r3, #0
 800d16a:	4659      	mov	r1, fp
 800d16c:	dd10      	ble.n	800d190 <_strtod_l+0x620>
 800d16e:	2b1f      	cmp	r3, #31
 800d170:	f340 8128 	ble.w	800d3c4 <_strtod_l+0x854>
 800d174:	2b34      	cmp	r3, #52	; 0x34
 800d176:	bfde      	ittt	le
 800d178:	3b20      	suble	r3, #32
 800d17a:	f04f 32ff 	movle.w	r2, #4294967295
 800d17e:	fa02 f303 	lslle.w	r3, r2, r3
 800d182:	f04f 0a00 	mov.w	sl, #0
 800d186:	bfcc      	ite	gt
 800d188:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d18c:	ea03 0b01 	andle.w	fp, r3, r1
 800d190:	2200      	movs	r2, #0
 800d192:	2300      	movs	r3, #0
 800d194:	4650      	mov	r0, sl
 800d196:	4659      	mov	r1, fp
 800d198:	f7f3 fc96 	bl	8000ac8 <__aeabi_dcmpeq>
 800d19c:	2800      	cmp	r0, #0
 800d19e:	d1a4      	bne.n	800d0ea <_strtod_l+0x57a>
 800d1a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1a2:	9300      	str	r3, [sp, #0]
 800d1a4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d1a6:	462b      	mov	r3, r5
 800d1a8:	463a      	mov	r2, r7
 800d1aa:	4620      	mov	r0, r4
 800d1ac:	f001 fec0 	bl	800ef30 <__s2b>
 800d1b0:	9009      	str	r0, [sp, #36]	; 0x24
 800d1b2:	2800      	cmp	r0, #0
 800d1b4:	f43f af24 	beq.w	800d000 <_strtod_l+0x490>
 800d1b8:	9b07      	ldr	r3, [sp, #28]
 800d1ba:	1b9e      	subs	r6, r3, r6
 800d1bc:	9b08      	ldr	r3, [sp, #32]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	bfb4      	ite	lt
 800d1c2:	4633      	movlt	r3, r6
 800d1c4:	2300      	movge	r3, #0
 800d1c6:	9310      	str	r3, [sp, #64]	; 0x40
 800d1c8:	9b08      	ldr	r3, [sp, #32]
 800d1ca:	2500      	movs	r5, #0
 800d1cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d1d0:	9318      	str	r3, [sp, #96]	; 0x60
 800d1d2:	462e      	mov	r6, r5
 800d1d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1d6:	4620      	mov	r0, r4
 800d1d8:	6859      	ldr	r1, [r3, #4]
 800d1da:	f001 fdfd 	bl	800edd8 <_Balloc>
 800d1de:	9007      	str	r0, [sp, #28]
 800d1e0:	2800      	cmp	r0, #0
 800d1e2:	f43f af11 	beq.w	800d008 <_strtod_l+0x498>
 800d1e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1e8:	691a      	ldr	r2, [r3, #16]
 800d1ea:	3202      	adds	r2, #2
 800d1ec:	f103 010c 	add.w	r1, r3, #12
 800d1f0:	0092      	lsls	r2, r2, #2
 800d1f2:	300c      	adds	r0, #12
 800d1f4:	f7fe fd9e 	bl	800bd34 <memcpy>
 800d1f8:	ec4b ab10 	vmov	d0, sl, fp
 800d1fc:	aa20      	add	r2, sp, #128	; 0x80
 800d1fe:	a91f      	add	r1, sp, #124	; 0x7c
 800d200:	4620      	mov	r0, r4
 800d202:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800d206:	f002 f9cf 	bl	800f5a8 <__d2b>
 800d20a:	901e      	str	r0, [sp, #120]	; 0x78
 800d20c:	2800      	cmp	r0, #0
 800d20e:	f43f aefb 	beq.w	800d008 <_strtod_l+0x498>
 800d212:	2101      	movs	r1, #1
 800d214:	4620      	mov	r0, r4
 800d216:	f001 ff25 	bl	800f064 <__i2b>
 800d21a:	4606      	mov	r6, r0
 800d21c:	2800      	cmp	r0, #0
 800d21e:	f43f aef3 	beq.w	800d008 <_strtod_l+0x498>
 800d222:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d224:	9904      	ldr	r1, [sp, #16]
 800d226:	2b00      	cmp	r3, #0
 800d228:	bfab      	itete	ge
 800d22a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800d22c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800d22e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800d230:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800d234:	bfac      	ite	ge
 800d236:	eb03 0902 	addge.w	r9, r3, r2
 800d23a:	1ad7      	sublt	r7, r2, r3
 800d23c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d23e:	eba3 0801 	sub.w	r8, r3, r1
 800d242:	4490      	add	r8, r2
 800d244:	4ba3      	ldr	r3, [pc, #652]	; (800d4d4 <_strtod_l+0x964>)
 800d246:	f108 38ff 	add.w	r8, r8, #4294967295
 800d24a:	4598      	cmp	r8, r3
 800d24c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d250:	f280 80cc 	bge.w	800d3ec <_strtod_l+0x87c>
 800d254:	eba3 0308 	sub.w	r3, r3, r8
 800d258:	2b1f      	cmp	r3, #31
 800d25a:	eba2 0203 	sub.w	r2, r2, r3
 800d25e:	f04f 0101 	mov.w	r1, #1
 800d262:	f300 80b6 	bgt.w	800d3d2 <_strtod_l+0x862>
 800d266:	fa01 f303 	lsl.w	r3, r1, r3
 800d26a:	9311      	str	r3, [sp, #68]	; 0x44
 800d26c:	2300      	movs	r3, #0
 800d26e:	930c      	str	r3, [sp, #48]	; 0x30
 800d270:	eb09 0802 	add.w	r8, r9, r2
 800d274:	9b04      	ldr	r3, [sp, #16]
 800d276:	45c1      	cmp	r9, r8
 800d278:	4417      	add	r7, r2
 800d27a:	441f      	add	r7, r3
 800d27c:	464b      	mov	r3, r9
 800d27e:	bfa8      	it	ge
 800d280:	4643      	movge	r3, r8
 800d282:	42bb      	cmp	r3, r7
 800d284:	bfa8      	it	ge
 800d286:	463b      	movge	r3, r7
 800d288:	2b00      	cmp	r3, #0
 800d28a:	bfc2      	ittt	gt
 800d28c:	eba8 0803 	subgt.w	r8, r8, r3
 800d290:	1aff      	subgt	r7, r7, r3
 800d292:	eba9 0903 	subgt.w	r9, r9, r3
 800d296:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d298:	2b00      	cmp	r3, #0
 800d29a:	dd17      	ble.n	800d2cc <_strtod_l+0x75c>
 800d29c:	4631      	mov	r1, r6
 800d29e:	461a      	mov	r2, r3
 800d2a0:	4620      	mov	r0, r4
 800d2a2:	f001 ff9b 	bl	800f1dc <__pow5mult>
 800d2a6:	4606      	mov	r6, r0
 800d2a8:	2800      	cmp	r0, #0
 800d2aa:	f43f aead 	beq.w	800d008 <_strtod_l+0x498>
 800d2ae:	4601      	mov	r1, r0
 800d2b0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d2b2:	4620      	mov	r0, r4
 800d2b4:	f001 feec 	bl	800f090 <__multiply>
 800d2b8:	900f      	str	r0, [sp, #60]	; 0x3c
 800d2ba:	2800      	cmp	r0, #0
 800d2bc:	f43f aea4 	beq.w	800d008 <_strtod_l+0x498>
 800d2c0:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d2c2:	4620      	mov	r0, r4
 800d2c4:	f001 fdc8 	bl	800ee58 <_Bfree>
 800d2c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d2ca:	931e      	str	r3, [sp, #120]	; 0x78
 800d2cc:	f1b8 0f00 	cmp.w	r8, #0
 800d2d0:	f300 8091 	bgt.w	800d3f6 <_strtod_l+0x886>
 800d2d4:	9b08      	ldr	r3, [sp, #32]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	dd08      	ble.n	800d2ec <_strtod_l+0x77c>
 800d2da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d2dc:	9907      	ldr	r1, [sp, #28]
 800d2de:	4620      	mov	r0, r4
 800d2e0:	f001 ff7c 	bl	800f1dc <__pow5mult>
 800d2e4:	9007      	str	r0, [sp, #28]
 800d2e6:	2800      	cmp	r0, #0
 800d2e8:	f43f ae8e 	beq.w	800d008 <_strtod_l+0x498>
 800d2ec:	2f00      	cmp	r7, #0
 800d2ee:	dd08      	ble.n	800d302 <_strtod_l+0x792>
 800d2f0:	9907      	ldr	r1, [sp, #28]
 800d2f2:	463a      	mov	r2, r7
 800d2f4:	4620      	mov	r0, r4
 800d2f6:	f001 ffcb 	bl	800f290 <__lshift>
 800d2fa:	9007      	str	r0, [sp, #28]
 800d2fc:	2800      	cmp	r0, #0
 800d2fe:	f43f ae83 	beq.w	800d008 <_strtod_l+0x498>
 800d302:	f1b9 0f00 	cmp.w	r9, #0
 800d306:	dd08      	ble.n	800d31a <_strtod_l+0x7aa>
 800d308:	4631      	mov	r1, r6
 800d30a:	464a      	mov	r2, r9
 800d30c:	4620      	mov	r0, r4
 800d30e:	f001 ffbf 	bl	800f290 <__lshift>
 800d312:	4606      	mov	r6, r0
 800d314:	2800      	cmp	r0, #0
 800d316:	f43f ae77 	beq.w	800d008 <_strtod_l+0x498>
 800d31a:	9a07      	ldr	r2, [sp, #28]
 800d31c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d31e:	4620      	mov	r0, r4
 800d320:	f002 f83e 	bl	800f3a0 <__mdiff>
 800d324:	4605      	mov	r5, r0
 800d326:	2800      	cmp	r0, #0
 800d328:	f43f ae6e 	beq.w	800d008 <_strtod_l+0x498>
 800d32c:	68c3      	ldr	r3, [r0, #12]
 800d32e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d330:	2300      	movs	r3, #0
 800d332:	60c3      	str	r3, [r0, #12]
 800d334:	4631      	mov	r1, r6
 800d336:	f002 f817 	bl	800f368 <__mcmp>
 800d33a:	2800      	cmp	r0, #0
 800d33c:	da65      	bge.n	800d40a <_strtod_l+0x89a>
 800d33e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d340:	ea53 030a 	orrs.w	r3, r3, sl
 800d344:	f040 8087 	bne.w	800d456 <_strtod_l+0x8e6>
 800d348:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	f040 8082 	bne.w	800d456 <_strtod_l+0x8e6>
 800d352:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d356:	0d1b      	lsrs	r3, r3, #20
 800d358:	051b      	lsls	r3, r3, #20
 800d35a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d35e:	d97a      	bls.n	800d456 <_strtod_l+0x8e6>
 800d360:	696b      	ldr	r3, [r5, #20]
 800d362:	b913      	cbnz	r3, 800d36a <_strtod_l+0x7fa>
 800d364:	692b      	ldr	r3, [r5, #16]
 800d366:	2b01      	cmp	r3, #1
 800d368:	dd75      	ble.n	800d456 <_strtod_l+0x8e6>
 800d36a:	4629      	mov	r1, r5
 800d36c:	2201      	movs	r2, #1
 800d36e:	4620      	mov	r0, r4
 800d370:	f001 ff8e 	bl	800f290 <__lshift>
 800d374:	4631      	mov	r1, r6
 800d376:	4605      	mov	r5, r0
 800d378:	f001 fff6 	bl	800f368 <__mcmp>
 800d37c:	2800      	cmp	r0, #0
 800d37e:	dd6a      	ble.n	800d456 <_strtod_l+0x8e6>
 800d380:	9904      	ldr	r1, [sp, #16]
 800d382:	4a55      	ldr	r2, [pc, #340]	; (800d4d8 <_strtod_l+0x968>)
 800d384:	465b      	mov	r3, fp
 800d386:	2900      	cmp	r1, #0
 800d388:	f000 8085 	beq.w	800d496 <_strtod_l+0x926>
 800d38c:	ea02 010b 	and.w	r1, r2, fp
 800d390:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d394:	dc7f      	bgt.n	800d496 <_strtod_l+0x926>
 800d396:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d39a:	f77f aeaa 	ble.w	800d0f2 <_strtod_l+0x582>
 800d39e:	4a4f      	ldr	r2, [pc, #316]	; (800d4dc <_strtod_l+0x96c>)
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800d3a6:	4650      	mov	r0, sl
 800d3a8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800d3ac:	4659      	mov	r1, fp
 800d3ae:	f7f3 f923 	bl	80005f8 <__aeabi_dmul>
 800d3b2:	460b      	mov	r3, r1
 800d3b4:	4303      	orrs	r3, r0
 800d3b6:	bf08      	it	eq
 800d3b8:	2322      	moveq	r3, #34	; 0x22
 800d3ba:	4682      	mov	sl, r0
 800d3bc:	468b      	mov	fp, r1
 800d3be:	bf08      	it	eq
 800d3c0:	6023      	streq	r3, [r4, #0]
 800d3c2:	e62b      	b.n	800d01c <_strtod_l+0x4ac>
 800d3c4:	f04f 32ff 	mov.w	r2, #4294967295
 800d3c8:	fa02 f303 	lsl.w	r3, r2, r3
 800d3cc:	ea03 0a0a 	and.w	sl, r3, sl
 800d3d0:	e6de      	b.n	800d190 <_strtod_l+0x620>
 800d3d2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d3d6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d3da:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d3de:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d3e2:	fa01 f308 	lsl.w	r3, r1, r8
 800d3e6:	930c      	str	r3, [sp, #48]	; 0x30
 800d3e8:	9111      	str	r1, [sp, #68]	; 0x44
 800d3ea:	e741      	b.n	800d270 <_strtod_l+0x700>
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	930c      	str	r3, [sp, #48]	; 0x30
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	9311      	str	r3, [sp, #68]	; 0x44
 800d3f4:	e73c      	b.n	800d270 <_strtod_l+0x700>
 800d3f6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d3f8:	4642      	mov	r2, r8
 800d3fa:	4620      	mov	r0, r4
 800d3fc:	f001 ff48 	bl	800f290 <__lshift>
 800d400:	901e      	str	r0, [sp, #120]	; 0x78
 800d402:	2800      	cmp	r0, #0
 800d404:	f47f af66 	bne.w	800d2d4 <_strtod_l+0x764>
 800d408:	e5fe      	b.n	800d008 <_strtod_l+0x498>
 800d40a:	465f      	mov	r7, fp
 800d40c:	d16e      	bne.n	800d4ec <_strtod_l+0x97c>
 800d40e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d410:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d414:	b342      	cbz	r2, 800d468 <_strtod_l+0x8f8>
 800d416:	4a32      	ldr	r2, [pc, #200]	; (800d4e0 <_strtod_l+0x970>)
 800d418:	4293      	cmp	r3, r2
 800d41a:	d128      	bne.n	800d46e <_strtod_l+0x8fe>
 800d41c:	9b04      	ldr	r3, [sp, #16]
 800d41e:	4650      	mov	r0, sl
 800d420:	b1eb      	cbz	r3, 800d45e <_strtod_l+0x8ee>
 800d422:	4a2d      	ldr	r2, [pc, #180]	; (800d4d8 <_strtod_l+0x968>)
 800d424:	403a      	ands	r2, r7
 800d426:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800d42a:	f04f 31ff 	mov.w	r1, #4294967295
 800d42e:	d819      	bhi.n	800d464 <_strtod_l+0x8f4>
 800d430:	0d12      	lsrs	r2, r2, #20
 800d432:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d436:	fa01 f303 	lsl.w	r3, r1, r3
 800d43a:	4298      	cmp	r0, r3
 800d43c:	d117      	bne.n	800d46e <_strtod_l+0x8fe>
 800d43e:	4b29      	ldr	r3, [pc, #164]	; (800d4e4 <_strtod_l+0x974>)
 800d440:	429f      	cmp	r7, r3
 800d442:	d102      	bne.n	800d44a <_strtod_l+0x8da>
 800d444:	3001      	adds	r0, #1
 800d446:	f43f addf 	beq.w	800d008 <_strtod_l+0x498>
 800d44a:	4b23      	ldr	r3, [pc, #140]	; (800d4d8 <_strtod_l+0x968>)
 800d44c:	403b      	ands	r3, r7
 800d44e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d452:	f04f 0a00 	mov.w	sl, #0
 800d456:	9b04      	ldr	r3, [sp, #16]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d1a0      	bne.n	800d39e <_strtod_l+0x82e>
 800d45c:	e5de      	b.n	800d01c <_strtod_l+0x4ac>
 800d45e:	f04f 33ff 	mov.w	r3, #4294967295
 800d462:	e7ea      	b.n	800d43a <_strtod_l+0x8ca>
 800d464:	460b      	mov	r3, r1
 800d466:	e7e8      	b.n	800d43a <_strtod_l+0x8ca>
 800d468:	ea53 030a 	orrs.w	r3, r3, sl
 800d46c:	d088      	beq.n	800d380 <_strtod_l+0x810>
 800d46e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d470:	b1db      	cbz	r3, 800d4aa <_strtod_l+0x93a>
 800d472:	423b      	tst	r3, r7
 800d474:	d0ef      	beq.n	800d456 <_strtod_l+0x8e6>
 800d476:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d478:	9a04      	ldr	r2, [sp, #16]
 800d47a:	4650      	mov	r0, sl
 800d47c:	4659      	mov	r1, fp
 800d47e:	b1c3      	cbz	r3, 800d4b2 <_strtod_l+0x942>
 800d480:	f7ff fb5a 	bl	800cb38 <sulp>
 800d484:	4602      	mov	r2, r0
 800d486:	460b      	mov	r3, r1
 800d488:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d48c:	f7f2 fefe 	bl	800028c <__adddf3>
 800d490:	4682      	mov	sl, r0
 800d492:	468b      	mov	fp, r1
 800d494:	e7df      	b.n	800d456 <_strtod_l+0x8e6>
 800d496:	4013      	ands	r3, r2
 800d498:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d49c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d4a0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d4a4:	f04f 3aff 	mov.w	sl, #4294967295
 800d4a8:	e7d5      	b.n	800d456 <_strtod_l+0x8e6>
 800d4aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d4ac:	ea13 0f0a 	tst.w	r3, sl
 800d4b0:	e7e0      	b.n	800d474 <_strtod_l+0x904>
 800d4b2:	f7ff fb41 	bl	800cb38 <sulp>
 800d4b6:	4602      	mov	r2, r0
 800d4b8:	460b      	mov	r3, r1
 800d4ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d4be:	f7f2 fee3 	bl	8000288 <__aeabi_dsub>
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	4682      	mov	sl, r0
 800d4c8:	468b      	mov	fp, r1
 800d4ca:	f7f3 fafd 	bl	8000ac8 <__aeabi_dcmpeq>
 800d4ce:	2800      	cmp	r0, #0
 800d4d0:	d0c1      	beq.n	800d456 <_strtod_l+0x8e6>
 800d4d2:	e60e      	b.n	800d0f2 <_strtod_l+0x582>
 800d4d4:	fffffc02 	.word	0xfffffc02
 800d4d8:	7ff00000 	.word	0x7ff00000
 800d4dc:	39500000 	.word	0x39500000
 800d4e0:	000fffff 	.word	0x000fffff
 800d4e4:	7fefffff 	.word	0x7fefffff
 800d4e8:	08010b30 	.word	0x08010b30
 800d4ec:	4631      	mov	r1, r6
 800d4ee:	4628      	mov	r0, r5
 800d4f0:	f002 f8b6 	bl	800f660 <__ratio>
 800d4f4:	ec59 8b10 	vmov	r8, r9, d0
 800d4f8:	ee10 0a10 	vmov	r0, s0
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d502:	4649      	mov	r1, r9
 800d504:	f7f3 faf4 	bl	8000af0 <__aeabi_dcmple>
 800d508:	2800      	cmp	r0, #0
 800d50a:	d07c      	beq.n	800d606 <_strtod_l+0xa96>
 800d50c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d04c      	beq.n	800d5ac <_strtod_l+0xa3c>
 800d512:	4b95      	ldr	r3, [pc, #596]	; (800d768 <_strtod_l+0xbf8>)
 800d514:	2200      	movs	r2, #0
 800d516:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d51a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d768 <_strtod_l+0xbf8>
 800d51e:	f04f 0800 	mov.w	r8, #0
 800d522:	4b92      	ldr	r3, [pc, #584]	; (800d76c <_strtod_l+0xbfc>)
 800d524:	403b      	ands	r3, r7
 800d526:	9311      	str	r3, [sp, #68]	; 0x44
 800d528:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d52a:	4b91      	ldr	r3, [pc, #580]	; (800d770 <_strtod_l+0xc00>)
 800d52c:	429a      	cmp	r2, r3
 800d52e:	f040 80b2 	bne.w	800d696 <_strtod_l+0xb26>
 800d532:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d536:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d53a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d53e:	ec4b ab10 	vmov	d0, sl, fp
 800d542:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800d546:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d54a:	f001 ffb1 	bl	800f4b0 <__ulp>
 800d54e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d552:	ec53 2b10 	vmov	r2, r3, d0
 800d556:	f7f3 f84f 	bl	80005f8 <__aeabi_dmul>
 800d55a:	4652      	mov	r2, sl
 800d55c:	465b      	mov	r3, fp
 800d55e:	f7f2 fe95 	bl	800028c <__adddf3>
 800d562:	460b      	mov	r3, r1
 800d564:	4981      	ldr	r1, [pc, #516]	; (800d76c <_strtod_l+0xbfc>)
 800d566:	4a83      	ldr	r2, [pc, #524]	; (800d774 <_strtod_l+0xc04>)
 800d568:	4019      	ands	r1, r3
 800d56a:	4291      	cmp	r1, r2
 800d56c:	4682      	mov	sl, r0
 800d56e:	d95e      	bls.n	800d62e <_strtod_l+0xabe>
 800d570:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d572:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d576:	4293      	cmp	r3, r2
 800d578:	d103      	bne.n	800d582 <_strtod_l+0xa12>
 800d57a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d57c:	3301      	adds	r3, #1
 800d57e:	f43f ad43 	beq.w	800d008 <_strtod_l+0x498>
 800d582:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800d780 <_strtod_l+0xc10>
 800d586:	f04f 3aff 	mov.w	sl, #4294967295
 800d58a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d58c:	4620      	mov	r0, r4
 800d58e:	f001 fc63 	bl	800ee58 <_Bfree>
 800d592:	9907      	ldr	r1, [sp, #28]
 800d594:	4620      	mov	r0, r4
 800d596:	f001 fc5f 	bl	800ee58 <_Bfree>
 800d59a:	4631      	mov	r1, r6
 800d59c:	4620      	mov	r0, r4
 800d59e:	f001 fc5b 	bl	800ee58 <_Bfree>
 800d5a2:	4629      	mov	r1, r5
 800d5a4:	4620      	mov	r0, r4
 800d5a6:	f001 fc57 	bl	800ee58 <_Bfree>
 800d5aa:	e613      	b.n	800d1d4 <_strtod_l+0x664>
 800d5ac:	f1ba 0f00 	cmp.w	sl, #0
 800d5b0:	d11b      	bne.n	800d5ea <_strtod_l+0xa7a>
 800d5b2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d5b6:	b9f3      	cbnz	r3, 800d5f6 <_strtod_l+0xa86>
 800d5b8:	4b6b      	ldr	r3, [pc, #428]	; (800d768 <_strtod_l+0xbf8>)
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	4640      	mov	r0, r8
 800d5be:	4649      	mov	r1, r9
 800d5c0:	f7f3 fa8c 	bl	8000adc <__aeabi_dcmplt>
 800d5c4:	b9d0      	cbnz	r0, 800d5fc <_strtod_l+0xa8c>
 800d5c6:	4640      	mov	r0, r8
 800d5c8:	4649      	mov	r1, r9
 800d5ca:	4b6b      	ldr	r3, [pc, #428]	; (800d778 <_strtod_l+0xc08>)
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	f7f3 f813 	bl	80005f8 <__aeabi_dmul>
 800d5d2:	4680      	mov	r8, r0
 800d5d4:	4689      	mov	r9, r1
 800d5d6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d5da:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800d5de:	931b      	str	r3, [sp, #108]	; 0x6c
 800d5e0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800d5e4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d5e8:	e79b      	b.n	800d522 <_strtod_l+0x9b2>
 800d5ea:	f1ba 0f01 	cmp.w	sl, #1
 800d5ee:	d102      	bne.n	800d5f6 <_strtod_l+0xa86>
 800d5f0:	2f00      	cmp	r7, #0
 800d5f2:	f43f ad7e 	beq.w	800d0f2 <_strtod_l+0x582>
 800d5f6:	4b61      	ldr	r3, [pc, #388]	; (800d77c <_strtod_l+0xc0c>)
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	e78c      	b.n	800d516 <_strtod_l+0x9a6>
 800d5fc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800d778 <_strtod_l+0xc08>
 800d600:	f04f 0800 	mov.w	r8, #0
 800d604:	e7e7      	b.n	800d5d6 <_strtod_l+0xa66>
 800d606:	4b5c      	ldr	r3, [pc, #368]	; (800d778 <_strtod_l+0xc08>)
 800d608:	4640      	mov	r0, r8
 800d60a:	4649      	mov	r1, r9
 800d60c:	2200      	movs	r2, #0
 800d60e:	f7f2 fff3 	bl	80005f8 <__aeabi_dmul>
 800d612:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d614:	4680      	mov	r8, r0
 800d616:	4689      	mov	r9, r1
 800d618:	b933      	cbnz	r3, 800d628 <_strtod_l+0xab8>
 800d61a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d61e:	9012      	str	r0, [sp, #72]	; 0x48
 800d620:	9313      	str	r3, [sp, #76]	; 0x4c
 800d622:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800d626:	e7dd      	b.n	800d5e4 <_strtod_l+0xa74>
 800d628:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800d62c:	e7f9      	b.n	800d622 <_strtod_l+0xab2>
 800d62e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d632:	9b04      	ldr	r3, [sp, #16]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d1a8      	bne.n	800d58a <_strtod_l+0xa1a>
 800d638:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d63c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d63e:	0d1b      	lsrs	r3, r3, #20
 800d640:	051b      	lsls	r3, r3, #20
 800d642:	429a      	cmp	r2, r3
 800d644:	d1a1      	bne.n	800d58a <_strtod_l+0xa1a>
 800d646:	4640      	mov	r0, r8
 800d648:	4649      	mov	r1, r9
 800d64a:	f7f3 fb35 	bl	8000cb8 <__aeabi_d2lz>
 800d64e:	f7f2 ffa5 	bl	800059c <__aeabi_l2d>
 800d652:	4602      	mov	r2, r0
 800d654:	460b      	mov	r3, r1
 800d656:	4640      	mov	r0, r8
 800d658:	4649      	mov	r1, r9
 800d65a:	f7f2 fe15 	bl	8000288 <__aeabi_dsub>
 800d65e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d660:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d664:	ea43 030a 	orr.w	r3, r3, sl
 800d668:	4313      	orrs	r3, r2
 800d66a:	4680      	mov	r8, r0
 800d66c:	4689      	mov	r9, r1
 800d66e:	d053      	beq.n	800d718 <_strtod_l+0xba8>
 800d670:	a335      	add	r3, pc, #212	; (adr r3, 800d748 <_strtod_l+0xbd8>)
 800d672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d676:	f7f3 fa31 	bl	8000adc <__aeabi_dcmplt>
 800d67a:	2800      	cmp	r0, #0
 800d67c:	f47f acce 	bne.w	800d01c <_strtod_l+0x4ac>
 800d680:	a333      	add	r3, pc, #204	; (adr r3, 800d750 <_strtod_l+0xbe0>)
 800d682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d686:	4640      	mov	r0, r8
 800d688:	4649      	mov	r1, r9
 800d68a:	f7f3 fa45 	bl	8000b18 <__aeabi_dcmpgt>
 800d68e:	2800      	cmp	r0, #0
 800d690:	f43f af7b 	beq.w	800d58a <_strtod_l+0xa1a>
 800d694:	e4c2      	b.n	800d01c <_strtod_l+0x4ac>
 800d696:	9b04      	ldr	r3, [sp, #16]
 800d698:	b333      	cbz	r3, 800d6e8 <_strtod_l+0xb78>
 800d69a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d69c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d6a0:	d822      	bhi.n	800d6e8 <_strtod_l+0xb78>
 800d6a2:	a32d      	add	r3, pc, #180	; (adr r3, 800d758 <_strtod_l+0xbe8>)
 800d6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a8:	4640      	mov	r0, r8
 800d6aa:	4649      	mov	r1, r9
 800d6ac:	f7f3 fa20 	bl	8000af0 <__aeabi_dcmple>
 800d6b0:	b1a0      	cbz	r0, 800d6dc <_strtod_l+0xb6c>
 800d6b2:	4649      	mov	r1, r9
 800d6b4:	4640      	mov	r0, r8
 800d6b6:	f7f3 fa77 	bl	8000ba8 <__aeabi_d2uiz>
 800d6ba:	2801      	cmp	r0, #1
 800d6bc:	bf38      	it	cc
 800d6be:	2001      	movcc	r0, #1
 800d6c0:	f7f2 ff20 	bl	8000504 <__aeabi_ui2d>
 800d6c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d6c6:	4680      	mov	r8, r0
 800d6c8:	4689      	mov	r9, r1
 800d6ca:	bb13      	cbnz	r3, 800d712 <_strtod_l+0xba2>
 800d6cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d6d0:	9014      	str	r0, [sp, #80]	; 0x50
 800d6d2:	9315      	str	r3, [sp, #84]	; 0x54
 800d6d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d6d8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d6dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d6de:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d6e0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d6e4:	1a9b      	subs	r3, r3, r2
 800d6e6:	930d      	str	r3, [sp, #52]	; 0x34
 800d6e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d6ec:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d6f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d6f4:	f001 fedc 	bl	800f4b0 <__ulp>
 800d6f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d6fc:	ec53 2b10 	vmov	r2, r3, d0
 800d700:	f7f2 ff7a 	bl	80005f8 <__aeabi_dmul>
 800d704:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d708:	f7f2 fdc0 	bl	800028c <__adddf3>
 800d70c:	4682      	mov	sl, r0
 800d70e:	468b      	mov	fp, r1
 800d710:	e78f      	b.n	800d632 <_strtod_l+0xac2>
 800d712:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800d716:	e7dd      	b.n	800d6d4 <_strtod_l+0xb64>
 800d718:	a311      	add	r3, pc, #68	; (adr r3, 800d760 <_strtod_l+0xbf0>)
 800d71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d71e:	f7f3 f9dd 	bl	8000adc <__aeabi_dcmplt>
 800d722:	e7b4      	b.n	800d68e <_strtod_l+0xb1e>
 800d724:	2300      	movs	r3, #0
 800d726:	930e      	str	r3, [sp, #56]	; 0x38
 800d728:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d72a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d72c:	6013      	str	r3, [r2, #0]
 800d72e:	f7ff ba65 	b.w	800cbfc <_strtod_l+0x8c>
 800d732:	2b65      	cmp	r3, #101	; 0x65
 800d734:	f43f ab5d 	beq.w	800cdf2 <_strtod_l+0x282>
 800d738:	2b45      	cmp	r3, #69	; 0x45
 800d73a:	f43f ab5a 	beq.w	800cdf2 <_strtod_l+0x282>
 800d73e:	2201      	movs	r2, #1
 800d740:	f7ff bb92 	b.w	800ce68 <_strtod_l+0x2f8>
 800d744:	f3af 8000 	nop.w
 800d748:	94a03595 	.word	0x94a03595
 800d74c:	3fdfffff 	.word	0x3fdfffff
 800d750:	35afe535 	.word	0x35afe535
 800d754:	3fe00000 	.word	0x3fe00000
 800d758:	ffc00000 	.word	0xffc00000
 800d75c:	41dfffff 	.word	0x41dfffff
 800d760:	94a03595 	.word	0x94a03595
 800d764:	3fcfffff 	.word	0x3fcfffff
 800d768:	3ff00000 	.word	0x3ff00000
 800d76c:	7ff00000 	.word	0x7ff00000
 800d770:	7fe00000 	.word	0x7fe00000
 800d774:	7c9fffff 	.word	0x7c9fffff
 800d778:	3fe00000 	.word	0x3fe00000
 800d77c:	bff00000 	.word	0xbff00000
 800d780:	7fefffff 	.word	0x7fefffff

0800d784 <_strtod_r>:
 800d784:	4b01      	ldr	r3, [pc, #4]	; (800d78c <_strtod_r+0x8>)
 800d786:	f7ff b9f3 	b.w	800cb70 <_strtod_l>
 800d78a:	bf00      	nop
 800d78c:	20000088 	.word	0x20000088

0800d790 <strtod>:
 800d790:	460a      	mov	r2, r1
 800d792:	4601      	mov	r1, r0
 800d794:	4802      	ldr	r0, [pc, #8]	; (800d7a0 <strtod+0x10>)
 800d796:	4b03      	ldr	r3, [pc, #12]	; (800d7a4 <strtod+0x14>)
 800d798:	6800      	ldr	r0, [r0, #0]
 800d79a:	f7ff b9e9 	b.w	800cb70 <_strtod_l>
 800d79e:	bf00      	nop
 800d7a0:	20000020 	.word	0x20000020
 800d7a4:	20000088 	.word	0x20000088

0800d7a8 <strtok>:
 800d7a8:	4b16      	ldr	r3, [pc, #88]	; (800d804 <strtok+0x5c>)
 800d7aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d7ac:	681e      	ldr	r6, [r3, #0]
 800d7ae:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800d7b0:	4605      	mov	r5, r0
 800d7b2:	b9fc      	cbnz	r4, 800d7f4 <strtok+0x4c>
 800d7b4:	2050      	movs	r0, #80	; 0x50
 800d7b6:	9101      	str	r1, [sp, #4]
 800d7b8:	f001 faf4 	bl	800eda4 <malloc>
 800d7bc:	9901      	ldr	r1, [sp, #4]
 800d7be:	65b0      	str	r0, [r6, #88]	; 0x58
 800d7c0:	4602      	mov	r2, r0
 800d7c2:	b920      	cbnz	r0, 800d7ce <strtok+0x26>
 800d7c4:	4b10      	ldr	r3, [pc, #64]	; (800d808 <strtok+0x60>)
 800d7c6:	4811      	ldr	r0, [pc, #68]	; (800d80c <strtok+0x64>)
 800d7c8:	2157      	movs	r1, #87	; 0x57
 800d7ca:	f000 f8cf 	bl	800d96c <__assert_func>
 800d7ce:	e9c0 4400 	strd	r4, r4, [r0]
 800d7d2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800d7d6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800d7da:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800d7de:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800d7e2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800d7e6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800d7ea:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800d7ee:	6184      	str	r4, [r0, #24]
 800d7f0:	7704      	strb	r4, [r0, #28]
 800d7f2:	6244      	str	r4, [r0, #36]	; 0x24
 800d7f4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800d7f6:	2301      	movs	r3, #1
 800d7f8:	4628      	mov	r0, r5
 800d7fa:	b002      	add	sp, #8
 800d7fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d800:	f000 b806 	b.w	800d810 <__strtok_r>
 800d804:	20000020 	.word	0x20000020
 800d808:	08010b58 	.word	0x08010b58
 800d80c:	08010b6f 	.word	0x08010b6f

0800d810 <__strtok_r>:
 800d810:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d812:	b908      	cbnz	r0, 800d818 <__strtok_r+0x8>
 800d814:	6810      	ldr	r0, [r2, #0]
 800d816:	b188      	cbz	r0, 800d83c <__strtok_r+0x2c>
 800d818:	4604      	mov	r4, r0
 800d81a:	4620      	mov	r0, r4
 800d81c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800d820:	460f      	mov	r7, r1
 800d822:	f817 6b01 	ldrb.w	r6, [r7], #1
 800d826:	b91e      	cbnz	r6, 800d830 <__strtok_r+0x20>
 800d828:	b965      	cbnz	r5, 800d844 <__strtok_r+0x34>
 800d82a:	6015      	str	r5, [r2, #0]
 800d82c:	4628      	mov	r0, r5
 800d82e:	e005      	b.n	800d83c <__strtok_r+0x2c>
 800d830:	42b5      	cmp	r5, r6
 800d832:	d1f6      	bne.n	800d822 <__strtok_r+0x12>
 800d834:	2b00      	cmp	r3, #0
 800d836:	d1f0      	bne.n	800d81a <__strtok_r+0xa>
 800d838:	6014      	str	r4, [r2, #0]
 800d83a:	7003      	strb	r3, [r0, #0]
 800d83c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d83e:	461c      	mov	r4, r3
 800d840:	e00c      	b.n	800d85c <__strtok_r+0x4c>
 800d842:	b915      	cbnz	r5, 800d84a <__strtok_r+0x3a>
 800d844:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d848:	460e      	mov	r6, r1
 800d84a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800d84e:	42ab      	cmp	r3, r5
 800d850:	d1f7      	bne.n	800d842 <__strtok_r+0x32>
 800d852:	2b00      	cmp	r3, #0
 800d854:	d0f3      	beq.n	800d83e <__strtok_r+0x2e>
 800d856:	2300      	movs	r3, #0
 800d858:	f804 3c01 	strb.w	r3, [r4, #-1]
 800d85c:	6014      	str	r4, [r2, #0]
 800d85e:	e7ed      	b.n	800d83c <__strtok_r+0x2c>

0800d860 <_strtol_l.isra.0>:
 800d860:	2b01      	cmp	r3, #1
 800d862:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d866:	d001      	beq.n	800d86c <_strtol_l.isra.0+0xc>
 800d868:	2b24      	cmp	r3, #36	; 0x24
 800d86a:	d906      	bls.n	800d87a <_strtol_l.isra.0+0x1a>
 800d86c:	f7fe fa38 	bl	800bce0 <__errno>
 800d870:	2316      	movs	r3, #22
 800d872:	6003      	str	r3, [r0, #0]
 800d874:	2000      	movs	r0, #0
 800d876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d87a:	4f3a      	ldr	r7, [pc, #232]	; (800d964 <_strtol_l.isra.0+0x104>)
 800d87c:	468e      	mov	lr, r1
 800d87e:	4676      	mov	r6, lr
 800d880:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800d884:	5de5      	ldrb	r5, [r4, r7]
 800d886:	f015 0508 	ands.w	r5, r5, #8
 800d88a:	d1f8      	bne.n	800d87e <_strtol_l.isra.0+0x1e>
 800d88c:	2c2d      	cmp	r4, #45	; 0x2d
 800d88e:	d134      	bne.n	800d8fa <_strtol_l.isra.0+0x9a>
 800d890:	f89e 4000 	ldrb.w	r4, [lr]
 800d894:	f04f 0801 	mov.w	r8, #1
 800d898:	f106 0e02 	add.w	lr, r6, #2
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d05c      	beq.n	800d95a <_strtol_l.isra.0+0xfa>
 800d8a0:	2b10      	cmp	r3, #16
 800d8a2:	d10c      	bne.n	800d8be <_strtol_l.isra.0+0x5e>
 800d8a4:	2c30      	cmp	r4, #48	; 0x30
 800d8a6:	d10a      	bne.n	800d8be <_strtol_l.isra.0+0x5e>
 800d8a8:	f89e 4000 	ldrb.w	r4, [lr]
 800d8ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d8b0:	2c58      	cmp	r4, #88	; 0x58
 800d8b2:	d14d      	bne.n	800d950 <_strtol_l.isra.0+0xf0>
 800d8b4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800d8b8:	2310      	movs	r3, #16
 800d8ba:	f10e 0e02 	add.w	lr, lr, #2
 800d8be:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800d8c2:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d8c6:	2600      	movs	r6, #0
 800d8c8:	fbbc f9f3 	udiv	r9, ip, r3
 800d8cc:	4635      	mov	r5, r6
 800d8ce:	fb03 ca19 	mls	sl, r3, r9, ip
 800d8d2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800d8d6:	2f09      	cmp	r7, #9
 800d8d8:	d818      	bhi.n	800d90c <_strtol_l.isra.0+0xac>
 800d8da:	463c      	mov	r4, r7
 800d8dc:	42a3      	cmp	r3, r4
 800d8de:	dd24      	ble.n	800d92a <_strtol_l.isra.0+0xca>
 800d8e0:	2e00      	cmp	r6, #0
 800d8e2:	db1f      	blt.n	800d924 <_strtol_l.isra.0+0xc4>
 800d8e4:	45a9      	cmp	r9, r5
 800d8e6:	d31d      	bcc.n	800d924 <_strtol_l.isra.0+0xc4>
 800d8e8:	d101      	bne.n	800d8ee <_strtol_l.isra.0+0x8e>
 800d8ea:	45a2      	cmp	sl, r4
 800d8ec:	db1a      	blt.n	800d924 <_strtol_l.isra.0+0xc4>
 800d8ee:	fb05 4503 	mla	r5, r5, r3, r4
 800d8f2:	2601      	movs	r6, #1
 800d8f4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800d8f8:	e7eb      	b.n	800d8d2 <_strtol_l.isra.0+0x72>
 800d8fa:	2c2b      	cmp	r4, #43	; 0x2b
 800d8fc:	bf08      	it	eq
 800d8fe:	f89e 4000 	ldrbeq.w	r4, [lr]
 800d902:	46a8      	mov	r8, r5
 800d904:	bf08      	it	eq
 800d906:	f106 0e02 	addeq.w	lr, r6, #2
 800d90a:	e7c7      	b.n	800d89c <_strtol_l.isra.0+0x3c>
 800d90c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800d910:	2f19      	cmp	r7, #25
 800d912:	d801      	bhi.n	800d918 <_strtol_l.isra.0+0xb8>
 800d914:	3c37      	subs	r4, #55	; 0x37
 800d916:	e7e1      	b.n	800d8dc <_strtol_l.isra.0+0x7c>
 800d918:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800d91c:	2f19      	cmp	r7, #25
 800d91e:	d804      	bhi.n	800d92a <_strtol_l.isra.0+0xca>
 800d920:	3c57      	subs	r4, #87	; 0x57
 800d922:	e7db      	b.n	800d8dc <_strtol_l.isra.0+0x7c>
 800d924:	f04f 36ff 	mov.w	r6, #4294967295
 800d928:	e7e4      	b.n	800d8f4 <_strtol_l.isra.0+0x94>
 800d92a:	2e00      	cmp	r6, #0
 800d92c:	da05      	bge.n	800d93a <_strtol_l.isra.0+0xda>
 800d92e:	2322      	movs	r3, #34	; 0x22
 800d930:	6003      	str	r3, [r0, #0]
 800d932:	4665      	mov	r5, ip
 800d934:	b942      	cbnz	r2, 800d948 <_strtol_l.isra.0+0xe8>
 800d936:	4628      	mov	r0, r5
 800d938:	e79d      	b.n	800d876 <_strtol_l.isra.0+0x16>
 800d93a:	f1b8 0f00 	cmp.w	r8, #0
 800d93e:	d000      	beq.n	800d942 <_strtol_l.isra.0+0xe2>
 800d940:	426d      	negs	r5, r5
 800d942:	2a00      	cmp	r2, #0
 800d944:	d0f7      	beq.n	800d936 <_strtol_l.isra.0+0xd6>
 800d946:	b10e      	cbz	r6, 800d94c <_strtol_l.isra.0+0xec>
 800d948:	f10e 31ff 	add.w	r1, lr, #4294967295
 800d94c:	6011      	str	r1, [r2, #0]
 800d94e:	e7f2      	b.n	800d936 <_strtol_l.isra.0+0xd6>
 800d950:	2430      	movs	r4, #48	; 0x30
 800d952:	2b00      	cmp	r3, #0
 800d954:	d1b3      	bne.n	800d8be <_strtol_l.isra.0+0x5e>
 800d956:	2308      	movs	r3, #8
 800d958:	e7b1      	b.n	800d8be <_strtol_l.isra.0+0x5e>
 800d95a:	2c30      	cmp	r4, #48	; 0x30
 800d95c:	d0a4      	beq.n	800d8a8 <_strtol_l.isra.0+0x48>
 800d95e:	230a      	movs	r3, #10
 800d960:	e7ad      	b.n	800d8be <_strtol_l.isra.0+0x5e>
 800d962:	bf00      	nop
 800d964:	08010c0d 	.word	0x08010c0d

0800d968 <_strtol_r>:
 800d968:	f7ff bf7a 	b.w	800d860 <_strtol_l.isra.0>

0800d96c <__assert_func>:
 800d96c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d96e:	4614      	mov	r4, r2
 800d970:	461a      	mov	r2, r3
 800d972:	4b09      	ldr	r3, [pc, #36]	; (800d998 <__assert_func+0x2c>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	4605      	mov	r5, r0
 800d978:	68d8      	ldr	r0, [r3, #12]
 800d97a:	b14c      	cbz	r4, 800d990 <__assert_func+0x24>
 800d97c:	4b07      	ldr	r3, [pc, #28]	; (800d99c <__assert_func+0x30>)
 800d97e:	9100      	str	r1, [sp, #0]
 800d980:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d984:	4906      	ldr	r1, [pc, #24]	; (800d9a0 <__assert_func+0x34>)
 800d986:	462b      	mov	r3, r5
 800d988:	f000 fe86 	bl	800e698 <fiprintf>
 800d98c:	f7fe f99e 	bl	800bccc <abort>
 800d990:	4b04      	ldr	r3, [pc, #16]	; (800d9a4 <__assert_func+0x38>)
 800d992:	461c      	mov	r4, r3
 800d994:	e7f3      	b.n	800d97e <__assert_func+0x12>
 800d996:	bf00      	nop
 800d998:	20000020 	.word	0x20000020
 800d99c:	08010bd0 	.word	0x08010bd0
 800d9a0:	08010bdd 	.word	0x08010bdd
 800d9a4:	08010c0b 	.word	0x08010c0b

0800d9a8 <quorem>:
 800d9a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9ac:	6903      	ldr	r3, [r0, #16]
 800d9ae:	690c      	ldr	r4, [r1, #16]
 800d9b0:	42a3      	cmp	r3, r4
 800d9b2:	4607      	mov	r7, r0
 800d9b4:	f2c0 8081 	blt.w	800daba <quorem+0x112>
 800d9b8:	3c01      	subs	r4, #1
 800d9ba:	f101 0814 	add.w	r8, r1, #20
 800d9be:	f100 0514 	add.w	r5, r0, #20
 800d9c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d9c6:	9301      	str	r3, [sp, #4]
 800d9c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d9cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d9d0:	3301      	adds	r3, #1
 800d9d2:	429a      	cmp	r2, r3
 800d9d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d9d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d9dc:	fbb2 f6f3 	udiv	r6, r2, r3
 800d9e0:	d331      	bcc.n	800da46 <quorem+0x9e>
 800d9e2:	f04f 0e00 	mov.w	lr, #0
 800d9e6:	4640      	mov	r0, r8
 800d9e8:	46ac      	mov	ip, r5
 800d9ea:	46f2      	mov	sl, lr
 800d9ec:	f850 2b04 	ldr.w	r2, [r0], #4
 800d9f0:	b293      	uxth	r3, r2
 800d9f2:	fb06 e303 	mla	r3, r6, r3, lr
 800d9f6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d9fa:	b29b      	uxth	r3, r3
 800d9fc:	ebaa 0303 	sub.w	r3, sl, r3
 800da00:	0c12      	lsrs	r2, r2, #16
 800da02:	f8dc a000 	ldr.w	sl, [ip]
 800da06:	fb06 e202 	mla	r2, r6, r2, lr
 800da0a:	fa13 f38a 	uxtah	r3, r3, sl
 800da0e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800da12:	fa1f fa82 	uxth.w	sl, r2
 800da16:	f8dc 2000 	ldr.w	r2, [ip]
 800da1a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800da1e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800da22:	b29b      	uxth	r3, r3
 800da24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800da28:	4581      	cmp	r9, r0
 800da2a:	f84c 3b04 	str.w	r3, [ip], #4
 800da2e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800da32:	d2db      	bcs.n	800d9ec <quorem+0x44>
 800da34:	f855 300b 	ldr.w	r3, [r5, fp]
 800da38:	b92b      	cbnz	r3, 800da46 <quorem+0x9e>
 800da3a:	9b01      	ldr	r3, [sp, #4]
 800da3c:	3b04      	subs	r3, #4
 800da3e:	429d      	cmp	r5, r3
 800da40:	461a      	mov	r2, r3
 800da42:	d32e      	bcc.n	800daa2 <quorem+0xfa>
 800da44:	613c      	str	r4, [r7, #16]
 800da46:	4638      	mov	r0, r7
 800da48:	f001 fc8e 	bl	800f368 <__mcmp>
 800da4c:	2800      	cmp	r0, #0
 800da4e:	db24      	blt.n	800da9a <quorem+0xf2>
 800da50:	3601      	adds	r6, #1
 800da52:	4628      	mov	r0, r5
 800da54:	f04f 0c00 	mov.w	ip, #0
 800da58:	f858 2b04 	ldr.w	r2, [r8], #4
 800da5c:	f8d0 e000 	ldr.w	lr, [r0]
 800da60:	b293      	uxth	r3, r2
 800da62:	ebac 0303 	sub.w	r3, ip, r3
 800da66:	0c12      	lsrs	r2, r2, #16
 800da68:	fa13 f38e 	uxtah	r3, r3, lr
 800da6c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800da70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800da74:	b29b      	uxth	r3, r3
 800da76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800da7a:	45c1      	cmp	r9, r8
 800da7c:	f840 3b04 	str.w	r3, [r0], #4
 800da80:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800da84:	d2e8      	bcs.n	800da58 <quorem+0xb0>
 800da86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800da8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800da8e:	b922      	cbnz	r2, 800da9a <quorem+0xf2>
 800da90:	3b04      	subs	r3, #4
 800da92:	429d      	cmp	r5, r3
 800da94:	461a      	mov	r2, r3
 800da96:	d30a      	bcc.n	800daae <quorem+0x106>
 800da98:	613c      	str	r4, [r7, #16]
 800da9a:	4630      	mov	r0, r6
 800da9c:	b003      	add	sp, #12
 800da9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daa2:	6812      	ldr	r2, [r2, #0]
 800daa4:	3b04      	subs	r3, #4
 800daa6:	2a00      	cmp	r2, #0
 800daa8:	d1cc      	bne.n	800da44 <quorem+0x9c>
 800daaa:	3c01      	subs	r4, #1
 800daac:	e7c7      	b.n	800da3e <quorem+0x96>
 800daae:	6812      	ldr	r2, [r2, #0]
 800dab0:	3b04      	subs	r3, #4
 800dab2:	2a00      	cmp	r2, #0
 800dab4:	d1f0      	bne.n	800da98 <quorem+0xf0>
 800dab6:	3c01      	subs	r4, #1
 800dab8:	e7eb      	b.n	800da92 <quorem+0xea>
 800daba:	2000      	movs	r0, #0
 800dabc:	e7ee      	b.n	800da9c <quorem+0xf4>
	...

0800dac0 <_dtoa_r>:
 800dac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dac4:	ed2d 8b02 	vpush	{d8}
 800dac8:	ec57 6b10 	vmov	r6, r7, d0
 800dacc:	b095      	sub	sp, #84	; 0x54
 800dace:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dad0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800dad4:	9105      	str	r1, [sp, #20]
 800dad6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800dada:	4604      	mov	r4, r0
 800dadc:	9209      	str	r2, [sp, #36]	; 0x24
 800dade:	930f      	str	r3, [sp, #60]	; 0x3c
 800dae0:	b975      	cbnz	r5, 800db00 <_dtoa_r+0x40>
 800dae2:	2010      	movs	r0, #16
 800dae4:	f001 f95e 	bl	800eda4 <malloc>
 800dae8:	4602      	mov	r2, r0
 800daea:	6260      	str	r0, [r4, #36]	; 0x24
 800daec:	b920      	cbnz	r0, 800daf8 <_dtoa_r+0x38>
 800daee:	4bb2      	ldr	r3, [pc, #712]	; (800ddb8 <_dtoa_r+0x2f8>)
 800daf0:	21ea      	movs	r1, #234	; 0xea
 800daf2:	48b2      	ldr	r0, [pc, #712]	; (800ddbc <_dtoa_r+0x2fc>)
 800daf4:	f7ff ff3a 	bl	800d96c <__assert_func>
 800daf8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dafc:	6005      	str	r5, [r0, #0]
 800dafe:	60c5      	str	r5, [r0, #12]
 800db00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db02:	6819      	ldr	r1, [r3, #0]
 800db04:	b151      	cbz	r1, 800db1c <_dtoa_r+0x5c>
 800db06:	685a      	ldr	r2, [r3, #4]
 800db08:	604a      	str	r2, [r1, #4]
 800db0a:	2301      	movs	r3, #1
 800db0c:	4093      	lsls	r3, r2
 800db0e:	608b      	str	r3, [r1, #8]
 800db10:	4620      	mov	r0, r4
 800db12:	f001 f9a1 	bl	800ee58 <_Bfree>
 800db16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db18:	2200      	movs	r2, #0
 800db1a:	601a      	str	r2, [r3, #0]
 800db1c:	1e3b      	subs	r3, r7, #0
 800db1e:	bfb9      	ittee	lt
 800db20:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800db24:	9303      	strlt	r3, [sp, #12]
 800db26:	2300      	movge	r3, #0
 800db28:	f8c8 3000 	strge.w	r3, [r8]
 800db2c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800db30:	4ba3      	ldr	r3, [pc, #652]	; (800ddc0 <_dtoa_r+0x300>)
 800db32:	bfbc      	itt	lt
 800db34:	2201      	movlt	r2, #1
 800db36:	f8c8 2000 	strlt.w	r2, [r8]
 800db3a:	ea33 0309 	bics.w	r3, r3, r9
 800db3e:	d11b      	bne.n	800db78 <_dtoa_r+0xb8>
 800db40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800db42:	f242 730f 	movw	r3, #9999	; 0x270f
 800db46:	6013      	str	r3, [r2, #0]
 800db48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800db4c:	4333      	orrs	r3, r6
 800db4e:	f000 857a 	beq.w	800e646 <_dtoa_r+0xb86>
 800db52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db54:	b963      	cbnz	r3, 800db70 <_dtoa_r+0xb0>
 800db56:	4b9b      	ldr	r3, [pc, #620]	; (800ddc4 <_dtoa_r+0x304>)
 800db58:	e024      	b.n	800dba4 <_dtoa_r+0xe4>
 800db5a:	4b9b      	ldr	r3, [pc, #620]	; (800ddc8 <_dtoa_r+0x308>)
 800db5c:	9300      	str	r3, [sp, #0]
 800db5e:	3308      	adds	r3, #8
 800db60:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800db62:	6013      	str	r3, [r2, #0]
 800db64:	9800      	ldr	r0, [sp, #0]
 800db66:	b015      	add	sp, #84	; 0x54
 800db68:	ecbd 8b02 	vpop	{d8}
 800db6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db70:	4b94      	ldr	r3, [pc, #592]	; (800ddc4 <_dtoa_r+0x304>)
 800db72:	9300      	str	r3, [sp, #0]
 800db74:	3303      	adds	r3, #3
 800db76:	e7f3      	b.n	800db60 <_dtoa_r+0xa0>
 800db78:	ed9d 7b02 	vldr	d7, [sp, #8]
 800db7c:	2200      	movs	r2, #0
 800db7e:	ec51 0b17 	vmov	r0, r1, d7
 800db82:	2300      	movs	r3, #0
 800db84:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800db88:	f7f2 ff9e 	bl	8000ac8 <__aeabi_dcmpeq>
 800db8c:	4680      	mov	r8, r0
 800db8e:	b158      	cbz	r0, 800dba8 <_dtoa_r+0xe8>
 800db90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800db92:	2301      	movs	r3, #1
 800db94:	6013      	str	r3, [r2, #0]
 800db96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db98:	2b00      	cmp	r3, #0
 800db9a:	f000 8551 	beq.w	800e640 <_dtoa_r+0xb80>
 800db9e:	488b      	ldr	r0, [pc, #556]	; (800ddcc <_dtoa_r+0x30c>)
 800dba0:	6018      	str	r0, [r3, #0]
 800dba2:	1e43      	subs	r3, r0, #1
 800dba4:	9300      	str	r3, [sp, #0]
 800dba6:	e7dd      	b.n	800db64 <_dtoa_r+0xa4>
 800dba8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800dbac:	aa12      	add	r2, sp, #72	; 0x48
 800dbae:	a913      	add	r1, sp, #76	; 0x4c
 800dbb0:	4620      	mov	r0, r4
 800dbb2:	f001 fcf9 	bl	800f5a8 <__d2b>
 800dbb6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dbba:	4683      	mov	fp, r0
 800dbbc:	2d00      	cmp	r5, #0
 800dbbe:	d07c      	beq.n	800dcba <_dtoa_r+0x1fa>
 800dbc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dbc2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800dbc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dbca:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800dbce:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800dbd2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800dbd6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800dbda:	4b7d      	ldr	r3, [pc, #500]	; (800ddd0 <_dtoa_r+0x310>)
 800dbdc:	2200      	movs	r2, #0
 800dbde:	4630      	mov	r0, r6
 800dbe0:	4639      	mov	r1, r7
 800dbe2:	f7f2 fb51 	bl	8000288 <__aeabi_dsub>
 800dbe6:	a36e      	add	r3, pc, #440	; (adr r3, 800dda0 <_dtoa_r+0x2e0>)
 800dbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbec:	f7f2 fd04 	bl	80005f8 <__aeabi_dmul>
 800dbf0:	a36d      	add	r3, pc, #436	; (adr r3, 800dda8 <_dtoa_r+0x2e8>)
 800dbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbf6:	f7f2 fb49 	bl	800028c <__adddf3>
 800dbfa:	4606      	mov	r6, r0
 800dbfc:	4628      	mov	r0, r5
 800dbfe:	460f      	mov	r7, r1
 800dc00:	f7f2 fc90 	bl	8000524 <__aeabi_i2d>
 800dc04:	a36a      	add	r3, pc, #424	; (adr r3, 800ddb0 <_dtoa_r+0x2f0>)
 800dc06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc0a:	f7f2 fcf5 	bl	80005f8 <__aeabi_dmul>
 800dc0e:	4602      	mov	r2, r0
 800dc10:	460b      	mov	r3, r1
 800dc12:	4630      	mov	r0, r6
 800dc14:	4639      	mov	r1, r7
 800dc16:	f7f2 fb39 	bl	800028c <__adddf3>
 800dc1a:	4606      	mov	r6, r0
 800dc1c:	460f      	mov	r7, r1
 800dc1e:	f7f2 ff9b 	bl	8000b58 <__aeabi_d2iz>
 800dc22:	2200      	movs	r2, #0
 800dc24:	4682      	mov	sl, r0
 800dc26:	2300      	movs	r3, #0
 800dc28:	4630      	mov	r0, r6
 800dc2a:	4639      	mov	r1, r7
 800dc2c:	f7f2 ff56 	bl	8000adc <__aeabi_dcmplt>
 800dc30:	b148      	cbz	r0, 800dc46 <_dtoa_r+0x186>
 800dc32:	4650      	mov	r0, sl
 800dc34:	f7f2 fc76 	bl	8000524 <__aeabi_i2d>
 800dc38:	4632      	mov	r2, r6
 800dc3a:	463b      	mov	r3, r7
 800dc3c:	f7f2 ff44 	bl	8000ac8 <__aeabi_dcmpeq>
 800dc40:	b908      	cbnz	r0, 800dc46 <_dtoa_r+0x186>
 800dc42:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dc46:	f1ba 0f16 	cmp.w	sl, #22
 800dc4a:	d854      	bhi.n	800dcf6 <_dtoa_r+0x236>
 800dc4c:	4b61      	ldr	r3, [pc, #388]	; (800ddd4 <_dtoa_r+0x314>)
 800dc4e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800dc52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc56:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800dc5a:	f7f2 ff3f 	bl	8000adc <__aeabi_dcmplt>
 800dc5e:	2800      	cmp	r0, #0
 800dc60:	d04b      	beq.n	800dcfa <_dtoa_r+0x23a>
 800dc62:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dc66:	2300      	movs	r3, #0
 800dc68:	930e      	str	r3, [sp, #56]	; 0x38
 800dc6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dc6c:	1b5d      	subs	r5, r3, r5
 800dc6e:	1e6b      	subs	r3, r5, #1
 800dc70:	9304      	str	r3, [sp, #16]
 800dc72:	bf43      	ittte	mi
 800dc74:	2300      	movmi	r3, #0
 800dc76:	f1c5 0801 	rsbmi	r8, r5, #1
 800dc7a:	9304      	strmi	r3, [sp, #16]
 800dc7c:	f04f 0800 	movpl.w	r8, #0
 800dc80:	f1ba 0f00 	cmp.w	sl, #0
 800dc84:	db3b      	blt.n	800dcfe <_dtoa_r+0x23e>
 800dc86:	9b04      	ldr	r3, [sp, #16]
 800dc88:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800dc8c:	4453      	add	r3, sl
 800dc8e:	9304      	str	r3, [sp, #16]
 800dc90:	2300      	movs	r3, #0
 800dc92:	9306      	str	r3, [sp, #24]
 800dc94:	9b05      	ldr	r3, [sp, #20]
 800dc96:	2b09      	cmp	r3, #9
 800dc98:	d869      	bhi.n	800dd6e <_dtoa_r+0x2ae>
 800dc9a:	2b05      	cmp	r3, #5
 800dc9c:	bfc4      	itt	gt
 800dc9e:	3b04      	subgt	r3, #4
 800dca0:	9305      	strgt	r3, [sp, #20]
 800dca2:	9b05      	ldr	r3, [sp, #20]
 800dca4:	f1a3 0302 	sub.w	r3, r3, #2
 800dca8:	bfcc      	ite	gt
 800dcaa:	2500      	movgt	r5, #0
 800dcac:	2501      	movle	r5, #1
 800dcae:	2b03      	cmp	r3, #3
 800dcb0:	d869      	bhi.n	800dd86 <_dtoa_r+0x2c6>
 800dcb2:	e8df f003 	tbb	[pc, r3]
 800dcb6:	4e2c      	.short	0x4e2c
 800dcb8:	5a4c      	.short	0x5a4c
 800dcba:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800dcbe:	441d      	add	r5, r3
 800dcc0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800dcc4:	2b20      	cmp	r3, #32
 800dcc6:	bfc1      	itttt	gt
 800dcc8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800dccc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800dcd0:	fa09 f303 	lslgt.w	r3, r9, r3
 800dcd4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800dcd8:	bfda      	itte	le
 800dcda:	f1c3 0320 	rsble	r3, r3, #32
 800dcde:	fa06 f003 	lslle.w	r0, r6, r3
 800dce2:	4318      	orrgt	r0, r3
 800dce4:	f7f2 fc0e 	bl	8000504 <__aeabi_ui2d>
 800dce8:	2301      	movs	r3, #1
 800dcea:	4606      	mov	r6, r0
 800dcec:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800dcf0:	3d01      	subs	r5, #1
 800dcf2:	9310      	str	r3, [sp, #64]	; 0x40
 800dcf4:	e771      	b.n	800dbda <_dtoa_r+0x11a>
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	e7b6      	b.n	800dc68 <_dtoa_r+0x1a8>
 800dcfa:	900e      	str	r0, [sp, #56]	; 0x38
 800dcfc:	e7b5      	b.n	800dc6a <_dtoa_r+0x1aa>
 800dcfe:	f1ca 0300 	rsb	r3, sl, #0
 800dd02:	9306      	str	r3, [sp, #24]
 800dd04:	2300      	movs	r3, #0
 800dd06:	eba8 080a 	sub.w	r8, r8, sl
 800dd0a:	930d      	str	r3, [sp, #52]	; 0x34
 800dd0c:	e7c2      	b.n	800dc94 <_dtoa_r+0x1d4>
 800dd0e:	2300      	movs	r3, #0
 800dd10:	9308      	str	r3, [sp, #32]
 800dd12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	dc39      	bgt.n	800dd8c <_dtoa_r+0x2cc>
 800dd18:	f04f 0901 	mov.w	r9, #1
 800dd1c:	f8cd 9004 	str.w	r9, [sp, #4]
 800dd20:	464b      	mov	r3, r9
 800dd22:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800dd26:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800dd28:	2200      	movs	r2, #0
 800dd2a:	6042      	str	r2, [r0, #4]
 800dd2c:	2204      	movs	r2, #4
 800dd2e:	f102 0614 	add.w	r6, r2, #20
 800dd32:	429e      	cmp	r6, r3
 800dd34:	6841      	ldr	r1, [r0, #4]
 800dd36:	d92f      	bls.n	800dd98 <_dtoa_r+0x2d8>
 800dd38:	4620      	mov	r0, r4
 800dd3a:	f001 f84d 	bl	800edd8 <_Balloc>
 800dd3e:	9000      	str	r0, [sp, #0]
 800dd40:	2800      	cmp	r0, #0
 800dd42:	d14b      	bne.n	800dddc <_dtoa_r+0x31c>
 800dd44:	4b24      	ldr	r3, [pc, #144]	; (800ddd8 <_dtoa_r+0x318>)
 800dd46:	4602      	mov	r2, r0
 800dd48:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800dd4c:	e6d1      	b.n	800daf2 <_dtoa_r+0x32>
 800dd4e:	2301      	movs	r3, #1
 800dd50:	e7de      	b.n	800dd10 <_dtoa_r+0x250>
 800dd52:	2300      	movs	r3, #0
 800dd54:	9308      	str	r3, [sp, #32]
 800dd56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd58:	eb0a 0903 	add.w	r9, sl, r3
 800dd5c:	f109 0301 	add.w	r3, r9, #1
 800dd60:	2b01      	cmp	r3, #1
 800dd62:	9301      	str	r3, [sp, #4]
 800dd64:	bfb8      	it	lt
 800dd66:	2301      	movlt	r3, #1
 800dd68:	e7dd      	b.n	800dd26 <_dtoa_r+0x266>
 800dd6a:	2301      	movs	r3, #1
 800dd6c:	e7f2      	b.n	800dd54 <_dtoa_r+0x294>
 800dd6e:	2501      	movs	r5, #1
 800dd70:	2300      	movs	r3, #0
 800dd72:	9305      	str	r3, [sp, #20]
 800dd74:	9508      	str	r5, [sp, #32]
 800dd76:	f04f 39ff 	mov.w	r9, #4294967295
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	f8cd 9004 	str.w	r9, [sp, #4]
 800dd80:	2312      	movs	r3, #18
 800dd82:	9209      	str	r2, [sp, #36]	; 0x24
 800dd84:	e7cf      	b.n	800dd26 <_dtoa_r+0x266>
 800dd86:	2301      	movs	r3, #1
 800dd88:	9308      	str	r3, [sp, #32]
 800dd8a:	e7f4      	b.n	800dd76 <_dtoa_r+0x2b6>
 800dd8c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800dd90:	f8cd 9004 	str.w	r9, [sp, #4]
 800dd94:	464b      	mov	r3, r9
 800dd96:	e7c6      	b.n	800dd26 <_dtoa_r+0x266>
 800dd98:	3101      	adds	r1, #1
 800dd9a:	6041      	str	r1, [r0, #4]
 800dd9c:	0052      	lsls	r2, r2, #1
 800dd9e:	e7c6      	b.n	800dd2e <_dtoa_r+0x26e>
 800dda0:	636f4361 	.word	0x636f4361
 800dda4:	3fd287a7 	.word	0x3fd287a7
 800dda8:	8b60c8b3 	.word	0x8b60c8b3
 800ddac:	3fc68a28 	.word	0x3fc68a28
 800ddb0:	509f79fb 	.word	0x509f79fb
 800ddb4:	3fd34413 	.word	0x3fd34413
 800ddb8:	08010b58 	.word	0x08010b58
 800ddbc:	08010d1a 	.word	0x08010d1a
 800ddc0:	7ff00000 	.word	0x7ff00000
 800ddc4:	08010d16 	.word	0x08010d16
 800ddc8:	08010d0d 	.word	0x08010d0d
 800ddcc:	08010ad9 	.word	0x08010ad9
 800ddd0:	3ff80000 	.word	0x3ff80000
 800ddd4:	08010e90 	.word	0x08010e90
 800ddd8:	08010d79 	.word	0x08010d79
 800dddc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ddde:	9a00      	ldr	r2, [sp, #0]
 800dde0:	601a      	str	r2, [r3, #0]
 800dde2:	9b01      	ldr	r3, [sp, #4]
 800dde4:	2b0e      	cmp	r3, #14
 800dde6:	f200 80ad 	bhi.w	800df44 <_dtoa_r+0x484>
 800ddea:	2d00      	cmp	r5, #0
 800ddec:	f000 80aa 	beq.w	800df44 <_dtoa_r+0x484>
 800ddf0:	f1ba 0f00 	cmp.w	sl, #0
 800ddf4:	dd36      	ble.n	800de64 <_dtoa_r+0x3a4>
 800ddf6:	4ac3      	ldr	r2, [pc, #780]	; (800e104 <_dtoa_r+0x644>)
 800ddf8:	f00a 030f 	and.w	r3, sl, #15
 800ddfc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800de00:	ed93 7b00 	vldr	d7, [r3]
 800de04:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800de08:	ea4f 172a 	mov.w	r7, sl, asr #4
 800de0c:	eeb0 8a47 	vmov.f32	s16, s14
 800de10:	eef0 8a67 	vmov.f32	s17, s15
 800de14:	d016      	beq.n	800de44 <_dtoa_r+0x384>
 800de16:	4bbc      	ldr	r3, [pc, #752]	; (800e108 <_dtoa_r+0x648>)
 800de18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800de1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800de20:	f7f2 fd14 	bl	800084c <__aeabi_ddiv>
 800de24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de28:	f007 070f 	and.w	r7, r7, #15
 800de2c:	2503      	movs	r5, #3
 800de2e:	4eb6      	ldr	r6, [pc, #728]	; (800e108 <_dtoa_r+0x648>)
 800de30:	b957      	cbnz	r7, 800de48 <_dtoa_r+0x388>
 800de32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de36:	ec53 2b18 	vmov	r2, r3, d8
 800de3a:	f7f2 fd07 	bl	800084c <__aeabi_ddiv>
 800de3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de42:	e029      	b.n	800de98 <_dtoa_r+0x3d8>
 800de44:	2502      	movs	r5, #2
 800de46:	e7f2      	b.n	800de2e <_dtoa_r+0x36e>
 800de48:	07f9      	lsls	r1, r7, #31
 800de4a:	d508      	bpl.n	800de5e <_dtoa_r+0x39e>
 800de4c:	ec51 0b18 	vmov	r0, r1, d8
 800de50:	e9d6 2300 	ldrd	r2, r3, [r6]
 800de54:	f7f2 fbd0 	bl	80005f8 <__aeabi_dmul>
 800de58:	ec41 0b18 	vmov	d8, r0, r1
 800de5c:	3501      	adds	r5, #1
 800de5e:	107f      	asrs	r7, r7, #1
 800de60:	3608      	adds	r6, #8
 800de62:	e7e5      	b.n	800de30 <_dtoa_r+0x370>
 800de64:	f000 80a6 	beq.w	800dfb4 <_dtoa_r+0x4f4>
 800de68:	f1ca 0600 	rsb	r6, sl, #0
 800de6c:	4ba5      	ldr	r3, [pc, #660]	; (800e104 <_dtoa_r+0x644>)
 800de6e:	4fa6      	ldr	r7, [pc, #664]	; (800e108 <_dtoa_r+0x648>)
 800de70:	f006 020f 	and.w	r2, r6, #15
 800de74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800de78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de7c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800de80:	f7f2 fbba 	bl	80005f8 <__aeabi_dmul>
 800de84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de88:	1136      	asrs	r6, r6, #4
 800de8a:	2300      	movs	r3, #0
 800de8c:	2502      	movs	r5, #2
 800de8e:	2e00      	cmp	r6, #0
 800de90:	f040 8085 	bne.w	800df9e <_dtoa_r+0x4de>
 800de94:	2b00      	cmp	r3, #0
 800de96:	d1d2      	bne.n	800de3e <_dtoa_r+0x37e>
 800de98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	f000 808c 	beq.w	800dfb8 <_dtoa_r+0x4f8>
 800dea0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dea4:	4b99      	ldr	r3, [pc, #612]	; (800e10c <_dtoa_r+0x64c>)
 800dea6:	2200      	movs	r2, #0
 800dea8:	4630      	mov	r0, r6
 800deaa:	4639      	mov	r1, r7
 800deac:	f7f2 fe16 	bl	8000adc <__aeabi_dcmplt>
 800deb0:	2800      	cmp	r0, #0
 800deb2:	f000 8081 	beq.w	800dfb8 <_dtoa_r+0x4f8>
 800deb6:	9b01      	ldr	r3, [sp, #4]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d07d      	beq.n	800dfb8 <_dtoa_r+0x4f8>
 800debc:	f1b9 0f00 	cmp.w	r9, #0
 800dec0:	dd3c      	ble.n	800df3c <_dtoa_r+0x47c>
 800dec2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800dec6:	9307      	str	r3, [sp, #28]
 800dec8:	2200      	movs	r2, #0
 800deca:	4b91      	ldr	r3, [pc, #580]	; (800e110 <_dtoa_r+0x650>)
 800decc:	4630      	mov	r0, r6
 800dece:	4639      	mov	r1, r7
 800ded0:	f7f2 fb92 	bl	80005f8 <__aeabi_dmul>
 800ded4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ded8:	3501      	adds	r5, #1
 800deda:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800dede:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dee2:	4628      	mov	r0, r5
 800dee4:	f7f2 fb1e 	bl	8000524 <__aeabi_i2d>
 800dee8:	4632      	mov	r2, r6
 800deea:	463b      	mov	r3, r7
 800deec:	f7f2 fb84 	bl	80005f8 <__aeabi_dmul>
 800def0:	4b88      	ldr	r3, [pc, #544]	; (800e114 <_dtoa_r+0x654>)
 800def2:	2200      	movs	r2, #0
 800def4:	f7f2 f9ca 	bl	800028c <__adddf3>
 800def8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800defc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df00:	9303      	str	r3, [sp, #12]
 800df02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800df04:	2b00      	cmp	r3, #0
 800df06:	d15c      	bne.n	800dfc2 <_dtoa_r+0x502>
 800df08:	4b83      	ldr	r3, [pc, #524]	; (800e118 <_dtoa_r+0x658>)
 800df0a:	2200      	movs	r2, #0
 800df0c:	4630      	mov	r0, r6
 800df0e:	4639      	mov	r1, r7
 800df10:	f7f2 f9ba 	bl	8000288 <__aeabi_dsub>
 800df14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800df18:	4606      	mov	r6, r0
 800df1a:	460f      	mov	r7, r1
 800df1c:	f7f2 fdfc 	bl	8000b18 <__aeabi_dcmpgt>
 800df20:	2800      	cmp	r0, #0
 800df22:	f040 8296 	bne.w	800e452 <_dtoa_r+0x992>
 800df26:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800df2a:	4630      	mov	r0, r6
 800df2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800df30:	4639      	mov	r1, r7
 800df32:	f7f2 fdd3 	bl	8000adc <__aeabi_dcmplt>
 800df36:	2800      	cmp	r0, #0
 800df38:	f040 8288 	bne.w	800e44c <_dtoa_r+0x98c>
 800df3c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800df40:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800df44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800df46:	2b00      	cmp	r3, #0
 800df48:	f2c0 8158 	blt.w	800e1fc <_dtoa_r+0x73c>
 800df4c:	f1ba 0f0e 	cmp.w	sl, #14
 800df50:	f300 8154 	bgt.w	800e1fc <_dtoa_r+0x73c>
 800df54:	4b6b      	ldr	r3, [pc, #428]	; (800e104 <_dtoa_r+0x644>)
 800df56:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800df5a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800df5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df60:	2b00      	cmp	r3, #0
 800df62:	f280 80e3 	bge.w	800e12c <_dtoa_r+0x66c>
 800df66:	9b01      	ldr	r3, [sp, #4]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	f300 80df 	bgt.w	800e12c <_dtoa_r+0x66c>
 800df6e:	f040 826d 	bne.w	800e44c <_dtoa_r+0x98c>
 800df72:	4b69      	ldr	r3, [pc, #420]	; (800e118 <_dtoa_r+0x658>)
 800df74:	2200      	movs	r2, #0
 800df76:	4640      	mov	r0, r8
 800df78:	4649      	mov	r1, r9
 800df7a:	f7f2 fb3d 	bl	80005f8 <__aeabi_dmul>
 800df7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800df82:	f7f2 fdbf 	bl	8000b04 <__aeabi_dcmpge>
 800df86:	9e01      	ldr	r6, [sp, #4]
 800df88:	4637      	mov	r7, r6
 800df8a:	2800      	cmp	r0, #0
 800df8c:	f040 8243 	bne.w	800e416 <_dtoa_r+0x956>
 800df90:	9d00      	ldr	r5, [sp, #0]
 800df92:	2331      	movs	r3, #49	; 0x31
 800df94:	f805 3b01 	strb.w	r3, [r5], #1
 800df98:	f10a 0a01 	add.w	sl, sl, #1
 800df9c:	e23f      	b.n	800e41e <_dtoa_r+0x95e>
 800df9e:	07f2      	lsls	r2, r6, #31
 800dfa0:	d505      	bpl.n	800dfae <_dtoa_r+0x4ee>
 800dfa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dfa6:	f7f2 fb27 	bl	80005f8 <__aeabi_dmul>
 800dfaa:	3501      	adds	r5, #1
 800dfac:	2301      	movs	r3, #1
 800dfae:	1076      	asrs	r6, r6, #1
 800dfb0:	3708      	adds	r7, #8
 800dfb2:	e76c      	b.n	800de8e <_dtoa_r+0x3ce>
 800dfb4:	2502      	movs	r5, #2
 800dfb6:	e76f      	b.n	800de98 <_dtoa_r+0x3d8>
 800dfb8:	9b01      	ldr	r3, [sp, #4]
 800dfba:	f8cd a01c 	str.w	sl, [sp, #28]
 800dfbe:	930c      	str	r3, [sp, #48]	; 0x30
 800dfc0:	e78d      	b.n	800dede <_dtoa_r+0x41e>
 800dfc2:	9900      	ldr	r1, [sp, #0]
 800dfc4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800dfc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dfc8:	4b4e      	ldr	r3, [pc, #312]	; (800e104 <_dtoa_r+0x644>)
 800dfca:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dfce:	4401      	add	r1, r0
 800dfd0:	9102      	str	r1, [sp, #8]
 800dfd2:	9908      	ldr	r1, [sp, #32]
 800dfd4:	eeb0 8a47 	vmov.f32	s16, s14
 800dfd8:	eef0 8a67 	vmov.f32	s17, s15
 800dfdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dfe0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dfe4:	2900      	cmp	r1, #0
 800dfe6:	d045      	beq.n	800e074 <_dtoa_r+0x5b4>
 800dfe8:	494c      	ldr	r1, [pc, #304]	; (800e11c <_dtoa_r+0x65c>)
 800dfea:	2000      	movs	r0, #0
 800dfec:	f7f2 fc2e 	bl	800084c <__aeabi_ddiv>
 800dff0:	ec53 2b18 	vmov	r2, r3, d8
 800dff4:	f7f2 f948 	bl	8000288 <__aeabi_dsub>
 800dff8:	9d00      	ldr	r5, [sp, #0]
 800dffa:	ec41 0b18 	vmov	d8, r0, r1
 800dffe:	4639      	mov	r1, r7
 800e000:	4630      	mov	r0, r6
 800e002:	f7f2 fda9 	bl	8000b58 <__aeabi_d2iz>
 800e006:	900c      	str	r0, [sp, #48]	; 0x30
 800e008:	f7f2 fa8c 	bl	8000524 <__aeabi_i2d>
 800e00c:	4602      	mov	r2, r0
 800e00e:	460b      	mov	r3, r1
 800e010:	4630      	mov	r0, r6
 800e012:	4639      	mov	r1, r7
 800e014:	f7f2 f938 	bl	8000288 <__aeabi_dsub>
 800e018:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e01a:	3330      	adds	r3, #48	; 0x30
 800e01c:	f805 3b01 	strb.w	r3, [r5], #1
 800e020:	ec53 2b18 	vmov	r2, r3, d8
 800e024:	4606      	mov	r6, r0
 800e026:	460f      	mov	r7, r1
 800e028:	f7f2 fd58 	bl	8000adc <__aeabi_dcmplt>
 800e02c:	2800      	cmp	r0, #0
 800e02e:	d165      	bne.n	800e0fc <_dtoa_r+0x63c>
 800e030:	4632      	mov	r2, r6
 800e032:	463b      	mov	r3, r7
 800e034:	4935      	ldr	r1, [pc, #212]	; (800e10c <_dtoa_r+0x64c>)
 800e036:	2000      	movs	r0, #0
 800e038:	f7f2 f926 	bl	8000288 <__aeabi_dsub>
 800e03c:	ec53 2b18 	vmov	r2, r3, d8
 800e040:	f7f2 fd4c 	bl	8000adc <__aeabi_dcmplt>
 800e044:	2800      	cmp	r0, #0
 800e046:	f040 80b9 	bne.w	800e1bc <_dtoa_r+0x6fc>
 800e04a:	9b02      	ldr	r3, [sp, #8]
 800e04c:	429d      	cmp	r5, r3
 800e04e:	f43f af75 	beq.w	800df3c <_dtoa_r+0x47c>
 800e052:	4b2f      	ldr	r3, [pc, #188]	; (800e110 <_dtoa_r+0x650>)
 800e054:	ec51 0b18 	vmov	r0, r1, d8
 800e058:	2200      	movs	r2, #0
 800e05a:	f7f2 facd 	bl	80005f8 <__aeabi_dmul>
 800e05e:	4b2c      	ldr	r3, [pc, #176]	; (800e110 <_dtoa_r+0x650>)
 800e060:	ec41 0b18 	vmov	d8, r0, r1
 800e064:	2200      	movs	r2, #0
 800e066:	4630      	mov	r0, r6
 800e068:	4639      	mov	r1, r7
 800e06a:	f7f2 fac5 	bl	80005f8 <__aeabi_dmul>
 800e06e:	4606      	mov	r6, r0
 800e070:	460f      	mov	r7, r1
 800e072:	e7c4      	b.n	800dffe <_dtoa_r+0x53e>
 800e074:	ec51 0b17 	vmov	r0, r1, d7
 800e078:	f7f2 fabe 	bl	80005f8 <__aeabi_dmul>
 800e07c:	9b02      	ldr	r3, [sp, #8]
 800e07e:	9d00      	ldr	r5, [sp, #0]
 800e080:	930c      	str	r3, [sp, #48]	; 0x30
 800e082:	ec41 0b18 	vmov	d8, r0, r1
 800e086:	4639      	mov	r1, r7
 800e088:	4630      	mov	r0, r6
 800e08a:	f7f2 fd65 	bl	8000b58 <__aeabi_d2iz>
 800e08e:	9011      	str	r0, [sp, #68]	; 0x44
 800e090:	f7f2 fa48 	bl	8000524 <__aeabi_i2d>
 800e094:	4602      	mov	r2, r0
 800e096:	460b      	mov	r3, r1
 800e098:	4630      	mov	r0, r6
 800e09a:	4639      	mov	r1, r7
 800e09c:	f7f2 f8f4 	bl	8000288 <__aeabi_dsub>
 800e0a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e0a2:	3330      	adds	r3, #48	; 0x30
 800e0a4:	f805 3b01 	strb.w	r3, [r5], #1
 800e0a8:	9b02      	ldr	r3, [sp, #8]
 800e0aa:	429d      	cmp	r5, r3
 800e0ac:	4606      	mov	r6, r0
 800e0ae:	460f      	mov	r7, r1
 800e0b0:	f04f 0200 	mov.w	r2, #0
 800e0b4:	d134      	bne.n	800e120 <_dtoa_r+0x660>
 800e0b6:	4b19      	ldr	r3, [pc, #100]	; (800e11c <_dtoa_r+0x65c>)
 800e0b8:	ec51 0b18 	vmov	r0, r1, d8
 800e0bc:	f7f2 f8e6 	bl	800028c <__adddf3>
 800e0c0:	4602      	mov	r2, r0
 800e0c2:	460b      	mov	r3, r1
 800e0c4:	4630      	mov	r0, r6
 800e0c6:	4639      	mov	r1, r7
 800e0c8:	f7f2 fd26 	bl	8000b18 <__aeabi_dcmpgt>
 800e0cc:	2800      	cmp	r0, #0
 800e0ce:	d175      	bne.n	800e1bc <_dtoa_r+0x6fc>
 800e0d0:	ec53 2b18 	vmov	r2, r3, d8
 800e0d4:	4911      	ldr	r1, [pc, #68]	; (800e11c <_dtoa_r+0x65c>)
 800e0d6:	2000      	movs	r0, #0
 800e0d8:	f7f2 f8d6 	bl	8000288 <__aeabi_dsub>
 800e0dc:	4602      	mov	r2, r0
 800e0de:	460b      	mov	r3, r1
 800e0e0:	4630      	mov	r0, r6
 800e0e2:	4639      	mov	r1, r7
 800e0e4:	f7f2 fcfa 	bl	8000adc <__aeabi_dcmplt>
 800e0e8:	2800      	cmp	r0, #0
 800e0ea:	f43f af27 	beq.w	800df3c <_dtoa_r+0x47c>
 800e0ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e0f0:	1e6b      	subs	r3, r5, #1
 800e0f2:	930c      	str	r3, [sp, #48]	; 0x30
 800e0f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e0f8:	2b30      	cmp	r3, #48	; 0x30
 800e0fa:	d0f8      	beq.n	800e0ee <_dtoa_r+0x62e>
 800e0fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e100:	e04a      	b.n	800e198 <_dtoa_r+0x6d8>
 800e102:	bf00      	nop
 800e104:	08010e90 	.word	0x08010e90
 800e108:	08010e68 	.word	0x08010e68
 800e10c:	3ff00000 	.word	0x3ff00000
 800e110:	40240000 	.word	0x40240000
 800e114:	401c0000 	.word	0x401c0000
 800e118:	40140000 	.word	0x40140000
 800e11c:	3fe00000 	.word	0x3fe00000
 800e120:	4baf      	ldr	r3, [pc, #700]	; (800e3e0 <_dtoa_r+0x920>)
 800e122:	f7f2 fa69 	bl	80005f8 <__aeabi_dmul>
 800e126:	4606      	mov	r6, r0
 800e128:	460f      	mov	r7, r1
 800e12a:	e7ac      	b.n	800e086 <_dtoa_r+0x5c6>
 800e12c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e130:	9d00      	ldr	r5, [sp, #0]
 800e132:	4642      	mov	r2, r8
 800e134:	464b      	mov	r3, r9
 800e136:	4630      	mov	r0, r6
 800e138:	4639      	mov	r1, r7
 800e13a:	f7f2 fb87 	bl	800084c <__aeabi_ddiv>
 800e13e:	f7f2 fd0b 	bl	8000b58 <__aeabi_d2iz>
 800e142:	9002      	str	r0, [sp, #8]
 800e144:	f7f2 f9ee 	bl	8000524 <__aeabi_i2d>
 800e148:	4642      	mov	r2, r8
 800e14a:	464b      	mov	r3, r9
 800e14c:	f7f2 fa54 	bl	80005f8 <__aeabi_dmul>
 800e150:	4602      	mov	r2, r0
 800e152:	460b      	mov	r3, r1
 800e154:	4630      	mov	r0, r6
 800e156:	4639      	mov	r1, r7
 800e158:	f7f2 f896 	bl	8000288 <__aeabi_dsub>
 800e15c:	9e02      	ldr	r6, [sp, #8]
 800e15e:	9f01      	ldr	r7, [sp, #4]
 800e160:	3630      	adds	r6, #48	; 0x30
 800e162:	f805 6b01 	strb.w	r6, [r5], #1
 800e166:	9e00      	ldr	r6, [sp, #0]
 800e168:	1bae      	subs	r6, r5, r6
 800e16a:	42b7      	cmp	r7, r6
 800e16c:	4602      	mov	r2, r0
 800e16e:	460b      	mov	r3, r1
 800e170:	d137      	bne.n	800e1e2 <_dtoa_r+0x722>
 800e172:	f7f2 f88b 	bl	800028c <__adddf3>
 800e176:	4642      	mov	r2, r8
 800e178:	464b      	mov	r3, r9
 800e17a:	4606      	mov	r6, r0
 800e17c:	460f      	mov	r7, r1
 800e17e:	f7f2 fccb 	bl	8000b18 <__aeabi_dcmpgt>
 800e182:	b9c8      	cbnz	r0, 800e1b8 <_dtoa_r+0x6f8>
 800e184:	4642      	mov	r2, r8
 800e186:	464b      	mov	r3, r9
 800e188:	4630      	mov	r0, r6
 800e18a:	4639      	mov	r1, r7
 800e18c:	f7f2 fc9c 	bl	8000ac8 <__aeabi_dcmpeq>
 800e190:	b110      	cbz	r0, 800e198 <_dtoa_r+0x6d8>
 800e192:	9b02      	ldr	r3, [sp, #8]
 800e194:	07d9      	lsls	r1, r3, #31
 800e196:	d40f      	bmi.n	800e1b8 <_dtoa_r+0x6f8>
 800e198:	4620      	mov	r0, r4
 800e19a:	4659      	mov	r1, fp
 800e19c:	f000 fe5c 	bl	800ee58 <_Bfree>
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	702b      	strb	r3, [r5, #0]
 800e1a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e1a6:	f10a 0001 	add.w	r0, sl, #1
 800e1aa:	6018      	str	r0, [r3, #0]
 800e1ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	f43f acd8 	beq.w	800db64 <_dtoa_r+0xa4>
 800e1b4:	601d      	str	r5, [r3, #0]
 800e1b6:	e4d5      	b.n	800db64 <_dtoa_r+0xa4>
 800e1b8:	f8cd a01c 	str.w	sl, [sp, #28]
 800e1bc:	462b      	mov	r3, r5
 800e1be:	461d      	mov	r5, r3
 800e1c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e1c4:	2a39      	cmp	r2, #57	; 0x39
 800e1c6:	d108      	bne.n	800e1da <_dtoa_r+0x71a>
 800e1c8:	9a00      	ldr	r2, [sp, #0]
 800e1ca:	429a      	cmp	r2, r3
 800e1cc:	d1f7      	bne.n	800e1be <_dtoa_r+0x6fe>
 800e1ce:	9a07      	ldr	r2, [sp, #28]
 800e1d0:	9900      	ldr	r1, [sp, #0]
 800e1d2:	3201      	adds	r2, #1
 800e1d4:	9207      	str	r2, [sp, #28]
 800e1d6:	2230      	movs	r2, #48	; 0x30
 800e1d8:	700a      	strb	r2, [r1, #0]
 800e1da:	781a      	ldrb	r2, [r3, #0]
 800e1dc:	3201      	adds	r2, #1
 800e1de:	701a      	strb	r2, [r3, #0]
 800e1e0:	e78c      	b.n	800e0fc <_dtoa_r+0x63c>
 800e1e2:	4b7f      	ldr	r3, [pc, #508]	; (800e3e0 <_dtoa_r+0x920>)
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	f7f2 fa07 	bl	80005f8 <__aeabi_dmul>
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	4606      	mov	r6, r0
 800e1f0:	460f      	mov	r7, r1
 800e1f2:	f7f2 fc69 	bl	8000ac8 <__aeabi_dcmpeq>
 800e1f6:	2800      	cmp	r0, #0
 800e1f8:	d09b      	beq.n	800e132 <_dtoa_r+0x672>
 800e1fa:	e7cd      	b.n	800e198 <_dtoa_r+0x6d8>
 800e1fc:	9a08      	ldr	r2, [sp, #32]
 800e1fe:	2a00      	cmp	r2, #0
 800e200:	f000 80c4 	beq.w	800e38c <_dtoa_r+0x8cc>
 800e204:	9a05      	ldr	r2, [sp, #20]
 800e206:	2a01      	cmp	r2, #1
 800e208:	f300 80a8 	bgt.w	800e35c <_dtoa_r+0x89c>
 800e20c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e20e:	2a00      	cmp	r2, #0
 800e210:	f000 80a0 	beq.w	800e354 <_dtoa_r+0x894>
 800e214:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e218:	9e06      	ldr	r6, [sp, #24]
 800e21a:	4645      	mov	r5, r8
 800e21c:	9a04      	ldr	r2, [sp, #16]
 800e21e:	2101      	movs	r1, #1
 800e220:	441a      	add	r2, r3
 800e222:	4620      	mov	r0, r4
 800e224:	4498      	add	r8, r3
 800e226:	9204      	str	r2, [sp, #16]
 800e228:	f000 ff1c 	bl	800f064 <__i2b>
 800e22c:	4607      	mov	r7, r0
 800e22e:	2d00      	cmp	r5, #0
 800e230:	dd0b      	ble.n	800e24a <_dtoa_r+0x78a>
 800e232:	9b04      	ldr	r3, [sp, #16]
 800e234:	2b00      	cmp	r3, #0
 800e236:	dd08      	ble.n	800e24a <_dtoa_r+0x78a>
 800e238:	42ab      	cmp	r3, r5
 800e23a:	9a04      	ldr	r2, [sp, #16]
 800e23c:	bfa8      	it	ge
 800e23e:	462b      	movge	r3, r5
 800e240:	eba8 0803 	sub.w	r8, r8, r3
 800e244:	1aed      	subs	r5, r5, r3
 800e246:	1ad3      	subs	r3, r2, r3
 800e248:	9304      	str	r3, [sp, #16]
 800e24a:	9b06      	ldr	r3, [sp, #24]
 800e24c:	b1fb      	cbz	r3, 800e28e <_dtoa_r+0x7ce>
 800e24e:	9b08      	ldr	r3, [sp, #32]
 800e250:	2b00      	cmp	r3, #0
 800e252:	f000 809f 	beq.w	800e394 <_dtoa_r+0x8d4>
 800e256:	2e00      	cmp	r6, #0
 800e258:	dd11      	ble.n	800e27e <_dtoa_r+0x7be>
 800e25a:	4639      	mov	r1, r7
 800e25c:	4632      	mov	r2, r6
 800e25e:	4620      	mov	r0, r4
 800e260:	f000 ffbc 	bl	800f1dc <__pow5mult>
 800e264:	465a      	mov	r2, fp
 800e266:	4601      	mov	r1, r0
 800e268:	4607      	mov	r7, r0
 800e26a:	4620      	mov	r0, r4
 800e26c:	f000 ff10 	bl	800f090 <__multiply>
 800e270:	4659      	mov	r1, fp
 800e272:	9007      	str	r0, [sp, #28]
 800e274:	4620      	mov	r0, r4
 800e276:	f000 fdef 	bl	800ee58 <_Bfree>
 800e27a:	9b07      	ldr	r3, [sp, #28]
 800e27c:	469b      	mov	fp, r3
 800e27e:	9b06      	ldr	r3, [sp, #24]
 800e280:	1b9a      	subs	r2, r3, r6
 800e282:	d004      	beq.n	800e28e <_dtoa_r+0x7ce>
 800e284:	4659      	mov	r1, fp
 800e286:	4620      	mov	r0, r4
 800e288:	f000 ffa8 	bl	800f1dc <__pow5mult>
 800e28c:	4683      	mov	fp, r0
 800e28e:	2101      	movs	r1, #1
 800e290:	4620      	mov	r0, r4
 800e292:	f000 fee7 	bl	800f064 <__i2b>
 800e296:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e298:	2b00      	cmp	r3, #0
 800e29a:	4606      	mov	r6, r0
 800e29c:	dd7c      	ble.n	800e398 <_dtoa_r+0x8d8>
 800e29e:	461a      	mov	r2, r3
 800e2a0:	4601      	mov	r1, r0
 800e2a2:	4620      	mov	r0, r4
 800e2a4:	f000 ff9a 	bl	800f1dc <__pow5mult>
 800e2a8:	9b05      	ldr	r3, [sp, #20]
 800e2aa:	2b01      	cmp	r3, #1
 800e2ac:	4606      	mov	r6, r0
 800e2ae:	dd76      	ble.n	800e39e <_dtoa_r+0x8de>
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	9306      	str	r3, [sp, #24]
 800e2b4:	6933      	ldr	r3, [r6, #16]
 800e2b6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e2ba:	6918      	ldr	r0, [r3, #16]
 800e2bc:	f000 fe82 	bl	800efc4 <__hi0bits>
 800e2c0:	f1c0 0020 	rsb	r0, r0, #32
 800e2c4:	9b04      	ldr	r3, [sp, #16]
 800e2c6:	4418      	add	r0, r3
 800e2c8:	f010 001f 	ands.w	r0, r0, #31
 800e2cc:	f000 8086 	beq.w	800e3dc <_dtoa_r+0x91c>
 800e2d0:	f1c0 0320 	rsb	r3, r0, #32
 800e2d4:	2b04      	cmp	r3, #4
 800e2d6:	dd7f      	ble.n	800e3d8 <_dtoa_r+0x918>
 800e2d8:	f1c0 001c 	rsb	r0, r0, #28
 800e2dc:	9b04      	ldr	r3, [sp, #16]
 800e2de:	4403      	add	r3, r0
 800e2e0:	4480      	add	r8, r0
 800e2e2:	4405      	add	r5, r0
 800e2e4:	9304      	str	r3, [sp, #16]
 800e2e6:	f1b8 0f00 	cmp.w	r8, #0
 800e2ea:	dd05      	ble.n	800e2f8 <_dtoa_r+0x838>
 800e2ec:	4659      	mov	r1, fp
 800e2ee:	4642      	mov	r2, r8
 800e2f0:	4620      	mov	r0, r4
 800e2f2:	f000 ffcd 	bl	800f290 <__lshift>
 800e2f6:	4683      	mov	fp, r0
 800e2f8:	9b04      	ldr	r3, [sp, #16]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	dd05      	ble.n	800e30a <_dtoa_r+0x84a>
 800e2fe:	4631      	mov	r1, r6
 800e300:	461a      	mov	r2, r3
 800e302:	4620      	mov	r0, r4
 800e304:	f000 ffc4 	bl	800f290 <__lshift>
 800e308:	4606      	mov	r6, r0
 800e30a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d069      	beq.n	800e3e4 <_dtoa_r+0x924>
 800e310:	4631      	mov	r1, r6
 800e312:	4658      	mov	r0, fp
 800e314:	f001 f828 	bl	800f368 <__mcmp>
 800e318:	2800      	cmp	r0, #0
 800e31a:	da63      	bge.n	800e3e4 <_dtoa_r+0x924>
 800e31c:	2300      	movs	r3, #0
 800e31e:	4659      	mov	r1, fp
 800e320:	220a      	movs	r2, #10
 800e322:	4620      	mov	r0, r4
 800e324:	f000 fdba 	bl	800ee9c <__multadd>
 800e328:	9b08      	ldr	r3, [sp, #32]
 800e32a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e32e:	4683      	mov	fp, r0
 800e330:	2b00      	cmp	r3, #0
 800e332:	f000 818f 	beq.w	800e654 <_dtoa_r+0xb94>
 800e336:	4639      	mov	r1, r7
 800e338:	2300      	movs	r3, #0
 800e33a:	220a      	movs	r2, #10
 800e33c:	4620      	mov	r0, r4
 800e33e:	f000 fdad 	bl	800ee9c <__multadd>
 800e342:	f1b9 0f00 	cmp.w	r9, #0
 800e346:	4607      	mov	r7, r0
 800e348:	f300 808e 	bgt.w	800e468 <_dtoa_r+0x9a8>
 800e34c:	9b05      	ldr	r3, [sp, #20]
 800e34e:	2b02      	cmp	r3, #2
 800e350:	dc50      	bgt.n	800e3f4 <_dtoa_r+0x934>
 800e352:	e089      	b.n	800e468 <_dtoa_r+0x9a8>
 800e354:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e356:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e35a:	e75d      	b.n	800e218 <_dtoa_r+0x758>
 800e35c:	9b01      	ldr	r3, [sp, #4]
 800e35e:	1e5e      	subs	r6, r3, #1
 800e360:	9b06      	ldr	r3, [sp, #24]
 800e362:	42b3      	cmp	r3, r6
 800e364:	bfbf      	itttt	lt
 800e366:	9b06      	ldrlt	r3, [sp, #24]
 800e368:	9606      	strlt	r6, [sp, #24]
 800e36a:	1af2      	sublt	r2, r6, r3
 800e36c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800e36e:	bfb6      	itet	lt
 800e370:	189b      	addlt	r3, r3, r2
 800e372:	1b9e      	subge	r6, r3, r6
 800e374:	930d      	strlt	r3, [sp, #52]	; 0x34
 800e376:	9b01      	ldr	r3, [sp, #4]
 800e378:	bfb8      	it	lt
 800e37a:	2600      	movlt	r6, #0
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	bfb5      	itete	lt
 800e380:	eba8 0503 	sublt.w	r5, r8, r3
 800e384:	9b01      	ldrge	r3, [sp, #4]
 800e386:	2300      	movlt	r3, #0
 800e388:	4645      	movge	r5, r8
 800e38a:	e747      	b.n	800e21c <_dtoa_r+0x75c>
 800e38c:	9e06      	ldr	r6, [sp, #24]
 800e38e:	9f08      	ldr	r7, [sp, #32]
 800e390:	4645      	mov	r5, r8
 800e392:	e74c      	b.n	800e22e <_dtoa_r+0x76e>
 800e394:	9a06      	ldr	r2, [sp, #24]
 800e396:	e775      	b.n	800e284 <_dtoa_r+0x7c4>
 800e398:	9b05      	ldr	r3, [sp, #20]
 800e39a:	2b01      	cmp	r3, #1
 800e39c:	dc18      	bgt.n	800e3d0 <_dtoa_r+0x910>
 800e39e:	9b02      	ldr	r3, [sp, #8]
 800e3a0:	b9b3      	cbnz	r3, 800e3d0 <_dtoa_r+0x910>
 800e3a2:	9b03      	ldr	r3, [sp, #12]
 800e3a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e3a8:	b9a3      	cbnz	r3, 800e3d4 <_dtoa_r+0x914>
 800e3aa:	9b03      	ldr	r3, [sp, #12]
 800e3ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e3b0:	0d1b      	lsrs	r3, r3, #20
 800e3b2:	051b      	lsls	r3, r3, #20
 800e3b4:	b12b      	cbz	r3, 800e3c2 <_dtoa_r+0x902>
 800e3b6:	9b04      	ldr	r3, [sp, #16]
 800e3b8:	3301      	adds	r3, #1
 800e3ba:	9304      	str	r3, [sp, #16]
 800e3bc:	f108 0801 	add.w	r8, r8, #1
 800e3c0:	2301      	movs	r3, #1
 800e3c2:	9306      	str	r3, [sp, #24]
 800e3c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	f47f af74 	bne.w	800e2b4 <_dtoa_r+0x7f4>
 800e3cc:	2001      	movs	r0, #1
 800e3ce:	e779      	b.n	800e2c4 <_dtoa_r+0x804>
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	e7f6      	b.n	800e3c2 <_dtoa_r+0x902>
 800e3d4:	9b02      	ldr	r3, [sp, #8]
 800e3d6:	e7f4      	b.n	800e3c2 <_dtoa_r+0x902>
 800e3d8:	d085      	beq.n	800e2e6 <_dtoa_r+0x826>
 800e3da:	4618      	mov	r0, r3
 800e3dc:	301c      	adds	r0, #28
 800e3de:	e77d      	b.n	800e2dc <_dtoa_r+0x81c>
 800e3e0:	40240000 	.word	0x40240000
 800e3e4:	9b01      	ldr	r3, [sp, #4]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	dc38      	bgt.n	800e45c <_dtoa_r+0x99c>
 800e3ea:	9b05      	ldr	r3, [sp, #20]
 800e3ec:	2b02      	cmp	r3, #2
 800e3ee:	dd35      	ble.n	800e45c <_dtoa_r+0x99c>
 800e3f0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e3f4:	f1b9 0f00 	cmp.w	r9, #0
 800e3f8:	d10d      	bne.n	800e416 <_dtoa_r+0x956>
 800e3fa:	4631      	mov	r1, r6
 800e3fc:	464b      	mov	r3, r9
 800e3fe:	2205      	movs	r2, #5
 800e400:	4620      	mov	r0, r4
 800e402:	f000 fd4b 	bl	800ee9c <__multadd>
 800e406:	4601      	mov	r1, r0
 800e408:	4606      	mov	r6, r0
 800e40a:	4658      	mov	r0, fp
 800e40c:	f000 ffac 	bl	800f368 <__mcmp>
 800e410:	2800      	cmp	r0, #0
 800e412:	f73f adbd 	bgt.w	800df90 <_dtoa_r+0x4d0>
 800e416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e418:	9d00      	ldr	r5, [sp, #0]
 800e41a:	ea6f 0a03 	mvn.w	sl, r3
 800e41e:	f04f 0800 	mov.w	r8, #0
 800e422:	4631      	mov	r1, r6
 800e424:	4620      	mov	r0, r4
 800e426:	f000 fd17 	bl	800ee58 <_Bfree>
 800e42a:	2f00      	cmp	r7, #0
 800e42c:	f43f aeb4 	beq.w	800e198 <_dtoa_r+0x6d8>
 800e430:	f1b8 0f00 	cmp.w	r8, #0
 800e434:	d005      	beq.n	800e442 <_dtoa_r+0x982>
 800e436:	45b8      	cmp	r8, r7
 800e438:	d003      	beq.n	800e442 <_dtoa_r+0x982>
 800e43a:	4641      	mov	r1, r8
 800e43c:	4620      	mov	r0, r4
 800e43e:	f000 fd0b 	bl	800ee58 <_Bfree>
 800e442:	4639      	mov	r1, r7
 800e444:	4620      	mov	r0, r4
 800e446:	f000 fd07 	bl	800ee58 <_Bfree>
 800e44a:	e6a5      	b.n	800e198 <_dtoa_r+0x6d8>
 800e44c:	2600      	movs	r6, #0
 800e44e:	4637      	mov	r7, r6
 800e450:	e7e1      	b.n	800e416 <_dtoa_r+0x956>
 800e452:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e454:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e458:	4637      	mov	r7, r6
 800e45a:	e599      	b.n	800df90 <_dtoa_r+0x4d0>
 800e45c:	9b08      	ldr	r3, [sp, #32]
 800e45e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e462:	2b00      	cmp	r3, #0
 800e464:	f000 80fd 	beq.w	800e662 <_dtoa_r+0xba2>
 800e468:	2d00      	cmp	r5, #0
 800e46a:	dd05      	ble.n	800e478 <_dtoa_r+0x9b8>
 800e46c:	4639      	mov	r1, r7
 800e46e:	462a      	mov	r2, r5
 800e470:	4620      	mov	r0, r4
 800e472:	f000 ff0d 	bl	800f290 <__lshift>
 800e476:	4607      	mov	r7, r0
 800e478:	9b06      	ldr	r3, [sp, #24]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d05c      	beq.n	800e538 <_dtoa_r+0xa78>
 800e47e:	6879      	ldr	r1, [r7, #4]
 800e480:	4620      	mov	r0, r4
 800e482:	f000 fca9 	bl	800edd8 <_Balloc>
 800e486:	4605      	mov	r5, r0
 800e488:	b928      	cbnz	r0, 800e496 <_dtoa_r+0x9d6>
 800e48a:	4b80      	ldr	r3, [pc, #512]	; (800e68c <_dtoa_r+0xbcc>)
 800e48c:	4602      	mov	r2, r0
 800e48e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e492:	f7ff bb2e 	b.w	800daf2 <_dtoa_r+0x32>
 800e496:	693a      	ldr	r2, [r7, #16]
 800e498:	3202      	adds	r2, #2
 800e49a:	0092      	lsls	r2, r2, #2
 800e49c:	f107 010c 	add.w	r1, r7, #12
 800e4a0:	300c      	adds	r0, #12
 800e4a2:	f7fd fc47 	bl	800bd34 <memcpy>
 800e4a6:	2201      	movs	r2, #1
 800e4a8:	4629      	mov	r1, r5
 800e4aa:	4620      	mov	r0, r4
 800e4ac:	f000 fef0 	bl	800f290 <__lshift>
 800e4b0:	9b00      	ldr	r3, [sp, #0]
 800e4b2:	3301      	adds	r3, #1
 800e4b4:	9301      	str	r3, [sp, #4]
 800e4b6:	9b00      	ldr	r3, [sp, #0]
 800e4b8:	444b      	add	r3, r9
 800e4ba:	9307      	str	r3, [sp, #28]
 800e4bc:	9b02      	ldr	r3, [sp, #8]
 800e4be:	f003 0301 	and.w	r3, r3, #1
 800e4c2:	46b8      	mov	r8, r7
 800e4c4:	9306      	str	r3, [sp, #24]
 800e4c6:	4607      	mov	r7, r0
 800e4c8:	9b01      	ldr	r3, [sp, #4]
 800e4ca:	4631      	mov	r1, r6
 800e4cc:	3b01      	subs	r3, #1
 800e4ce:	4658      	mov	r0, fp
 800e4d0:	9302      	str	r3, [sp, #8]
 800e4d2:	f7ff fa69 	bl	800d9a8 <quorem>
 800e4d6:	4603      	mov	r3, r0
 800e4d8:	3330      	adds	r3, #48	; 0x30
 800e4da:	9004      	str	r0, [sp, #16]
 800e4dc:	4641      	mov	r1, r8
 800e4de:	4658      	mov	r0, fp
 800e4e0:	9308      	str	r3, [sp, #32]
 800e4e2:	f000 ff41 	bl	800f368 <__mcmp>
 800e4e6:	463a      	mov	r2, r7
 800e4e8:	4681      	mov	r9, r0
 800e4ea:	4631      	mov	r1, r6
 800e4ec:	4620      	mov	r0, r4
 800e4ee:	f000 ff57 	bl	800f3a0 <__mdiff>
 800e4f2:	68c2      	ldr	r2, [r0, #12]
 800e4f4:	9b08      	ldr	r3, [sp, #32]
 800e4f6:	4605      	mov	r5, r0
 800e4f8:	bb02      	cbnz	r2, 800e53c <_dtoa_r+0xa7c>
 800e4fa:	4601      	mov	r1, r0
 800e4fc:	4658      	mov	r0, fp
 800e4fe:	f000 ff33 	bl	800f368 <__mcmp>
 800e502:	9b08      	ldr	r3, [sp, #32]
 800e504:	4602      	mov	r2, r0
 800e506:	4629      	mov	r1, r5
 800e508:	4620      	mov	r0, r4
 800e50a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800e50e:	f000 fca3 	bl	800ee58 <_Bfree>
 800e512:	9b05      	ldr	r3, [sp, #20]
 800e514:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e516:	9d01      	ldr	r5, [sp, #4]
 800e518:	ea43 0102 	orr.w	r1, r3, r2
 800e51c:	9b06      	ldr	r3, [sp, #24]
 800e51e:	430b      	orrs	r3, r1
 800e520:	9b08      	ldr	r3, [sp, #32]
 800e522:	d10d      	bne.n	800e540 <_dtoa_r+0xa80>
 800e524:	2b39      	cmp	r3, #57	; 0x39
 800e526:	d029      	beq.n	800e57c <_dtoa_r+0xabc>
 800e528:	f1b9 0f00 	cmp.w	r9, #0
 800e52c:	dd01      	ble.n	800e532 <_dtoa_r+0xa72>
 800e52e:	9b04      	ldr	r3, [sp, #16]
 800e530:	3331      	adds	r3, #49	; 0x31
 800e532:	9a02      	ldr	r2, [sp, #8]
 800e534:	7013      	strb	r3, [r2, #0]
 800e536:	e774      	b.n	800e422 <_dtoa_r+0x962>
 800e538:	4638      	mov	r0, r7
 800e53a:	e7b9      	b.n	800e4b0 <_dtoa_r+0x9f0>
 800e53c:	2201      	movs	r2, #1
 800e53e:	e7e2      	b.n	800e506 <_dtoa_r+0xa46>
 800e540:	f1b9 0f00 	cmp.w	r9, #0
 800e544:	db06      	blt.n	800e554 <_dtoa_r+0xa94>
 800e546:	9905      	ldr	r1, [sp, #20]
 800e548:	ea41 0909 	orr.w	r9, r1, r9
 800e54c:	9906      	ldr	r1, [sp, #24]
 800e54e:	ea59 0101 	orrs.w	r1, r9, r1
 800e552:	d120      	bne.n	800e596 <_dtoa_r+0xad6>
 800e554:	2a00      	cmp	r2, #0
 800e556:	ddec      	ble.n	800e532 <_dtoa_r+0xa72>
 800e558:	4659      	mov	r1, fp
 800e55a:	2201      	movs	r2, #1
 800e55c:	4620      	mov	r0, r4
 800e55e:	9301      	str	r3, [sp, #4]
 800e560:	f000 fe96 	bl	800f290 <__lshift>
 800e564:	4631      	mov	r1, r6
 800e566:	4683      	mov	fp, r0
 800e568:	f000 fefe 	bl	800f368 <__mcmp>
 800e56c:	2800      	cmp	r0, #0
 800e56e:	9b01      	ldr	r3, [sp, #4]
 800e570:	dc02      	bgt.n	800e578 <_dtoa_r+0xab8>
 800e572:	d1de      	bne.n	800e532 <_dtoa_r+0xa72>
 800e574:	07da      	lsls	r2, r3, #31
 800e576:	d5dc      	bpl.n	800e532 <_dtoa_r+0xa72>
 800e578:	2b39      	cmp	r3, #57	; 0x39
 800e57a:	d1d8      	bne.n	800e52e <_dtoa_r+0xa6e>
 800e57c:	9a02      	ldr	r2, [sp, #8]
 800e57e:	2339      	movs	r3, #57	; 0x39
 800e580:	7013      	strb	r3, [r2, #0]
 800e582:	462b      	mov	r3, r5
 800e584:	461d      	mov	r5, r3
 800e586:	3b01      	subs	r3, #1
 800e588:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e58c:	2a39      	cmp	r2, #57	; 0x39
 800e58e:	d050      	beq.n	800e632 <_dtoa_r+0xb72>
 800e590:	3201      	adds	r2, #1
 800e592:	701a      	strb	r2, [r3, #0]
 800e594:	e745      	b.n	800e422 <_dtoa_r+0x962>
 800e596:	2a00      	cmp	r2, #0
 800e598:	dd03      	ble.n	800e5a2 <_dtoa_r+0xae2>
 800e59a:	2b39      	cmp	r3, #57	; 0x39
 800e59c:	d0ee      	beq.n	800e57c <_dtoa_r+0xabc>
 800e59e:	3301      	adds	r3, #1
 800e5a0:	e7c7      	b.n	800e532 <_dtoa_r+0xa72>
 800e5a2:	9a01      	ldr	r2, [sp, #4]
 800e5a4:	9907      	ldr	r1, [sp, #28]
 800e5a6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e5aa:	428a      	cmp	r2, r1
 800e5ac:	d02a      	beq.n	800e604 <_dtoa_r+0xb44>
 800e5ae:	4659      	mov	r1, fp
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	220a      	movs	r2, #10
 800e5b4:	4620      	mov	r0, r4
 800e5b6:	f000 fc71 	bl	800ee9c <__multadd>
 800e5ba:	45b8      	cmp	r8, r7
 800e5bc:	4683      	mov	fp, r0
 800e5be:	f04f 0300 	mov.w	r3, #0
 800e5c2:	f04f 020a 	mov.w	r2, #10
 800e5c6:	4641      	mov	r1, r8
 800e5c8:	4620      	mov	r0, r4
 800e5ca:	d107      	bne.n	800e5dc <_dtoa_r+0xb1c>
 800e5cc:	f000 fc66 	bl	800ee9c <__multadd>
 800e5d0:	4680      	mov	r8, r0
 800e5d2:	4607      	mov	r7, r0
 800e5d4:	9b01      	ldr	r3, [sp, #4]
 800e5d6:	3301      	adds	r3, #1
 800e5d8:	9301      	str	r3, [sp, #4]
 800e5da:	e775      	b.n	800e4c8 <_dtoa_r+0xa08>
 800e5dc:	f000 fc5e 	bl	800ee9c <__multadd>
 800e5e0:	4639      	mov	r1, r7
 800e5e2:	4680      	mov	r8, r0
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	220a      	movs	r2, #10
 800e5e8:	4620      	mov	r0, r4
 800e5ea:	f000 fc57 	bl	800ee9c <__multadd>
 800e5ee:	4607      	mov	r7, r0
 800e5f0:	e7f0      	b.n	800e5d4 <_dtoa_r+0xb14>
 800e5f2:	f1b9 0f00 	cmp.w	r9, #0
 800e5f6:	9a00      	ldr	r2, [sp, #0]
 800e5f8:	bfcc      	ite	gt
 800e5fa:	464d      	movgt	r5, r9
 800e5fc:	2501      	movle	r5, #1
 800e5fe:	4415      	add	r5, r2
 800e600:	f04f 0800 	mov.w	r8, #0
 800e604:	4659      	mov	r1, fp
 800e606:	2201      	movs	r2, #1
 800e608:	4620      	mov	r0, r4
 800e60a:	9301      	str	r3, [sp, #4]
 800e60c:	f000 fe40 	bl	800f290 <__lshift>
 800e610:	4631      	mov	r1, r6
 800e612:	4683      	mov	fp, r0
 800e614:	f000 fea8 	bl	800f368 <__mcmp>
 800e618:	2800      	cmp	r0, #0
 800e61a:	dcb2      	bgt.n	800e582 <_dtoa_r+0xac2>
 800e61c:	d102      	bne.n	800e624 <_dtoa_r+0xb64>
 800e61e:	9b01      	ldr	r3, [sp, #4]
 800e620:	07db      	lsls	r3, r3, #31
 800e622:	d4ae      	bmi.n	800e582 <_dtoa_r+0xac2>
 800e624:	462b      	mov	r3, r5
 800e626:	461d      	mov	r5, r3
 800e628:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e62c:	2a30      	cmp	r2, #48	; 0x30
 800e62e:	d0fa      	beq.n	800e626 <_dtoa_r+0xb66>
 800e630:	e6f7      	b.n	800e422 <_dtoa_r+0x962>
 800e632:	9a00      	ldr	r2, [sp, #0]
 800e634:	429a      	cmp	r2, r3
 800e636:	d1a5      	bne.n	800e584 <_dtoa_r+0xac4>
 800e638:	f10a 0a01 	add.w	sl, sl, #1
 800e63c:	2331      	movs	r3, #49	; 0x31
 800e63e:	e779      	b.n	800e534 <_dtoa_r+0xa74>
 800e640:	4b13      	ldr	r3, [pc, #76]	; (800e690 <_dtoa_r+0xbd0>)
 800e642:	f7ff baaf 	b.w	800dba4 <_dtoa_r+0xe4>
 800e646:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e648:	2b00      	cmp	r3, #0
 800e64a:	f47f aa86 	bne.w	800db5a <_dtoa_r+0x9a>
 800e64e:	4b11      	ldr	r3, [pc, #68]	; (800e694 <_dtoa_r+0xbd4>)
 800e650:	f7ff baa8 	b.w	800dba4 <_dtoa_r+0xe4>
 800e654:	f1b9 0f00 	cmp.w	r9, #0
 800e658:	dc03      	bgt.n	800e662 <_dtoa_r+0xba2>
 800e65a:	9b05      	ldr	r3, [sp, #20]
 800e65c:	2b02      	cmp	r3, #2
 800e65e:	f73f aec9 	bgt.w	800e3f4 <_dtoa_r+0x934>
 800e662:	9d00      	ldr	r5, [sp, #0]
 800e664:	4631      	mov	r1, r6
 800e666:	4658      	mov	r0, fp
 800e668:	f7ff f99e 	bl	800d9a8 <quorem>
 800e66c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e670:	f805 3b01 	strb.w	r3, [r5], #1
 800e674:	9a00      	ldr	r2, [sp, #0]
 800e676:	1aaa      	subs	r2, r5, r2
 800e678:	4591      	cmp	r9, r2
 800e67a:	ddba      	ble.n	800e5f2 <_dtoa_r+0xb32>
 800e67c:	4659      	mov	r1, fp
 800e67e:	2300      	movs	r3, #0
 800e680:	220a      	movs	r2, #10
 800e682:	4620      	mov	r0, r4
 800e684:	f000 fc0a 	bl	800ee9c <__multadd>
 800e688:	4683      	mov	fp, r0
 800e68a:	e7eb      	b.n	800e664 <_dtoa_r+0xba4>
 800e68c:	08010d79 	.word	0x08010d79
 800e690:	08010ad8 	.word	0x08010ad8
 800e694:	08010d0d 	.word	0x08010d0d

0800e698 <fiprintf>:
 800e698:	b40e      	push	{r1, r2, r3}
 800e69a:	b503      	push	{r0, r1, lr}
 800e69c:	4601      	mov	r1, r0
 800e69e:	ab03      	add	r3, sp, #12
 800e6a0:	4805      	ldr	r0, [pc, #20]	; (800e6b8 <fiprintf+0x20>)
 800e6a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6a6:	6800      	ldr	r0, [r0, #0]
 800e6a8:	9301      	str	r3, [sp, #4]
 800e6aa:	f001 fab5 	bl	800fc18 <_vfiprintf_r>
 800e6ae:	b002      	add	sp, #8
 800e6b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e6b4:	b003      	add	sp, #12
 800e6b6:	4770      	bx	lr
 800e6b8:	20000020 	.word	0x20000020

0800e6bc <rshift>:
 800e6bc:	6903      	ldr	r3, [r0, #16]
 800e6be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e6c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e6c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e6ca:	f100 0414 	add.w	r4, r0, #20
 800e6ce:	dd45      	ble.n	800e75c <rshift+0xa0>
 800e6d0:	f011 011f 	ands.w	r1, r1, #31
 800e6d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e6d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e6dc:	d10c      	bne.n	800e6f8 <rshift+0x3c>
 800e6de:	f100 0710 	add.w	r7, r0, #16
 800e6e2:	4629      	mov	r1, r5
 800e6e4:	42b1      	cmp	r1, r6
 800e6e6:	d334      	bcc.n	800e752 <rshift+0x96>
 800e6e8:	1a9b      	subs	r3, r3, r2
 800e6ea:	009b      	lsls	r3, r3, #2
 800e6ec:	1eea      	subs	r2, r5, #3
 800e6ee:	4296      	cmp	r6, r2
 800e6f0:	bf38      	it	cc
 800e6f2:	2300      	movcc	r3, #0
 800e6f4:	4423      	add	r3, r4
 800e6f6:	e015      	b.n	800e724 <rshift+0x68>
 800e6f8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e6fc:	f1c1 0820 	rsb	r8, r1, #32
 800e700:	40cf      	lsrs	r7, r1
 800e702:	f105 0e04 	add.w	lr, r5, #4
 800e706:	46a1      	mov	r9, r4
 800e708:	4576      	cmp	r6, lr
 800e70a:	46f4      	mov	ip, lr
 800e70c:	d815      	bhi.n	800e73a <rshift+0x7e>
 800e70e:	1a9b      	subs	r3, r3, r2
 800e710:	009a      	lsls	r2, r3, #2
 800e712:	3a04      	subs	r2, #4
 800e714:	3501      	adds	r5, #1
 800e716:	42ae      	cmp	r6, r5
 800e718:	bf38      	it	cc
 800e71a:	2200      	movcc	r2, #0
 800e71c:	18a3      	adds	r3, r4, r2
 800e71e:	50a7      	str	r7, [r4, r2]
 800e720:	b107      	cbz	r7, 800e724 <rshift+0x68>
 800e722:	3304      	adds	r3, #4
 800e724:	1b1a      	subs	r2, r3, r4
 800e726:	42a3      	cmp	r3, r4
 800e728:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e72c:	bf08      	it	eq
 800e72e:	2300      	moveq	r3, #0
 800e730:	6102      	str	r2, [r0, #16]
 800e732:	bf08      	it	eq
 800e734:	6143      	streq	r3, [r0, #20]
 800e736:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e73a:	f8dc c000 	ldr.w	ip, [ip]
 800e73e:	fa0c fc08 	lsl.w	ip, ip, r8
 800e742:	ea4c 0707 	orr.w	r7, ip, r7
 800e746:	f849 7b04 	str.w	r7, [r9], #4
 800e74a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e74e:	40cf      	lsrs	r7, r1
 800e750:	e7da      	b.n	800e708 <rshift+0x4c>
 800e752:	f851 cb04 	ldr.w	ip, [r1], #4
 800e756:	f847 cf04 	str.w	ip, [r7, #4]!
 800e75a:	e7c3      	b.n	800e6e4 <rshift+0x28>
 800e75c:	4623      	mov	r3, r4
 800e75e:	e7e1      	b.n	800e724 <rshift+0x68>

0800e760 <__hexdig_fun>:
 800e760:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e764:	2b09      	cmp	r3, #9
 800e766:	d802      	bhi.n	800e76e <__hexdig_fun+0xe>
 800e768:	3820      	subs	r0, #32
 800e76a:	b2c0      	uxtb	r0, r0
 800e76c:	4770      	bx	lr
 800e76e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e772:	2b05      	cmp	r3, #5
 800e774:	d801      	bhi.n	800e77a <__hexdig_fun+0x1a>
 800e776:	3847      	subs	r0, #71	; 0x47
 800e778:	e7f7      	b.n	800e76a <__hexdig_fun+0xa>
 800e77a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e77e:	2b05      	cmp	r3, #5
 800e780:	d801      	bhi.n	800e786 <__hexdig_fun+0x26>
 800e782:	3827      	subs	r0, #39	; 0x27
 800e784:	e7f1      	b.n	800e76a <__hexdig_fun+0xa>
 800e786:	2000      	movs	r0, #0
 800e788:	4770      	bx	lr
	...

0800e78c <__gethex>:
 800e78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e790:	ed2d 8b02 	vpush	{d8}
 800e794:	b089      	sub	sp, #36	; 0x24
 800e796:	ee08 0a10 	vmov	s16, r0
 800e79a:	9304      	str	r3, [sp, #16]
 800e79c:	4bbc      	ldr	r3, [pc, #752]	; (800ea90 <__gethex+0x304>)
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	9301      	str	r3, [sp, #4]
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	468b      	mov	fp, r1
 800e7a6:	4690      	mov	r8, r2
 800e7a8:	f7f1 fd12 	bl	80001d0 <strlen>
 800e7ac:	9b01      	ldr	r3, [sp, #4]
 800e7ae:	f8db 2000 	ldr.w	r2, [fp]
 800e7b2:	4403      	add	r3, r0
 800e7b4:	4682      	mov	sl, r0
 800e7b6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e7ba:	9305      	str	r3, [sp, #20]
 800e7bc:	1c93      	adds	r3, r2, #2
 800e7be:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e7c2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e7c6:	32fe      	adds	r2, #254	; 0xfe
 800e7c8:	18d1      	adds	r1, r2, r3
 800e7ca:	461f      	mov	r7, r3
 800e7cc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e7d0:	9100      	str	r1, [sp, #0]
 800e7d2:	2830      	cmp	r0, #48	; 0x30
 800e7d4:	d0f8      	beq.n	800e7c8 <__gethex+0x3c>
 800e7d6:	f7ff ffc3 	bl	800e760 <__hexdig_fun>
 800e7da:	4604      	mov	r4, r0
 800e7dc:	2800      	cmp	r0, #0
 800e7de:	d13a      	bne.n	800e856 <__gethex+0xca>
 800e7e0:	9901      	ldr	r1, [sp, #4]
 800e7e2:	4652      	mov	r2, sl
 800e7e4:	4638      	mov	r0, r7
 800e7e6:	f001 fb5f 	bl	800fea8 <strncmp>
 800e7ea:	4605      	mov	r5, r0
 800e7ec:	2800      	cmp	r0, #0
 800e7ee:	d168      	bne.n	800e8c2 <__gethex+0x136>
 800e7f0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e7f4:	eb07 060a 	add.w	r6, r7, sl
 800e7f8:	f7ff ffb2 	bl	800e760 <__hexdig_fun>
 800e7fc:	2800      	cmp	r0, #0
 800e7fe:	d062      	beq.n	800e8c6 <__gethex+0x13a>
 800e800:	4633      	mov	r3, r6
 800e802:	7818      	ldrb	r0, [r3, #0]
 800e804:	2830      	cmp	r0, #48	; 0x30
 800e806:	461f      	mov	r7, r3
 800e808:	f103 0301 	add.w	r3, r3, #1
 800e80c:	d0f9      	beq.n	800e802 <__gethex+0x76>
 800e80e:	f7ff ffa7 	bl	800e760 <__hexdig_fun>
 800e812:	2301      	movs	r3, #1
 800e814:	fab0 f480 	clz	r4, r0
 800e818:	0964      	lsrs	r4, r4, #5
 800e81a:	4635      	mov	r5, r6
 800e81c:	9300      	str	r3, [sp, #0]
 800e81e:	463a      	mov	r2, r7
 800e820:	4616      	mov	r6, r2
 800e822:	3201      	adds	r2, #1
 800e824:	7830      	ldrb	r0, [r6, #0]
 800e826:	f7ff ff9b 	bl	800e760 <__hexdig_fun>
 800e82a:	2800      	cmp	r0, #0
 800e82c:	d1f8      	bne.n	800e820 <__gethex+0x94>
 800e82e:	9901      	ldr	r1, [sp, #4]
 800e830:	4652      	mov	r2, sl
 800e832:	4630      	mov	r0, r6
 800e834:	f001 fb38 	bl	800fea8 <strncmp>
 800e838:	b980      	cbnz	r0, 800e85c <__gethex+0xd0>
 800e83a:	b94d      	cbnz	r5, 800e850 <__gethex+0xc4>
 800e83c:	eb06 050a 	add.w	r5, r6, sl
 800e840:	462a      	mov	r2, r5
 800e842:	4616      	mov	r6, r2
 800e844:	3201      	adds	r2, #1
 800e846:	7830      	ldrb	r0, [r6, #0]
 800e848:	f7ff ff8a 	bl	800e760 <__hexdig_fun>
 800e84c:	2800      	cmp	r0, #0
 800e84e:	d1f8      	bne.n	800e842 <__gethex+0xb6>
 800e850:	1bad      	subs	r5, r5, r6
 800e852:	00ad      	lsls	r5, r5, #2
 800e854:	e004      	b.n	800e860 <__gethex+0xd4>
 800e856:	2400      	movs	r4, #0
 800e858:	4625      	mov	r5, r4
 800e85a:	e7e0      	b.n	800e81e <__gethex+0x92>
 800e85c:	2d00      	cmp	r5, #0
 800e85e:	d1f7      	bne.n	800e850 <__gethex+0xc4>
 800e860:	7833      	ldrb	r3, [r6, #0]
 800e862:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e866:	2b50      	cmp	r3, #80	; 0x50
 800e868:	d13b      	bne.n	800e8e2 <__gethex+0x156>
 800e86a:	7873      	ldrb	r3, [r6, #1]
 800e86c:	2b2b      	cmp	r3, #43	; 0x2b
 800e86e:	d02c      	beq.n	800e8ca <__gethex+0x13e>
 800e870:	2b2d      	cmp	r3, #45	; 0x2d
 800e872:	d02e      	beq.n	800e8d2 <__gethex+0x146>
 800e874:	1c71      	adds	r1, r6, #1
 800e876:	f04f 0900 	mov.w	r9, #0
 800e87a:	7808      	ldrb	r0, [r1, #0]
 800e87c:	f7ff ff70 	bl	800e760 <__hexdig_fun>
 800e880:	1e43      	subs	r3, r0, #1
 800e882:	b2db      	uxtb	r3, r3
 800e884:	2b18      	cmp	r3, #24
 800e886:	d82c      	bhi.n	800e8e2 <__gethex+0x156>
 800e888:	f1a0 0210 	sub.w	r2, r0, #16
 800e88c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e890:	f7ff ff66 	bl	800e760 <__hexdig_fun>
 800e894:	1e43      	subs	r3, r0, #1
 800e896:	b2db      	uxtb	r3, r3
 800e898:	2b18      	cmp	r3, #24
 800e89a:	d91d      	bls.n	800e8d8 <__gethex+0x14c>
 800e89c:	f1b9 0f00 	cmp.w	r9, #0
 800e8a0:	d000      	beq.n	800e8a4 <__gethex+0x118>
 800e8a2:	4252      	negs	r2, r2
 800e8a4:	4415      	add	r5, r2
 800e8a6:	f8cb 1000 	str.w	r1, [fp]
 800e8aa:	b1e4      	cbz	r4, 800e8e6 <__gethex+0x15a>
 800e8ac:	9b00      	ldr	r3, [sp, #0]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	bf14      	ite	ne
 800e8b2:	2700      	movne	r7, #0
 800e8b4:	2706      	moveq	r7, #6
 800e8b6:	4638      	mov	r0, r7
 800e8b8:	b009      	add	sp, #36	; 0x24
 800e8ba:	ecbd 8b02 	vpop	{d8}
 800e8be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8c2:	463e      	mov	r6, r7
 800e8c4:	4625      	mov	r5, r4
 800e8c6:	2401      	movs	r4, #1
 800e8c8:	e7ca      	b.n	800e860 <__gethex+0xd4>
 800e8ca:	f04f 0900 	mov.w	r9, #0
 800e8ce:	1cb1      	adds	r1, r6, #2
 800e8d0:	e7d3      	b.n	800e87a <__gethex+0xee>
 800e8d2:	f04f 0901 	mov.w	r9, #1
 800e8d6:	e7fa      	b.n	800e8ce <__gethex+0x142>
 800e8d8:	230a      	movs	r3, #10
 800e8da:	fb03 0202 	mla	r2, r3, r2, r0
 800e8de:	3a10      	subs	r2, #16
 800e8e0:	e7d4      	b.n	800e88c <__gethex+0x100>
 800e8e2:	4631      	mov	r1, r6
 800e8e4:	e7df      	b.n	800e8a6 <__gethex+0x11a>
 800e8e6:	1bf3      	subs	r3, r6, r7
 800e8e8:	3b01      	subs	r3, #1
 800e8ea:	4621      	mov	r1, r4
 800e8ec:	2b07      	cmp	r3, #7
 800e8ee:	dc0b      	bgt.n	800e908 <__gethex+0x17c>
 800e8f0:	ee18 0a10 	vmov	r0, s16
 800e8f4:	f000 fa70 	bl	800edd8 <_Balloc>
 800e8f8:	4604      	mov	r4, r0
 800e8fa:	b940      	cbnz	r0, 800e90e <__gethex+0x182>
 800e8fc:	4b65      	ldr	r3, [pc, #404]	; (800ea94 <__gethex+0x308>)
 800e8fe:	4602      	mov	r2, r0
 800e900:	21de      	movs	r1, #222	; 0xde
 800e902:	4865      	ldr	r0, [pc, #404]	; (800ea98 <__gethex+0x30c>)
 800e904:	f7ff f832 	bl	800d96c <__assert_func>
 800e908:	3101      	adds	r1, #1
 800e90a:	105b      	asrs	r3, r3, #1
 800e90c:	e7ee      	b.n	800e8ec <__gethex+0x160>
 800e90e:	f100 0914 	add.w	r9, r0, #20
 800e912:	f04f 0b00 	mov.w	fp, #0
 800e916:	f1ca 0301 	rsb	r3, sl, #1
 800e91a:	f8cd 9008 	str.w	r9, [sp, #8]
 800e91e:	f8cd b000 	str.w	fp, [sp]
 800e922:	9306      	str	r3, [sp, #24]
 800e924:	42b7      	cmp	r7, r6
 800e926:	d340      	bcc.n	800e9aa <__gethex+0x21e>
 800e928:	9802      	ldr	r0, [sp, #8]
 800e92a:	9b00      	ldr	r3, [sp, #0]
 800e92c:	f840 3b04 	str.w	r3, [r0], #4
 800e930:	eba0 0009 	sub.w	r0, r0, r9
 800e934:	1080      	asrs	r0, r0, #2
 800e936:	0146      	lsls	r6, r0, #5
 800e938:	6120      	str	r0, [r4, #16]
 800e93a:	4618      	mov	r0, r3
 800e93c:	f000 fb42 	bl	800efc4 <__hi0bits>
 800e940:	1a30      	subs	r0, r6, r0
 800e942:	f8d8 6000 	ldr.w	r6, [r8]
 800e946:	42b0      	cmp	r0, r6
 800e948:	dd63      	ble.n	800ea12 <__gethex+0x286>
 800e94a:	1b87      	subs	r7, r0, r6
 800e94c:	4639      	mov	r1, r7
 800e94e:	4620      	mov	r0, r4
 800e950:	f000 fedc 	bl	800f70c <__any_on>
 800e954:	4682      	mov	sl, r0
 800e956:	b1a8      	cbz	r0, 800e984 <__gethex+0x1f8>
 800e958:	1e7b      	subs	r3, r7, #1
 800e95a:	1159      	asrs	r1, r3, #5
 800e95c:	f003 021f 	and.w	r2, r3, #31
 800e960:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e964:	f04f 0a01 	mov.w	sl, #1
 800e968:	fa0a f202 	lsl.w	r2, sl, r2
 800e96c:	420a      	tst	r2, r1
 800e96e:	d009      	beq.n	800e984 <__gethex+0x1f8>
 800e970:	4553      	cmp	r3, sl
 800e972:	dd05      	ble.n	800e980 <__gethex+0x1f4>
 800e974:	1eb9      	subs	r1, r7, #2
 800e976:	4620      	mov	r0, r4
 800e978:	f000 fec8 	bl	800f70c <__any_on>
 800e97c:	2800      	cmp	r0, #0
 800e97e:	d145      	bne.n	800ea0c <__gethex+0x280>
 800e980:	f04f 0a02 	mov.w	sl, #2
 800e984:	4639      	mov	r1, r7
 800e986:	4620      	mov	r0, r4
 800e988:	f7ff fe98 	bl	800e6bc <rshift>
 800e98c:	443d      	add	r5, r7
 800e98e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e992:	42ab      	cmp	r3, r5
 800e994:	da4c      	bge.n	800ea30 <__gethex+0x2a4>
 800e996:	ee18 0a10 	vmov	r0, s16
 800e99a:	4621      	mov	r1, r4
 800e99c:	f000 fa5c 	bl	800ee58 <_Bfree>
 800e9a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	6013      	str	r3, [r2, #0]
 800e9a6:	27a3      	movs	r7, #163	; 0xa3
 800e9a8:	e785      	b.n	800e8b6 <__gethex+0x12a>
 800e9aa:	1e73      	subs	r3, r6, #1
 800e9ac:	9a05      	ldr	r2, [sp, #20]
 800e9ae:	9303      	str	r3, [sp, #12]
 800e9b0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e9b4:	4293      	cmp	r3, r2
 800e9b6:	d019      	beq.n	800e9ec <__gethex+0x260>
 800e9b8:	f1bb 0f20 	cmp.w	fp, #32
 800e9bc:	d107      	bne.n	800e9ce <__gethex+0x242>
 800e9be:	9b02      	ldr	r3, [sp, #8]
 800e9c0:	9a00      	ldr	r2, [sp, #0]
 800e9c2:	f843 2b04 	str.w	r2, [r3], #4
 800e9c6:	9302      	str	r3, [sp, #8]
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	9300      	str	r3, [sp, #0]
 800e9cc:	469b      	mov	fp, r3
 800e9ce:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e9d2:	f7ff fec5 	bl	800e760 <__hexdig_fun>
 800e9d6:	9b00      	ldr	r3, [sp, #0]
 800e9d8:	f000 000f 	and.w	r0, r0, #15
 800e9dc:	fa00 f00b 	lsl.w	r0, r0, fp
 800e9e0:	4303      	orrs	r3, r0
 800e9e2:	9300      	str	r3, [sp, #0]
 800e9e4:	f10b 0b04 	add.w	fp, fp, #4
 800e9e8:	9b03      	ldr	r3, [sp, #12]
 800e9ea:	e00d      	b.n	800ea08 <__gethex+0x27c>
 800e9ec:	9b03      	ldr	r3, [sp, #12]
 800e9ee:	9a06      	ldr	r2, [sp, #24]
 800e9f0:	4413      	add	r3, r2
 800e9f2:	42bb      	cmp	r3, r7
 800e9f4:	d3e0      	bcc.n	800e9b8 <__gethex+0x22c>
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	9901      	ldr	r1, [sp, #4]
 800e9fa:	9307      	str	r3, [sp, #28]
 800e9fc:	4652      	mov	r2, sl
 800e9fe:	f001 fa53 	bl	800fea8 <strncmp>
 800ea02:	9b07      	ldr	r3, [sp, #28]
 800ea04:	2800      	cmp	r0, #0
 800ea06:	d1d7      	bne.n	800e9b8 <__gethex+0x22c>
 800ea08:	461e      	mov	r6, r3
 800ea0a:	e78b      	b.n	800e924 <__gethex+0x198>
 800ea0c:	f04f 0a03 	mov.w	sl, #3
 800ea10:	e7b8      	b.n	800e984 <__gethex+0x1f8>
 800ea12:	da0a      	bge.n	800ea2a <__gethex+0x29e>
 800ea14:	1a37      	subs	r7, r6, r0
 800ea16:	4621      	mov	r1, r4
 800ea18:	ee18 0a10 	vmov	r0, s16
 800ea1c:	463a      	mov	r2, r7
 800ea1e:	f000 fc37 	bl	800f290 <__lshift>
 800ea22:	1bed      	subs	r5, r5, r7
 800ea24:	4604      	mov	r4, r0
 800ea26:	f100 0914 	add.w	r9, r0, #20
 800ea2a:	f04f 0a00 	mov.w	sl, #0
 800ea2e:	e7ae      	b.n	800e98e <__gethex+0x202>
 800ea30:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ea34:	42a8      	cmp	r0, r5
 800ea36:	dd72      	ble.n	800eb1e <__gethex+0x392>
 800ea38:	1b45      	subs	r5, r0, r5
 800ea3a:	42ae      	cmp	r6, r5
 800ea3c:	dc36      	bgt.n	800eaac <__gethex+0x320>
 800ea3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ea42:	2b02      	cmp	r3, #2
 800ea44:	d02a      	beq.n	800ea9c <__gethex+0x310>
 800ea46:	2b03      	cmp	r3, #3
 800ea48:	d02c      	beq.n	800eaa4 <__gethex+0x318>
 800ea4a:	2b01      	cmp	r3, #1
 800ea4c:	d115      	bne.n	800ea7a <__gethex+0x2ee>
 800ea4e:	42ae      	cmp	r6, r5
 800ea50:	d113      	bne.n	800ea7a <__gethex+0x2ee>
 800ea52:	2e01      	cmp	r6, #1
 800ea54:	d10b      	bne.n	800ea6e <__gethex+0x2e2>
 800ea56:	9a04      	ldr	r2, [sp, #16]
 800ea58:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ea5c:	6013      	str	r3, [r2, #0]
 800ea5e:	2301      	movs	r3, #1
 800ea60:	6123      	str	r3, [r4, #16]
 800ea62:	f8c9 3000 	str.w	r3, [r9]
 800ea66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ea68:	2762      	movs	r7, #98	; 0x62
 800ea6a:	601c      	str	r4, [r3, #0]
 800ea6c:	e723      	b.n	800e8b6 <__gethex+0x12a>
 800ea6e:	1e71      	subs	r1, r6, #1
 800ea70:	4620      	mov	r0, r4
 800ea72:	f000 fe4b 	bl	800f70c <__any_on>
 800ea76:	2800      	cmp	r0, #0
 800ea78:	d1ed      	bne.n	800ea56 <__gethex+0x2ca>
 800ea7a:	ee18 0a10 	vmov	r0, s16
 800ea7e:	4621      	mov	r1, r4
 800ea80:	f000 f9ea 	bl	800ee58 <_Bfree>
 800ea84:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ea86:	2300      	movs	r3, #0
 800ea88:	6013      	str	r3, [r2, #0]
 800ea8a:	2750      	movs	r7, #80	; 0x50
 800ea8c:	e713      	b.n	800e8b6 <__gethex+0x12a>
 800ea8e:	bf00      	nop
 800ea90:	08010df4 	.word	0x08010df4
 800ea94:	08010d79 	.word	0x08010d79
 800ea98:	08010d8a 	.word	0x08010d8a
 800ea9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d1eb      	bne.n	800ea7a <__gethex+0x2ee>
 800eaa2:	e7d8      	b.n	800ea56 <__gethex+0x2ca>
 800eaa4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d1d5      	bne.n	800ea56 <__gethex+0x2ca>
 800eaaa:	e7e6      	b.n	800ea7a <__gethex+0x2ee>
 800eaac:	1e6f      	subs	r7, r5, #1
 800eaae:	f1ba 0f00 	cmp.w	sl, #0
 800eab2:	d131      	bne.n	800eb18 <__gethex+0x38c>
 800eab4:	b127      	cbz	r7, 800eac0 <__gethex+0x334>
 800eab6:	4639      	mov	r1, r7
 800eab8:	4620      	mov	r0, r4
 800eaba:	f000 fe27 	bl	800f70c <__any_on>
 800eabe:	4682      	mov	sl, r0
 800eac0:	117b      	asrs	r3, r7, #5
 800eac2:	2101      	movs	r1, #1
 800eac4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800eac8:	f007 071f 	and.w	r7, r7, #31
 800eacc:	fa01 f707 	lsl.w	r7, r1, r7
 800ead0:	421f      	tst	r7, r3
 800ead2:	4629      	mov	r1, r5
 800ead4:	4620      	mov	r0, r4
 800ead6:	bf18      	it	ne
 800ead8:	f04a 0a02 	orrne.w	sl, sl, #2
 800eadc:	1b76      	subs	r6, r6, r5
 800eade:	f7ff fded 	bl	800e6bc <rshift>
 800eae2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800eae6:	2702      	movs	r7, #2
 800eae8:	f1ba 0f00 	cmp.w	sl, #0
 800eaec:	d048      	beq.n	800eb80 <__gethex+0x3f4>
 800eaee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800eaf2:	2b02      	cmp	r3, #2
 800eaf4:	d015      	beq.n	800eb22 <__gethex+0x396>
 800eaf6:	2b03      	cmp	r3, #3
 800eaf8:	d017      	beq.n	800eb2a <__gethex+0x39e>
 800eafa:	2b01      	cmp	r3, #1
 800eafc:	d109      	bne.n	800eb12 <__gethex+0x386>
 800eafe:	f01a 0f02 	tst.w	sl, #2
 800eb02:	d006      	beq.n	800eb12 <__gethex+0x386>
 800eb04:	f8d9 0000 	ldr.w	r0, [r9]
 800eb08:	ea4a 0a00 	orr.w	sl, sl, r0
 800eb0c:	f01a 0f01 	tst.w	sl, #1
 800eb10:	d10e      	bne.n	800eb30 <__gethex+0x3a4>
 800eb12:	f047 0710 	orr.w	r7, r7, #16
 800eb16:	e033      	b.n	800eb80 <__gethex+0x3f4>
 800eb18:	f04f 0a01 	mov.w	sl, #1
 800eb1c:	e7d0      	b.n	800eac0 <__gethex+0x334>
 800eb1e:	2701      	movs	r7, #1
 800eb20:	e7e2      	b.n	800eae8 <__gethex+0x35c>
 800eb22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eb24:	f1c3 0301 	rsb	r3, r3, #1
 800eb28:	9315      	str	r3, [sp, #84]	; 0x54
 800eb2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d0f0      	beq.n	800eb12 <__gethex+0x386>
 800eb30:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800eb34:	f104 0314 	add.w	r3, r4, #20
 800eb38:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800eb3c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800eb40:	f04f 0c00 	mov.w	ip, #0
 800eb44:	4618      	mov	r0, r3
 800eb46:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb4a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800eb4e:	d01c      	beq.n	800eb8a <__gethex+0x3fe>
 800eb50:	3201      	adds	r2, #1
 800eb52:	6002      	str	r2, [r0, #0]
 800eb54:	2f02      	cmp	r7, #2
 800eb56:	f104 0314 	add.w	r3, r4, #20
 800eb5a:	d13f      	bne.n	800ebdc <__gethex+0x450>
 800eb5c:	f8d8 2000 	ldr.w	r2, [r8]
 800eb60:	3a01      	subs	r2, #1
 800eb62:	42b2      	cmp	r2, r6
 800eb64:	d10a      	bne.n	800eb7c <__gethex+0x3f0>
 800eb66:	1171      	asrs	r1, r6, #5
 800eb68:	2201      	movs	r2, #1
 800eb6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800eb6e:	f006 061f 	and.w	r6, r6, #31
 800eb72:	fa02 f606 	lsl.w	r6, r2, r6
 800eb76:	421e      	tst	r6, r3
 800eb78:	bf18      	it	ne
 800eb7a:	4617      	movne	r7, r2
 800eb7c:	f047 0720 	orr.w	r7, r7, #32
 800eb80:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800eb82:	601c      	str	r4, [r3, #0]
 800eb84:	9b04      	ldr	r3, [sp, #16]
 800eb86:	601d      	str	r5, [r3, #0]
 800eb88:	e695      	b.n	800e8b6 <__gethex+0x12a>
 800eb8a:	4299      	cmp	r1, r3
 800eb8c:	f843 cc04 	str.w	ip, [r3, #-4]
 800eb90:	d8d8      	bhi.n	800eb44 <__gethex+0x3b8>
 800eb92:	68a3      	ldr	r3, [r4, #8]
 800eb94:	459b      	cmp	fp, r3
 800eb96:	db19      	blt.n	800ebcc <__gethex+0x440>
 800eb98:	6861      	ldr	r1, [r4, #4]
 800eb9a:	ee18 0a10 	vmov	r0, s16
 800eb9e:	3101      	adds	r1, #1
 800eba0:	f000 f91a 	bl	800edd8 <_Balloc>
 800eba4:	4681      	mov	r9, r0
 800eba6:	b918      	cbnz	r0, 800ebb0 <__gethex+0x424>
 800eba8:	4b1a      	ldr	r3, [pc, #104]	; (800ec14 <__gethex+0x488>)
 800ebaa:	4602      	mov	r2, r0
 800ebac:	2184      	movs	r1, #132	; 0x84
 800ebae:	e6a8      	b.n	800e902 <__gethex+0x176>
 800ebb0:	6922      	ldr	r2, [r4, #16]
 800ebb2:	3202      	adds	r2, #2
 800ebb4:	f104 010c 	add.w	r1, r4, #12
 800ebb8:	0092      	lsls	r2, r2, #2
 800ebba:	300c      	adds	r0, #12
 800ebbc:	f7fd f8ba 	bl	800bd34 <memcpy>
 800ebc0:	4621      	mov	r1, r4
 800ebc2:	ee18 0a10 	vmov	r0, s16
 800ebc6:	f000 f947 	bl	800ee58 <_Bfree>
 800ebca:	464c      	mov	r4, r9
 800ebcc:	6923      	ldr	r3, [r4, #16]
 800ebce:	1c5a      	adds	r2, r3, #1
 800ebd0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ebd4:	6122      	str	r2, [r4, #16]
 800ebd6:	2201      	movs	r2, #1
 800ebd8:	615a      	str	r2, [r3, #20]
 800ebda:	e7bb      	b.n	800eb54 <__gethex+0x3c8>
 800ebdc:	6922      	ldr	r2, [r4, #16]
 800ebde:	455a      	cmp	r2, fp
 800ebe0:	dd0b      	ble.n	800ebfa <__gethex+0x46e>
 800ebe2:	2101      	movs	r1, #1
 800ebe4:	4620      	mov	r0, r4
 800ebe6:	f7ff fd69 	bl	800e6bc <rshift>
 800ebea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ebee:	3501      	adds	r5, #1
 800ebf0:	42ab      	cmp	r3, r5
 800ebf2:	f6ff aed0 	blt.w	800e996 <__gethex+0x20a>
 800ebf6:	2701      	movs	r7, #1
 800ebf8:	e7c0      	b.n	800eb7c <__gethex+0x3f0>
 800ebfa:	f016 061f 	ands.w	r6, r6, #31
 800ebfe:	d0fa      	beq.n	800ebf6 <__gethex+0x46a>
 800ec00:	449a      	add	sl, r3
 800ec02:	f1c6 0620 	rsb	r6, r6, #32
 800ec06:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800ec0a:	f000 f9db 	bl	800efc4 <__hi0bits>
 800ec0e:	42b0      	cmp	r0, r6
 800ec10:	dbe7      	blt.n	800ebe2 <__gethex+0x456>
 800ec12:	e7f0      	b.n	800ebf6 <__gethex+0x46a>
 800ec14:	08010d79 	.word	0x08010d79

0800ec18 <L_shift>:
 800ec18:	f1c2 0208 	rsb	r2, r2, #8
 800ec1c:	0092      	lsls	r2, r2, #2
 800ec1e:	b570      	push	{r4, r5, r6, lr}
 800ec20:	f1c2 0620 	rsb	r6, r2, #32
 800ec24:	6843      	ldr	r3, [r0, #4]
 800ec26:	6804      	ldr	r4, [r0, #0]
 800ec28:	fa03 f506 	lsl.w	r5, r3, r6
 800ec2c:	432c      	orrs	r4, r5
 800ec2e:	40d3      	lsrs	r3, r2
 800ec30:	6004      	str	r4, [r0, #0]
 800ec32:	f840 3f04 	str.w	r3, [r0, #4]!
 800ec36:	4288      	cmp	r0, r1
 800ec38:	d3f4      	bcc.n	800ec24 <L_shift+0xc>
 800ec3a:	bd70      	pop	{r4, r5, r6, pc}

0800ec3c <__match>:
 800ec3c:	b530      	push	{r4, r5, lr}
 800ec3e:	6803      	ldr	r3, [r0, #0]
 800ec40:	3301      	adds	r3, #1
 800ec42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec46:	b914      	cbnz	r4, 800ec4e <__match+0x12>
 800ec48:	6003      	str	r3, [r0, #0]
 800ec4a:	2001      	movs	r0, #1
 800ec4c:	bd30      	pop	{r4, r5, pc}
 800ec4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec52:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ec56:	2d19      	cmp	r5, #25
 800ec58:	bf98      	it	ls
 800ec5a:	3220      	addls	r2, #32
 800ec5c:	42a2      	cmp	r2, r4
 800ec5e:	d0f0      	beq.n	800ec42 <__match+0x6>
 800ec60:	2000      	movs	r0, #0
 800ec62:	e7f3      	b.n	800ec4c <__match+0x10>

0800ec64 <__hexnan>:
 800ec64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec68:	680b      	ldr	r3, [r1, #0]
 800ec6a:	6801      	ldr	r1, [r0, #0]
 800ec6c:	115e      	asrs	r6, r3, #5
 800ec6e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ec72:	f013 031f 	ands.w	r3, r3, #31
 800ec76:	b087      	sub	sp, #28
 800ec78:	bf18      	it	ne
 800ec7a:	3604      	addne	r6, #4
 800ec7c:	2500      	movs	r5, #0
 800ec7e:	1f37      	subs	r7, r6, #4
 800ec80:	4682      	mov	sl, r0
 800ec82:	4690      	mov	r8, r2
 800ec84:	9301      	str	r3, [sp, #4]
 800ec86:	f846 5c04 	str.w	r5, [r6, #-4]
 800ec8a:	46b9      	mov	r9, r7
 800ec8c:	463c      	mov	r4, r7
 800ec8e:	9502      	str	r5, [sp, #8]
 800ec90:	46ab      	mov	fp, r5
 800ec92:	784a      	ldrb	r2, [r1, #1]
 800ec94:	1c4b      	adds	r3, r1, #1
 800ec96:	9303      	str	r3, [sp, #12]
 800ec98:	b342      	cbz	r2, 800ecec <__hexnan+0x88>
 800ec9a:	4610      	mov	r0, r2
 800ec9c:	9105      	str	r1, [sp, #20]
 800ec9e:	9204      	str	r2, [sp, #16]
 800eca0:	f7ff fd5e 	bl	800e760 <__hexdig_fun>
 800eca4:	2800      	cmp	r0, #0
 800eca6:	d14f      	bne.n	800ed48 <__hexnan+0xe4>
 800eca8:	9a04      	ldr	r2, [sp, #16]
 800ecaa:	9905      	ldr	r1, [sp, #20]
 800ecac:	2a20      	cmp	r2, #32
 800ecae:	d818      	bhi.n	800ece2 <__hexnan+0x7e>
 800ecb0:	9b02      	ldr	r3, [sp, #8]
 800ecb2:	459b      	cmp	fp, r3
 800ecb4:	dd13      	ble.n	800ecde <__hexnan+0x7a>
 800ecb6:	454c      	cmp	r4, r9
 800ecb8:	d206      	bcs.n	800ecc8 <__hexnan+0x64>
 800ecba:	2d07      	cmp	r5, #7
 800ecbc:	dc04      	bgt.n	800ecc8 <__hexnan+0x64>
 800ecbe:	462a      	mov	r2, r5
 800ecc0:	4649      	mov	r1, r9
 800ecc2:	4620      	mov	r0, r4
 800ecc4:	f7ff ffa8 	bl	800ec18 <L_shift>
 800ecc8:	4544      	cmp	r4, r8
 800ecca:	d950      	bls.n	800ed6e <__hexnan+0x10a>
 800eccc:	2300      	movs	r3, #0
 800ecce:	f1a4 0904 	sub.w	r9, r4, #4
 800ecd2:	f844 3c04 	str.w	r3, [r4, #-4]
 800ecd6:	f8cd b008 	str.w	fp, [sp, #8]
 800ecda:	464c      	mov	r4, r9
 800ecdc:	461d      	mov	r5, r3
 800ecde:	9903      	ldr	r1, [sp, #12]
 800ece0:	e7d7      	b.n	800ec92 <__hexnan+0x2e>
 800ece2:	2a29      	cmp	r2, #41	; 0x29
 800ece4:	d156      	bne.n	800ed94 <__hexnan+0x130>
 800ece6:	3102      	adds	r1, #2
 800ece8:	f8ca 1000 	str.w	r1, [sl]
 800ecec:	f1bb 0f00 	cmp.w	fp, #0
 800ecf0:	d050      	beq.n	800ed94 <__hexnan+0x130>
 800ecf2:	454c      	cmp	r4, r9
 800ecf4:	d206      	bcs.n	800ed04 <__hexnan+0xa0>
 800ecf6:	2d07      	cmp	r5, #7
 800ecf8:	dc04      	bgt.n	800ed04 <__hexnan+0xa0>
 800ecfa:	462a      	mov	r2, r5
 800ecfc:	4649      	mov	r1, r9
 800ecfe:	4620      	mov	r0, r4
 800ed00:	f7ff ff8a 	bl	800ec18 <L_shift>
 800ed04:	4544      	cmp	r4, r8
 800ed06:	d934      	bls.n	800ed72 <__hexnan+0x10e>
 800ed08:	f1a8 0204 	sub.w	r2, r8, #4
 800ed0c:	4623      	mov	r3, r4
 800ed0e:	f853 1b04 	ldr.w	r1, [r3], #4
 800ed12:	f842 1f04 	str.w	r1, [r2, #4]!
 800ed16:	429f      	cmp	r7, r3
 800ed18:	d2f9      	bcs.n	800ed0e <__hexnan+0xaa>
 800ed1a:	1b3b      	subs	r3, r7, r4
 800ed1c:	f023 0303 	bic.w	r3, r3, #3
 800ed20:	3304      	adds	r3, #4
 800ed22:	3401      	adds	r4, #1
 800ed24:	3e03      	subs	r6, #3
 800ed26:	42b4      	cmp	r4, r6
 800ed28:	bf88      	it	hi
 800ed2a:	2304      	movhi	r3, #4
 800ed2c:	4443      	add	r3, r8
 800ed2e:	2200      	movs	r2, #0
 800ed30:	f843 2b04 	str.w	r2, [r3], #4
 800ed34:	429f      	cmp	r7, r3
 800ed36:	d2fb      	bcs.n	800ed30 <__hexnan+0xcc>
 800ed38:	683b      	ldr	r3, [r7, #0]
 800ed3a:	b91b      	cbnz	r3, 800ed44 <__hexnan+0xe0>
 800ed3c:	4547      	cmp	r7, r8
 800ed3e:	d127      	bne.n	800ed90 <__hexnan+0x12c>
 800ed40:	2301      	movs	r3, #1
 800ed42:	603b      	str	r3, [r7, #0]
 800ed44:	2005      	movs	r0, #5
 800ed46:	e026      	b.n	800ed96 <__hexnan+0x132>
 800ed48:	3501      	adds	r5, #1
 800ed4a:	2d08      	cmp	r5, #8
 800ed4c:	f10b 0b01 	add.w	fp, fp, #1
 800ed50:	dd06      	ble.n	800ed60 <__hexnan+0xfc>
 800ed52:	4544      	cmp	r4, r8
 800ed54:	d9c3      	bls.n	800ecde <__hexnan+0x7a>
 800ed56:	2300      	movs	r3, #0
 800ed58:	f844 3c04 	str.w	r3, [r4, #-4]
 800ed5c:	2501      	movs	r5, #1
 800ed5e:	3c04      	subs	r4, #4
 800ed60:	6822      	ldr	r2, [r4, #0]
 800ed62:	f000 000f 	and.w	r0, r0, #15
 800ed66:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ed6a:	6022      	str	r2, [r4, #0]
 800ed6c:	e7b7      	b.n	800ecde <__hexnan+0x7a>
 800ed6e:	2508      	movs	r5, #8
 800ed70:	e7b5      	b.n	800ecde <__hexnan+0x7a>
 800ed72:	9b01      	ldr	r3, [sp, #4]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d0df      	beq.n	800ed38 <__hexnan+0xd4>
 800ed78:	f04f 32ff 	mov.w	r2, #4294967295
 800ed7c:	f1c3 0320 	rsb	r3, r3, #32
 800ed80:	fa22 f303 	lsr.w	r3, r2, r3
 800ed84:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ed88:	401a      	ands	r2, r3
 800ed8a:	f846 2c04 	str.w	r2, [r6, #-4]
 800ed8e:	e7d3      	b.n	800ed38 <__hexnan+0xd4>
 800ed90:	3f04      	subs	r7, #4
 800ed92:	e7d1      	b.n	800ed38 <__hexnan+0xd4>
 800ed94:	2004      	movs	r0, #4
 800ed96:	b007      	add	sp, #28
 800ed98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ed9c <_localeconv_r>:
 800ed9c:	4800      	ldr	r0, [pc, #0]	; (800eda0 <_localeconv_r+0x4>)
 800ed9e:	4770      	bx	lr
 800eda0:	20000178 	.word	0x20000178

0800eda4 <malloc>:
 800eda4:	4b02      	ldr	r3, [pc, #8]	; (800edb0 <malloc+0xc>)
 800eda6:	4601      	mov	r1, r0
 800eda8:	6818      	ldr	r0, [r3, #0]
 800edaa:	f000 bd2f 	b.w	800f80c <_malloc_r>
 800edae:	bf00      	nop
 800edb0:	20000020 	.word	0x20000020

0800edb4 <__ascii_mbtowc>:
 800edb4:	b082      	sub	sp, #8
 800edb6:	b901      	cbnz	r1, 800edba <__ascii_mbtowc+0x6>
 800edb8:	a901      	add	r1, sp, #4
 800edba:	b142      	cbz	r2, 800edce <__ascii_mbtowc+0x1a>
 800edbc:	b14b      	cbz	r3, 800edd2 <__ascii_mbtowc+0x1e>
 800edbe:	7813      	ldrb	r3, [r2, #0]
 800edc0:	600b      	str	r3, [r1, #0]
 800edc2:	7812      	ldrb	r2, [r2, #0]
 800edc4:	1e10      	subs	r0, r2, #0
 800edc6:	bf18      	it	ne
 800edc8:	2001      	movne	r0, #1
 800edca:	b002      	add	sp, #8
 800edcc:	4770      	bx	lr
 800edce:	4610      	mov	r0, r2
 800edd0:	e7fb      	b.n	800edca <__ascii_mbtowc+0x16>
 800edd2:	f06f 0001 	mvn.w	r0, #1
 800edd6:	e7f8      	b.n	800edca <__ascii_mbtowc+0x16>

0800edd8 <_Balloc>:
 800edd8:	b570      	push	{r4, r5, r6, lr}
 800edda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800eddc:	4604      	mov	r4, r0
 800edde:	460d      	mov	r5, r1
 800ede0:	b976      	cbnz	r6, 800ee00 <_Balloc+0x28>
 800ede2:	2010      	movs	r0, #16
 800ede4:	f7ff ffde 	bl	800eda4 <malloc>
 800ede8:	4602      	mov	r2, r0
 800edea:	6260      	str	r0, [r4, #36]	; 0x24
 800edec:	b920      	cbnz	r0, 800edf8 <_Balloc+0x20>
 800edee:	4b18      	ldr	r3, [pc, #96]	; (800ee50 <_Balloc+0x78>)
 800edf0:	4818      	ldr	r0, [pc, #96]	; (800ee54 <_Balloc+0x7c>)
 800edf2:	2166      	movs	r1, #102	; 0x66
 800edf4:	f7fe fdba 	bl	800d96c <__assert_func>
 800edf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800edfc:	6006      	str	r6, [r0, #0]
 800edfe:	60c6      	str	r6, [r0, #12]
 800ee00:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ee02:	68f3      	ldr	r3, [r6, #12]
 800ee04:	b183      	cbz	r3, 800ee28 <_Balloc+0x50>
 800ee06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ee08:	68db      	ldr	r3, [r3, #12]
 800ee0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ee0e:	b9b8      	cbnz	r0, 800ee40 <_Balloc+0x68>
 800ee10:	2101      	movs	r1, #1
 800ee12:	fa01 f605 	lsl.w	r6, r1, r5
 800ee16:	1d72      	adds	r2, r6, #5
 800ee18:	0092      	lsls	r2, r2, #2
 800ee1a:	4620      	mov	r0, r4
 800ee1c:	f000 fc97 	bl	800f74e <_calloc_r>
 800ee20:	b160      	cbz	r0, 800ee3c <_Balloc+0x64>
 800ee22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ee26:	e00e      	b.n	800ee46 <_Balloc+0x6e>
 800ee28:	2221      	movs	r2, #33	; 0x21
 800ee2a:	2104      	movs	r1, #4
 800ee2c:	4620      	mov	r0, r4
 800ee2e:	f000 fc8e 	bl	800f74e <_calloc_r>
 800ee32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ee34:	60f0      	str	r0, [r6, #12]
 800ee36:	68db      	ldr	r3, [r3, #12]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d1e4      	bne.n	800ee06 <_Balloc+0x2e>
 800ee3c:	2000      	movs	r0, #0
 800ee3e:	bd70      	pop	{r4, r5, r6, pc}
 800ee40:	6802      	ldr	r2, [r0, #0]
 800ee42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ee46:	2300      	movs	r3, #0
 800ee48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ee4c:	e7f7      	b.n	800ee3e <_Balloc+0x66>
 800ee4e:	bf00      	nop
 800ee50:	08010b58 	.word	0x08010b58
 800ee54:	08010e08 	.word	0x08010e08

0800ee58 <_Bfree>:
 800ee58:	b570      	push	{r4, r5, r6, lr}
 800ee5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ee5c:	4605      	mov	r5, r0
 800ee5e:	460c      	mov	r4, r1
 800ee60:	b976      	cbnz	r6, 800ee80 <_Bfree+0x28>
 800ee62:	2010      	movs	r0, #16
 800ee64:	f7ff ff9e 	bl	800eda4 <malloc>
 800ee68:	4602      	mov	r2, r0
 800ee6a:	6268      	str	r0, [r5, #36]	; 0x24
 800ee6c:	b920      	cbnz	r0, 800ee78 <_Bfree+0x20>
 800ee6e:	4b09      	ldr	r3, [pc, #36]	; (800ee94 <_Bfree+0x3c>)
 800ee70:	4809      	ldr	r0, [pc, #36]	; (800ee98 <_Bfree+0x40>)
 800ee72:	218a      	movs	r1, #138	; 0x8a
 800ee74:	f7fe fd7a 	bl	800d96c <__assert_func>
 800ee78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ee7c:	6006      	str	r6, [r0, #0]
 800ee7e:	60c6      	str	r6, [r0, #12]
 800ee80:	b13c      	cbz	r4, 800ee92 <_Bfree+0x3a>
 800ee82:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ee84:	6862      	ldr	r2, [r4, #4]
 800ee86:	68db      	ldr	r3, [r3, #12]
 800ee88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ee8c:	6021      	str	r1, [r4, #0]
 800ee8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ee92:	bd70      	pop	{r4, r5, r6, pc}
 800ee94:	08010b58 	.word	0x08010b58
 800ee98:	08010e08 	.word	0x08010e08

0800ee9c <__multadd>:
 800ee9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eea0:	690e      	ldr	r6, [r1, #16]
 800eea2:	4607      	mov	r7, r0
 800eea4:	4698      	mov	r8, r3
 800eea6:	460c      	mov	r4, r1
 800eea8:	f101 0014 	add.w	r0, r1, #20
 800eeac:	2300      	movs	r3, #0
 800eeae:	6805      	ldr	r5, [r0, #0]
 800eeb0:	b2a9      	uxth	r1, r5
 800eeb2:	fb02 8101 	mla	r1, r2, r1, r8
 800eeb6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800eeba:	0c2d      	lsrs	r5, r5, #16
 800eebc:	fb02 c505 	mla	r5, r2, r5, ip
 800eec0:	b289      	uxth	r1, r1
 800eec2:	3301      	adds	r3, #1
 800eec4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800eec8:	429e      	cmp	r6, r3
 800eeca:	f840 1b04 	str.w	r1, [r0], #4
 800eece:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800eed2:	dcec      	bgt.n	800eeae <__multadd+0x12>
 800eed4:	f1b8 0f00 	cmp.w	r8, #0
 800eed8:	d022      	beq.n	800ef20 <__multadd+0x84>
 800eeda:	68a3      	ldr	r3, [r4, #8]
 800eedc:	42b3      	cmp	r3, r6
 800eede:	dc19      	bgt.n	800ef14 <__multadd+0x78>
 800eee0:	6861      	ldr	r1, [r4, #4]
 800eee2:	4638      	mov	r0, r7
 800eee4:	3101      	adds	r1, #1
 800eee6:	f7ff ff77 	bl	800edd8 <_Balloc>
 800eeea:	4605      	mov	r5, r0
 800eeec:	b928      	cbnz	r0, 800eefa <__multadd+0x5e>
 800eeee:	4602      	mov	r2, r0
 800eef0:	4b0d      	ldr	r3, [pc, #52]	; (800ef28 <__multadd+0x8c>)
 800eef2:	480e      	ldr	r0, [pc, #56]	; (800ef2c <__multadd+0x90>)
 800eef4:	21b5      	movs	r1, #181	; 0xb5
 800eef6:	f7fe fd39 	bl	800d96c <__assert_func>
 800eefa:	6922      	ldr	r2, [r4, #16]
 800eefc:	3202      	adds	r2, #2
 800eefe:	f104 010c 	add.w	r1, r4, #12
 800ef02:	0092      	lsls	r2, r2, #2
 800ef04:	300c      	adds	r0, #12
 800ef06:	f7fc ff15 	bl	800bd34 <memcpy>
 800ef0a:	4621      	mov	r1, r4
 800ef0c:	4638      	mov	r0, r7
 800ef0e:	f7ff ffa3 	bl	800ee58 <_Bfree>
 800ef12:	462c      	mov	r4, r5
 800ef14:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ef18:	3601      	adds	r6, #1
 800ef1a:	f8c3 8014 	str.w	r8, [r3, #20]
 800ef1e:	6126      	str	r6, [r4, #16]
 800ef20:	4620      	mov	r0, r4
 800ef22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef26:	bf00      	nop
 800ef28:	08010d79 	.word	0x08010d79
 800ef2c:	08010e08 	.word	0x08010e08

0800ef30 <__s2b>:
 800ef30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef34:	460c      	mov	r4, r1
 800ef36:	4615      	mov	r5, r2
 800ef38:	461f      	mov	r7, r3
 800ef3a:	2209      	movs	r2, #9
 800ef3c:	3308      	adds	r3, #8
 800ef3e:	4606      	mov	r6, r0
 800ef40:	fb93 f3f2 	sdiv	r3, r3, r2
 800ef44:	2100      	movs	r1, #0
 800ef46:	2201      	movs	r2, #1
 800ef48:	429a      	cmp	r2, r3
 800ef4a:	db09      	blt.n	800ef60 <__s2b+0x30>
 800ef4c:	4630      	mov	r0, r6
 800ef4e:	f7ff ff43 	bl	800edd8 <_Balloc>
 800ef52:	b940      	cbnz	r0, 800ef66 <__s2b+0x36>
 800ef54:	4602      	mov	r2, r0
 800ef56:	4b19      	ldr	r3, [pc, #100]	; (800efbc <__s2b+0x8c>)
 800ef58:	4819      	ldr	r0, [pc, #100]	; (800efc0 <__s2b+0x90>)
 800ef5a:	21ce      	movs	r1, #206	; 0xce
 800ef5c:	f7fe fd06 	bl	800d96c <__assert_func>
 800ef60:	0052      	lsls	r2, r2, #1
 800ef62:	3101      	adds	r1, #1
 800ef64:	e7f0      	b.n	800ef48 <__s2b+0x18>
 800ef66:	9b08      	ldr	r3, [sp, #32]
 800ef68:	6143      	str	r3, [r0, #20]
 800ef6a:	2d09      	cmp	r5, #9
 800ef6c:	f04f 0301 	mov.w	r3, #1
 800ef70:	6103      	str	r3, [r0, #16]
 800ef72:	dd16      	ble.n	800efa2 <__s2b+0x72>
 800ef74:	f104 0909 	add.w	r9, r4, #9
 800ef78:	46c8      	mov	r8, r9
 800ef7a:	442c      	add	r4, r5
 800ef7c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ef80:	4601      	mov	r1, r0
 800ef82:	3b30      	subs	r3, #48	; 0x30
 800ef84:	220a      	movs	r2, #10
 800ef86:	4630      	mov	r0, r6
 800ef88:	f7ff ff88 	bl	800ee9c <__multadd>
 800ef8c:	45a0      	cmp	r8, r4
 800ef8e:	d1f5      	bne.n	800ef7c <__s2b+0x4c>
 800ef90:	f1a5 0408 	sub.w	r4, r5, #8
 800ef94:	444c      	add	r4, r9
 800ef96:	1b2d      	subs	r5, r5, r4
 800ef98:	1963      	adds	r3, r4, r5
 800ef9a:	42bb      	cmp	r3, r7
 800ef9c:	db04      	blt.n	800efa8 <__s2b+0x78>
 800ef9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800efa2:	340a      	adds	r4, #10
 800efa4:	2509      	movs	r5, #9
 800efa6:	e7f6      	b.n	800ef96 <__s2b+0x66>
 800efa8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800efac:	4601      	mov	r1, r0
 800efae:	3b30      	subs	r3, #48	; 0x30
 800efb0:	220a      	movs	r2, #10
 800efb2:	4630      	mov	r0, r6
 800efb4:	f7ff ff72 	bl	800ee9c <__multadd>
 800efb8:	e7ee      	b.n	800ef98 <__s2b+0x68>
 800efba:	bf00      	nop
 800efbc:	08010d79 	.word	0x08010d79
 800efc0:	08010e08 	.word	0x08010e08

0800efc4 <__hi0bits>:
 800efc4:	0c03      	lsrs	r3, r0, #16
 800efc6:	041b      	lsls	r3, r3, #16
 800efc8:	b9d3      	cbnz	r3, 800f000 <__hi0bits+0x3c>
 800efca:	0400      	lsls	r0, r0, #16
 800efcc:	2310      	movs	r3, #16
 800efce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800efd2:	bf04      	itt	eq
 800efd4:	0200      	lsleq	r0, r0, #8
 800efd6:	3308      	addeq	r3, #8
 800efd8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800efdc:	bf04      	itt	eq
 800efde:	0100      	lsleq	r0, r0, #4
 800efe0:	3304      	addeq	r3, #4
 800efe2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800efe6:	bf04      	itt	eq
 800efe8:	0080      	lsleq	r0, r0, #2
 800efea:	3302      	addeq	r3, #2
 800efec:	2800      	cmp	r0, #0
 800efee:	db05      	blt.n	800effc <__hi0bits+0x38>
 800eff0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800eff4:	f103 0301 	add.w	r3, r3, #1
 800eff8:	bf08      	it	eq
 800effa:	2320      	moveq	r3, #32
 800effc:	4618      	mov	r0, r3
 800effe:	4770      	bx	lr
 800f000:	2300      	movs	r3, #0
 800f002:	e7e4      	b.n	800efce <__hi0bits+0xa>

0800f004 <__lo0bits>:
 800f004:	6803      	ldr	r3, [r0, #0]
 800f006:	f013 0207 	ands.w	r2, r3, #7
 800f00a:	4601      	mov	r1, r0
 800f00c:	d00b      	beq.n	800f026 <__lo0bits+0x22>
 800f00e:	07da      	lsls	r2, r3, #31
 800f010:	d424      	bmi.n	800f05c <__lo0bits+0x58>
 800f012:	0798      	lsls	r0, r3, #30
 800f014:	bf49      	itett	mi
 800f016:	085b      	lsrmi	r3, r3, #1
 800f018:	089b      	lsrpl	r3, r3, #2
 800f01a:	2001      	movmi	r0, #1
 800f01c:	600b      	strmi	r3, [r1, #0]
 800f01e:	bf5c      	itt	pl
 800f020:	600b      	strpl	r3, [r1, #0]
 800f022:	2002      	movpl	r0, #2
 800f024:	4770      	bx	lr
 800f026:	b298      	uxth	r0, r3
 800f028:	b9b0      	cbnz	r0, 800f058 <__lo0bits+0x54>
 800f02a:	0c1b      	lsrs	r3, r3, #16
 800f02c:	2010      	movs	r0, #16
 800f02e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f032:	bf04      	itt	eq
 800f034:	0a1b      	lsreq	r3, r3, #8
 800f036:	3008      	addeq	r0, #8
 800f038:	071a      	lsls	r2, r3, #28
 800f03a:	bf04      	itt	eq
 800f03c:	091b      	lsreq	r3, r3, #4
 800f03e:	3004      	addeq	r0, #4
 800f040:	079a      	lsls	r2, r3, #30
 800f042:	bf04      	itt	eq
 800f044:	089b      	lsreq	r3, r3, #2
 800f046:	3002      	addeq	r0, #2
 800f048:	07da      	lsls	r2, r3, #31
 800f04a:	d403      	bmi.n	800f054 <__lo0bits+0x50>
 800f04c:	085b      	lsrs	r3, r3, #1
 800f04e:	f100 0001 	add.w	r0, r0, #1
 800f052:	d005      	beq.n	800f060 <__lo0bits+0x5c>
 800f054:	600b      	str	r3, [r1, #0]
 800f056:	4770      	bx	lr
 800f058:	4610      	mov	r0, r2
 800f05a:	e7e8      	b.n	800f02e <__lo0bits+0x2a>
 800f05c:	2000      	movs	r0, #0
 800f05e:	4770      	bx	lr
 800f060:	2020      	movs	r0, #32
 800f062:	4770      	bx	lr

0800f064 <__i2b>:
 800f064:	b510      	push	{r4, lr}
 800f066:	460c      	mov	r4, r1
 800f068:	2101      	movs	r1, #1
 800f06a:	f7ff feb5 	bl	800edd8 <_Balloc>
 800f06e:	4602      	mov	r2, r0
 800f070:	b928      	cbnz	r0, 800f07e <__i2b+0x1a>
 800f072:	4b05      	ldr	r3, [pc, #20]	; (800f088 <__i2b+0x24>)
 800f074:	4805      	ldr	r0, [pc, #20]	; (800f08c <__i2b+0x28>)
 800f076:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f07a:	f7fe fc77 	bl	800d96c <__assert_func>
 800f07e:	2301      	movs	r3, #1
 800f080:	6144      	str	r4, [r0, #20]
 800f082:	6103      	str	r3, [r0, #16]
 800f084:	bd10      	pop	{r4, pc}
 800f086:	bf00      	nop
 800f088:	08010d79 	.word	0x08010d79
 800f08c:	08010e08 	.word	0x08010e08

0800f090 <__multiply>:
 800f090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f094:	4614      	mov	r4, r2
 800f096:	690a      	ldr	r2, [r1, #16]
 800f098:	6923      	ldr	r3, [r4, #16]
 800f09a:	429a      	cmp	r2, r3
 800f09c:	bfb8      	it	lt
 800f09e:	460b      	movlt	r3, r1
 800f0a0:	460d      	mov	r5, r1
 800f0a2:	bfbc      	itt	lt
 800f0a4:	4625      	movlt	r5, r4
 800f0a6:	461c      	movlt	r4, r3
 800f0a8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800f0ac:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f0b0:	68ab      	ldr	r3, [r5, #8]
 800f0b2:	6869      	ldr	r1, [r5, #4]
 800f0b4:	eb0a 0709 	add.w	r7, sl, r9
 800f0b8:	42bb      	cmp	r3, r7
 800f0ba:	b085      	sub	sp, #20
 800f0bc:	bfb8      	it	lt
 800f0be:	3101      	addlt	r1, #1
 800f0c0:	f7ff fe8a 	bl	800edd8 <_Balloc>
 800f0c4:	b930      	cbnz	r0, 800f0d4 <__multiply+0x44>
 800f0c6:	4602      	mov	r2, r0
 800f0c8:	4b42      	ldr	r3, [pc, #264]	; (800f1d4 <__multiply+0x144>)
 800f0ca:	4843      	ldr	r0, [pc, #268]	; (800f1d8 <__multiply+0x148>)
 800f0cc:	f240 115d 	movw	r1, #349	; 0x15d
 800f0d0:	f7fe fc4c 	bl	800d96c <__assert_func>
 800f0d4:	f100 0614 	add.w	r6, r0, #20
 800f0d8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800f0dc:	4633      	mov	r3, r6
 800f0de:	2200      	movs	r2, #0
 800f0e0:	4543      	cmp	r3, r8
 800f0e2:	d31e      	bcc.n	800f122 <__multiply+0x92>
 800f0e4:	f105 0c14 	add.w	ip, r5, #20
 800f0e8:	f104 0314 	add.w	r3, r4, #20
 800f0ec:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800f0f0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800f0f4:	9202      	str	r2, [sp, #8]
 800f0f6:	ebac 0205 	sub.w	r2, ip, r5
 800f0fa:	3a15      	subs	r2, #21
 800f0fc:	f022 0203 	bic.w	r2, r2, #3
 800f100:	3204      	adds	r2, #4
 800f102:	f105 0115 	add.w	r1, r5, #21
 800f106:	458c      	cmp	ip, r1
 800f108:	bf38      	it	cc
 800f10a:	2204      	movcc	r2, #4
 800f10c:	9201      	str	r2, [sp, #4]
 800f10e:	9a02      	ldr	r2, [sp, #8]
 800f110:	9303      	str	r3, [sp, #12]
 800f112:	429a      	cmp	r2, r3
 800f114:	d808      	bhi.n	800f128 <__multiply+0x98>
 800f116:	2f00      	cmp	r7, #0
 800f118:	dc55      	bgt.n	800f1c6 <__multiply+0x136>
 800f11a:	6107      	str	r7, [r0, #16]
 800f11c:	b005      	add	sp, #20
 800f11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f122:	f843 2b04 	str.w	r2, [r3], #4
 800f126:	e7db      	b.n	800f0e0 <__multiply+0x50>
 800f128:	f8b3 a000 	ldrh.w	sl, [r3]
 800f12c:	f1ba 0f00 	cmp.w	sl, #0
 800f130:	d020      	beq.n	800f174 <__multiply+0xe4>
 800f132:	f105 0e14 	add.w	lr, r5, #20
 800f136:	46b1      	mov	r9, r6
 800f138:	2200      	movs	r2, #0
 800f13a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800f13e:	f8d9 b000 	ldr.w	fp, [r9]
 800f142:	b2a1      	uxth	r1, r4
 800f144:	fa1f fb8b 	uxth.w	fp, fp
 800f148:	fb0a b101 	mla	r1, sl, r1, fp
 800f14c:	4411      	add	r1, r2
 800f14e:	f8d9 2000 	ldr.w	r2, [r9]
 800f152:	0c24      	lsrs	r4, r4, #16
 800f154:	0c12      	lsrs	r2, r2, #16
 800f156:	fb0a 2404 	mla	r4, sl, r4, r2
 800f15a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800f15e:	b289      	uxth	r1, r1
 800f160:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800f164:	45f4      	cmp	ip, lr
 800f166:	f849 1b04 	str.w	r1, [r9], #4
 800f16a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800f16e:	d8e4      	bhi.n	800f13a <__multiply+0xaa>
 800f170:	9901      	ldr	r1, [sp, #4]
 800f172:	5072      	str	r2, [r6, r1]
 800f174:	9a03      	ldr	r2, [sp, #12]
 800f176:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f17a:	3304      	adds	r3, #4
 800f17c:	f1b9 0f00 	cmp.w	r9, #0
 800f180:	d01f      	beq.n	800f1c2 <__multiply+0x132>
 800f182:	6834      	ldr	r4, [r6, #0]
 800f184:	f105 0114 	add.w	r1, r5, #20
 800f188:	46b6      	mov	lr, r6
 800f18a:	f04f 0a00 	mov.w	sl, #0
 800f18e:	880a      	ldrh	r2, [r1, #0]
 800f190:	f8be b002 	ldrh.w	fp, [lr, #2]
 800f194:	fb09 b202 	mla	r2, r9, r2, fp
 800f198:	4492      	add	sl, r2
 800f19a:	b2a4      	uxth	r4, r4
 800f19c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800f1a0:	f84e 4b04 	str.w	r4, [lr], #4
 800f1a4:	f851 4b04 	ldr.w	r4, [r1], #4
 800f1a8:	f8be 2000 	ldrh.w	r2, [lr]
 800f1ac:	0c24      	lsrs	r4, r4, #16
 800f1ae:	fb09 2404 	mla	r4, r9, r4, r2
 800f1b2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800f1b6:	458c      	cmp	ip, r1
 800f1b8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f1bc:	d8e7      	bhi.n	800f18e <__multiply+0xfe>
 800f1be:	9a01      	ldr	r2, [sp, #4]
 800f1c0:	50b4      	str	r4, [r6, r2]
 800f1c2:	3604      	adds	r6, #4
 800f1c4:	e7a3      	b.n	800f10e <__multiply+0x7e>
 800f1c6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d1a5      	bne.n	800f11a <__multiply+0x8a>
 800f1ce:	3f01      	subs	r7, #1
 800f1d0:	e7a1      	b.n	800f116 <__multiply+0x86>
 800f1d2:	bf00      	nop
 800f1d4:	08010d79 	.word	0x08010d79
 800f1d8:	08010e08 	.word	0x08010e08

0800f1dc <__pow5mult>:
 800f1dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1e0:	4615      	mov	r5, r2
 800f1e2:	f012 0203 	ands.w	r2, r2, #3
 800f1e6:	4606      	mov	r6, r0
 800f1e8:	460f      	mov	r7, r1
 800f1ea:	d007      	beq.n	800f1fc <__pow5mult+0x20>
 800f1ec:	4c25      	ldr	r4, [pc, #148]	; (800f284 <__pow5mult+0xa8>)
 800f1ee:	3a01      	subs	r2, #1
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f1f6:	f7ff fe51 	bl	800ee9c <__multadd>
 800f1fa:	4607      	mov	r7, r0
 800f1fc:	10ad      	asrs	r5, r5, #2
 800f1fe:	d03d      	beq.n	800f27c <__pow5mult+0xa0>
 800f200:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f202:	b97c      	cbnz	r4, 800f224 <__pow5mult+0x48>
 800f204:	2010      	movs	r0, #16
 800f206:	f7ff fdcd 	bl	800eda4 <malloc>
 800f20a:	4602      	mov	r2, r0
 800f20c:	6270      	str	r0, [r6, #36]	; 0x24
 800f20e:	b928      	cbnz	r0, 800f21c <__pow5mult+0x40>
 800f210:	4b1d      	ldr	r3, [pc, #116]	; (800f288 <__pow5mult+0xac>)
 800f212:	481e      	ldr	r0, [pc, #120]	; (800f28c <__pow5mult+0xb0>)
 800f214:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f218:	f7fe fba8 	bl	800d96c <__assert_func>
 800f21c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f220:	6004      	str	r4, [r0, #0]
 800f222:	60c4      	str	r4, [r0, #12]
 800f224:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f228:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f22c:	b94c      	cbnz	r4, 800f242 <__pow5mult+0x66>
 800f22e:	f240 2171 	movw	r1, #625	; 0x271
 800f232:	4630      	mov	r0, r6
 800f234:	f7ff ff16 	bl	800f064 <__i2b>
 800f238:	2300      	movs	r3, #0
 800f23a:	f8c8 0008 	str.w	r0, [r8, #8]
 800f23e:	4604      	mov	r4, r0
 800f240:	6003      	str	r3, [r0, #0]
 800f242:	f04f 0900 	mov.w	r9, #0
 800f246:	07eb      	lsls	r3, r5, #31
 800f248:	d50a      	bpl.n	800f260 <__pow5mult+0x84>
 800f24a:	4639      	mov	r1, r7
 800f24c:	4622      	mov	r2, r4
 800f24e:	4630      	mov	r0, r6
 800f250:	f7ff ff1e 	bl	800f090 <__multiply>
 800f254:	4639      	mov	r1, r7
 800f256:	4680      	mov	r8, r0
 800f258:	4630      	mov	r0, r6
 800f25a:	f7ff fdfd 	bl	800ee58 <_Bfree>
 800f25e:	4647      	mov	r7, r8
 800f260:	106d      	asrs	r5, r5, #1
 800f262:	d00b      	beq.n	800f27c <__pow5mult+0xa0>
 800f264:	6820      	ldr	r0, [r4, #0]
 800f266:	b938      	cbnz	r0, 800f278 <__pow5mult+0x9c>
 800f268:	4622      	mov	r2, r4
 800f26a:	4621      	mov	r1, r4
 800f26c:	4630      	mov	r0, r6
 800f26e:	f7ff ff0f 	bl	800f090 <__multiply>
 800f272:	6020      	str	r0, [r4, #0]
 800f274:	f8c0 9000 	str.w	r9, [r0]
 800f278:	4604      	mov	r4, r0
 800f27a:	e7e4      	b.n	800f246 <__pow5mult+0x6a>
 800f27c:	4638      	mov	r0, r7
 800f27e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f282:	bf00      	nop
 800f284:	08010f58 	.word	0x08010f58
 800f288:	08010b58 	.word	0x08010b58
 800f28c:	08010e08 	.word	0x08010e08

0800f290 <__lshift>:
 800f290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f294:	460c      	mov	r4, r1
 800f296:	6849      	ldr	r1, [r1, #4]
 800f298:	6923      	ldr	r3, [r4, #16]
 800f29a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f29e:	68a3      	ldr	r3, [r4, #8]
 800f2a0:	4607      	mov	r7, r0
 800f2a2:	4691      	mov	r9, r2
 800f2a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f2a8:	f108 0601 	add.w	r6, r8, #1
 800f2ac:	42b3      	cmp	r3, r6
 800f2ae:	db0b      	blt.n	800f2c8 <__lshift+0x38>
 800f2b0:	4638      	mov	r0, r7
 800f2b2:	f7ff fd91 	bl	800edd8 <_Balloc>
 800f2b6:	4605      	mov	r5, r0
 800f2b8:	b948      	cbnz	r0, 800f2ce <__lshift+0x3e>
 800f2ba:	4602      	mov	r2, r0
 800f2bc:	4b28      	ldr	r3, [pc, #160]	; (800f360 <__lshift+0xd0>)
 800f2be:	4829      	ldr	r0, [pc, #164]	; (800f364 <__lshift+0xd4>)
 800f2c0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f2c4:	f7fe fb52 	bl	800d96c <__assert_func>
 800f2c8:	3101      	adds	r1, #1
 800f2ca:	005b      	lsls	r3, r3, #1
 800f2cc:	e7ee      	b.n	800f2ac <__lshift+0x1c>
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	f100 0114 	add.w	r1, r0, #20
 800f2d4:	f100 0210 	add.w	r2, r0, #16
 800f2d8:	4618      	mov	r0, r3
 800f2da:	4553      	cmp	r3, sl
 800f2dc:	db33      	blt.n	800f346 <__lshift+0xb6>
 800f2de:	6920      	ldr	r0, [r4, #16]
 800f2e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f2e4:	f104 0314 	add.w	r3, r4, #20
 800f2e8:	f019 091f 	ands.w	r9, r9, #31
 800f2ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f2f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f2f4:	d02b      	beq.n	800f34e <__lshift+0xbe>
 800f2f6:	f1c9 0e20 	rsb	lr, r9, #32
 800f2fa:	468a      	mov	sl, r1
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	6818      	ldr	r0, [r3, #0]
 800f300:	fa00 f009 	lsl.w	r0, r0, r9
 800f304:	4302      	orrs	r2, r0
 800f306:	f84a 2b04 	str.w	r2, [sl], #4
 800f30a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f30e:	459c      	cmp	ip, r3
 800f310:	fa22 f20e 	lsr.w	r2, r2, lr
 800f314:	d8f3      	bhi.n	800f2fe <__lshift+0x6e>
 800f316:	ebac 0304 	sub.w	r3, ip, r4
 800f31a:	3b15      	subs	r3, #21
 800f31c:	f023 0303 	bic.w	r3, r3, #3
 800f320:	3304      	adds	r3, #4
 800f322:	f104 0015 	add.w	r0, r4, #21
 800f326:	4584      	cmp	ip, r0
 800f328:	bf38      	it	cc
 800f32a:	2304      	movcc	r3, #4
 800f32c:	50ca      	str	r2, [r1, r3]
 800f32e:	b10a      	cbz	r2, 800f334 <__lshift+0xa4>
 800f330:	f108 0602 	add.w	r6, r8, #2
 800f334:	3e01      	subs	r6, #1
 800f336:	4638      	mov	r0, r7
 800f338:	612e      	str	r6, [r5, #16]
 800f33a:	4621      	mov	r1, r4
 800f33c:	f7ff fd8c 	bl	800ee58 <_Bfree>
 800f340:	4628      	mov	r0, r5
 800f342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f346:	f842 0f04 	str.w	r0, [r2, #4]!
 800f34a:	3301      	adds	r3, #1
 800f34c:	e7c5      	b.n	800f2da <__lshift+0x4a>
 800f34e:	3904      	subs	r1, #4
 800f350:	f853 2b04 	ldr.w	r2, [r3], #4
 800f354:	f841 2f04 	str.w	r2, [r1, #4]!
 800f358:	459c      	cmp	ip, r3
 800f35a:	d8f9      	bhi.n	800f350 <__lshift+0xc0>
 800f35c:	e7ea      	b.n	800f334 <__lshift+0xa4>
 800f35e:	bf00      	nop
 800f360:	08010d79 	.word	0x08010d79
 800f364:	08010e08 	.word	0x08010e08

0800f368 <__mcmp>:
 800f368:	b530      	push	{r4, r5, lr}
 800f36a:	6902      	ldr	r2, [r0, #16]
 800f36c:	690c      	ldr	r4, [r1, #16]
 800f36e:	1b12      	subs	r2, r2, r4
 800f370:	d10e      	bne.n	800f390 <__mcmp+0x28>
 800f372:	f100 0314 	add.w	r3, r0, #20
 800f376:	3114      	adds	r1, #20
 800f378:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f37c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f380:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f384:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f388:	42a5      	cmp	r5, r4
 800f38a:	d003      	beq.n	800f394 <__mcmp+0x2c>
 800f38c:	d305      	bcc.n	800f39a <__mcmp+0x32>
 800f38e:	2201      	movs	r2, #1
 800f390:	4610      	mov	r0, r2
 800f392:	bd30      	pop	{r4, r5, pc}
 800f394:	4283      	cmp	r3, r0
 800f396:	d3f3      	bcc.n	800f380 <__mcmp+0x18>
 800f398:	e7fa      	b.n	800f390 <__mcmp+0x28>
 800f39a:	f04f 32ff 	mov.w	r2, #4294967295
 800f39e:	e7f7      	b.n	800f390 <__mcmp+0x28>

0800f3a0 <__mdiff>:
 800f3a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3a4:	460c      	mov	r4, r1
 800f3a6:	4606      	mov	r6, r0
 800f3a8:	4611      	mov	r1, r2
 800f3aa:	4620      	mov	r0, r4
 800f3ac:	4617      	mov	r7, r2
 800f3ae:	f7ff ffdb 	bl	800f368 <__mcmp>
 800f3b2:	1e05      	subs	r5, r0, #0
 800f3b4:	d110      	bne.n	800f3d8 <__mdiff+0x38>
 800f3b6:	4629      	mov	r1, r5
 800f3b8:	4630      	mov	r0, r6
 800f3ba:	f7ff fd0d 	bl	800edd8 <_Balloc>
 800f3be:	b930      	cbnz	r0, 800f3ce <__mdiff+0x2e>
 800f3c0:	4b39      	ldr	r3, [pc, #228]	; (800f4a8 <__mdiff+0x108>)
 800f3c2:	4602      	mov	r2, r0
 800f3c4:	f240 2132 	movw	r1, #562	; 0x232
 800f3c8:	4838      	ldr	r0, [pc, #224]	; (800f4ac <__mdiff+0x10c>)
 800f3ca:	f7fe facf 	bl	800d96c <__assert_func>
 800f3ce:	2301      	movs	r3, #1
 800f3d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f3d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3d8:	bfa4      	itt	ge
 800f3da:	463b      	movge	r3, r7
 800f3dc:	4627      	movge	r7, r4
 800f3de:	4630      	mov	r0, r6
 800f3e0:	6879      	ldr	r1, [r7, #4]
 800f3e2:	bfa6      	itte	ge
 800f3e4:	461c      	movge	r4, r3
 800f3e6:	2500      	movge	r5, #0
 800f3e8:	2501      	movlt	r5, #1
 800f3ea:	f7ff fcf5 	bl	800edd8 <_Balloc>
 800f3ee:	b920      	cbnz	r0, 800f3fa <__mdiff+0x5a>
 800f3f0:	4b2d      	ldr	r3, [pc, #180]	; (800f4a8 <__mdiff+0x108>)
 800f3f2:	4602      	mov	r2, r0
 800f3f4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f3f8:	e7e6      	b.n	800f3c8 <__mdiff+0x28>
 800f3fa:	693e      	ldr	r6, [r7, #16]
 800f3fc:	60c5      	str	r5, [r0, #12]
 800f3fe:	6925      	ldr	r5, [r4, #16]
 800f400:	f107 0114 	add.w	r1, r7, #20
 800f404:	f104 0914 	add.w	r9, r4, #20
 800f408:	f100 0e14 	add.w	lr, r0, #20
 800f40c:	f107 0210 	add.w	r2, r7, #16
 800f410:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800f414:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800f418:	46f2      	mov	sl, lr
 800f41a:	2700      	movs	r7, #0
 800f41c:	f859 3b04 	ldr.w	r3, [r9], #4
 800f420:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f424:	fa1f f883 	uxth.w	r8, r3
 800f428:	fa17 f78b 	uxtah	r7, r7, fp
 800f42c:	0c1b      	lsrs	r3, r3, #16
 800f42e:	eba7 0808 	sub.w	r8, r7, r8
 800f432:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f436:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f43a:	fa1f f888 	uxth.w	r8, r8
 800f43e:	141f      	asrs	r7, r3, #16
 800f440:	454d      	cmp	r5, r9
 800f442:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f446:	f84a 3b04 	str.w	r3, [sl], #4
 800f44a:	d8e7      	bhi.n	800f41c <__mdiff+0x7c>
 800f44c:	1b2b      	subs	r3, r5, r4
 800f44e:	3b15      	subs	r3, #21
 800f450:	f023 0303 	bic.w	r3, r3, #3
 800f454:	3304      	adds	r3, #4
 800f456:	3415      	adds	r4, #21
 800f458:	42a5      	cmp	r5, r4
 800f45a:	bf38      	it	cc
 800f45c:	2304      	movcc	r3, #4
 800f45e:	4419      	add	r1, r3
 800f460:	4473      	add	r3, lr
 800f462:	469e      	mov	lr, r3
 800f464:	460d      	mov	r5, r1
 800f466:	4565      	cmp	r5, ip
 800f468:	d30e      	bcc.n	800f488 <__mdiff+0xe8>
 800f46a:	f10c 0203 	add.w	r2, ip, #3
 800f46e:	1a52      	subs	r2, r2, r1
 800f470:	f022 0203 	bic.w	r2, r2, #3
 800f474:	3903      	subs	r1, #3
 800f476:	458c      	cmp	ip, r1
 800f478:	bf38      	it	cc
 800f47a:	2200      	movcc	r2, #0
 800f47c:	441a      	add	r2, r3
 800f47e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f482:	b17b      	cbz	r3, 800f4a4 <__mdiff+0x104>
 800f484:	6106      	str	r6, [r0, #16]
 800f486:	e7a5      	b.n	800f3d4 <__mdiff+0x34>
 800f488:	f855 8b04 	ldr.w	r8, [r5], #4
 800f48c:	fa17 f488 	uxtah	r4, r7, r8
 800f490:	1422      	asrs	r2, r4, #16
 800f492:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800f496:	b2a4      	uxth	r4, r4
 800f498:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800f49c:	f84e 4b04 	str.w	r4, [lr], #4
 800f4a0:	1417      	asrs	r7, r2, #16
 800f4a2:	e7e0      	b.n	800f466 <__mdiff+0xc6>
 800f4a4:	3e01      	subs	r6, #1
 800f4a6:	e7ea      	b.n	800f47e <__mdiff+0xde>
 800f4a8:	08010d79 	.word	0x08010d79
 800f4ac:	08010e08 	.word	0x08010e08

0800f4b0 <__ulp>:
 800f4b0:	b082      	sub	sp, #8
 800f4b2:	ed8d 0b00 	vstr	d0, [sp]
 800f4b6:	9b01      	ldr	r3, [sp, #4]
 800f4b8:	4912      	ldr	r1, [pc, #72]	; (800f504 <__ulp+0x54>)
 800f4ba:	4019      	ands	r1, r3
 800f4bc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800f4c0:	2900      	cmp	r1, #0
 800f4c2:	dd05      	ble.n	800f4d0 <__ulp+0x20>
 800f4c4:	2200      	movs	r2, #0
 800f4c6:	460b      	mov	r3, r1
 800f4c8:	ec43 2b10 	vmov	d0, r2, r3
 800f4cc:	b002      	add	sp, #8
 800f4ce:	4770      	bx	lr
 800f4d0:	4249      	negs	r1, r1
 800f4d2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800f4d6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800f4da:	f04f 0200 	mov.w	r2, #0
 800f4de:	f04f 0300 	mov.w	r3, #0
 800f4e2:	da04      	bge.n	800f4ee <__ulp+0x3e>
 800f4e4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f4e8:	fa41 f300 	asr.w	r3, r1, r0
 800f4ec:	e7ec      	b.n	800f4c8 <__ulp+0x18>
 800f4ee:	f1a0 0114 	sub.w	r1, r0, #20
 800f4f2:	291e      	cmp	r1, #30
 800f4f4:	bfda      	itte	le
 800f4f6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800f4fa:	fa20 f101 	lsrle.w	r1, r0, r1
 800f4fe:	2101      	movgt	r1, #1
 800f500:	460a      	mov	r2, r1
 800f502:	e7e1      	b.n	800f4c8 <__ulp+0x18>
 800f504:	7ff00000 	.word	0x7ff00000

0800f508 <__b2d>:
 800f508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f50a:	6905      	ldr	r5, [r0, #16]
 800f50c:	f100 0714 	add.w	r7, r0, #20
 800f510:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f514:	1f2e      	subs	r6, r5, #4
 800f516:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f51a:	4620      	mov	r0, r4
 800f51c:	f7ff fd52 	bl	800efc4 <__hi0bits>
 800f520:	f1c0 0320 	rsb	r3, r0, #32
 800f524:	280a      	cmp	r0, #10
 800f526:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f5a4 <__b2d+0x9c>
 800f52a:	600b      	str	r3, [r1, #0]
 800f52c:	dc14      	bgt.n	800f558 <__b2d+0x50>
 800f52e:	f1c0 0e0b 	rsb	lr, r0, #11
 800f532:	fa24 f10e 	lsr.w	r1, r4, lr
 800f536:	42b7      	cmp	r7, r6
 800f538:	ea41 030c 	orr.w	r3, r1, ip
 800f53c:	bf34      	ite	cc
 800f53e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f542:	2100      	movcs	r1, #0
 800f544:	3015      	adds	r0, #21
 800f546:	fa04 f000 	lsl.w	r0, r4, r0
 800f54a:	fa21 f10e 	lsr.w	r1, r1, lr
 800f54e:	ea40 0201 	orr.w	r2, r0, r1
 800f552:	ec43 2b10 	vmov	d0, r2, r3
 800f556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f558:	42b7      	cmp	r7, r6
 800f55a:	bf3a      	itte	cc
 800f55c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f560:	f1a5 0608 	subcc.w	r6, r5, #8
 800f564:	2100      	movcs	r1, #0
 800f566:	380b      	subs	r0, #11
 800f568:	d017      	beq.n	800f59a <__b2d+0x92>
 800f56a:	f1c0 0c20 	rsb	ip, r0, #32
 800f56e:	fa04 f500 	lsl.w	r5, r4, r0
 800f572:	42be      	cmp	r6, r7
 800f574:	fa21 f40c 	lsr.w	r4, r1, ip
 800f578:	ea45 0504 	orr.w	r5, r5, r4
 800f57c:	bf8c      	ite	hi
 800f57e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f582:	2400      	movls	r4, #0
 800f584:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800f588:	fa01 f000 	lsl.w	r0, r1, r0
 800f58c:	fa24 f40c 	lsr.w	r4, r4, ip
 800f590:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f594:	ea40 0204 	orr.w	r2, r0, r4
 800f598:	e7db      	b.n	800f552 <__b2d+0x4a>
 800f59a:	ea44 030c 	orr.w	r3, r4, ip
 800f59e:	460a      	mov	r2, r1
 800f5a0:	e7d7      	b.n	800f552 <__b2d+0x4a>
 800f5a2:	bf00      	nop
 800f5a4:	3ff00000 	.word	0x3ff00000

0800f5a8 <__d2b>:
 800f5a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f5ac:	4689      	mov	r9, r1
 800f5ae:	2101      	movs	r1, #1
 800f5b0:	ec57 6b10 	vmov	r6, r7, d0
 800f5b4:	4690      	mov	r8, r2
 800f5b6:	f7ff fc0f 	bl	800edd8 <_Balloc>
 800f5ba:	4604      	mov	r4, r0
 800f5bc:	b930      	cbnz	r0, 800f5cc <__d2b+0x24>
 800f5be:	4602      	mov	r2, r0
 800f5c0:	4b25      	ldr	r3, [pc, #148]	; (800f658 <__d2b+0xb0>)
 800f5c2:	4826      	ldr	r0, [pc, #152]	; (800f65c <__d2b+0xb4>)
 800f5c4:	f240 310a 	movw	r1, #778	; 0x30a
 800f5c8:	f7fe f9d0 	bl	800d96c <__assert_func>
 800f5cc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f5d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f5d4:	bb35      	cbnz	r5, 800f624 <__d2b+0x7c>
 800f5d6:	2e00      	cmp	r6, #0
 800f5d8:	9301      	str	r3, [sp, #4]
 800f5da:	d028      	beq.n	800f62e <__d2b+0x86>
 800f5dc:	4668      	mov	r0, sp
 800f5de:	9600      	str	r6, [sp, #0]
 800f5e0:	f7ff fd10 	bl	800f004 <__lo0bits>
 800f5e4:	9900      	ldr	r1, [sp, #0]
 800f5e6:	b300      	cbz	r0, 800f62a <__d2b+0x82>
 800f5e8:	9a01      	ldr	r2, [sp, #4]
 800f5ea:	f1c0 0320 	rsb	r3, r0, #32
 800f5ee:	fa02 f303 	lsl.w	r3, r2, r3
 800f5f2:	430b      	orrs	r3, r1
 800f5f4:	40c2      	lsrs	r2, r0
 800f5f6:	6163      	str	r3, [r4, #20]
 800f5f8:	9201      	str	r2, [sp, #4]
 800f5fa:	9b01      	ldr	r3, [sp, #4]
 800f5fc:	61a3      	str	r3, [r4, #24]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	bf14      	ite	ne
 800f602:	2202      	movne	r2, #2
 800f604:	2201      	moveq	r2, #1
 800f606:	6122      	str	r2, [r4, #16]
 800f608:	b1d5      	cbz	r5, 800f640 <__d2b+0x98>
 800f60a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f60e:	4405      	add	r5, r0
 800f610:	f8c9 5000 	str.w	r5, [r9]
 800f614:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f618:	f8c8 0000 	str.w	r0, [r8]
 800f61c:	4620      	mov	r0, r4
 800f61e:	b003      	add	sp, #12
 800f620:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f628:	e7d5      	b.n	800f5d6 <__d2b+0x2e>
 800f62a:	6161      	str	r1, [r4, #20]
 800f62c:	e7e5      	b.n	800f5fa <__d2b+0x52>
 800f62e:	a801      	add	r0, sp, #4
 800f630:	f7ff fce8 	bl	800f004 <__lo0bits>
 800f634:	9b01      	ldr	r3, [sp, #4]
 800f636:	6163      	str	r3, [r4, #20]
 800f638:	2201      	movs	r2, #1
 800f63a:	6122      	str	r2, [r4, #16]
 800f63c:	3020      	adds	r0, #32
 800f63e:	e7e3      	b.n	800f608 <__d2b+0x60>
 800f640:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f644:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f648:	f8c9 0000 	str.w	r0, [r9]
 800f64c:	6918      	ldr	r0, [r3, #16]
 800f64e:	f7ff fcb9 	bl	800efc4 <__hi0bits>
 800f652:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f656:	e7df      	b.n	800f618 <__d2b+0x70>
 800f658:	08010d79 	.word	0x08010d79
 800f65c:	08010e08 	.word	0x08010e08

0800f660 <__ratio>:
 800f660:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f664:	4688      	mov	r8, r1
 800f666:	4669      	mov	r1, sp
 800f668:	4681      	mov	r9, r0
 800f66a:	f7ff ff4d 	bl	800f508 <__b2d>
 800f66e:	a901      	add	r1, sp, #4
 800f670:	4640      	mov	r0, r8
 800f672:	ec55 4b10 	vmov	r4, r5, d0
 800f676:	f7ff ff47 	bl	800f508 <__b2d>
 800f67a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f67e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f682:	eba3 0c02 	sub.w	ip, r3, r2
 800f686:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f68a:	1a9b      	subs	r3, r3, r2
 800f68c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f690:	ec51 0b10 	vmov	r0, r1, d0
 800f694:	2b00      	cmp	r3, #0
 800f696:	bfd6      	itet	le
 800f698:	460a      	movle	r2, r1
 800f69a:	462a      	movgt	r2, r5
 800f69c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f6a0:	468b      	mov	fp, r1
 800f6a2:	462f      	mov	r7, r5
 800f6a4:	bfd4      	ite	le
 800f6a6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f6aa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f6ae:	4620      	mov	r0, r4
 800f6b0:	ee10 2a10 	vmov	r2, s0
 800f6b4:	465b      	mov	r3, fp
 800f6b6:	4639      	mov	r1, r7
 800f6b8:	f7f1 f8c8 	bl	800084c <__aeabi_ddiv>
 800f6bc:	ec41 0b10 	vmov	d0, r0, r1
 800f6c0:	b003      	add	sp, #12
 800f6c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f6c6 <__copybits>:
 800f6c6:	3901      	subs	r1, #1
 800f6c8:	b570      	push	{r4, r5, r6, lr}
 800f6ca:	1149      	asrs	r1, r1, #5
 800f6cc:	6914      	ldr	r4, [r2, #16]
 800f6ce:	3101      	adds	r1, #1
 800f6d0:	f102 0314 	add.w	r3, r2, #20
 800f6d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f6d8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f6dc:	1f05      	subs	r5, r0, #4
 800f6de:	42a3      	cmp	r3, r4
 800f6e0:	d30c      	bcc.n	800f6fc <__copybits+0x36>
 800f6e2:	1aa3      	subs	r3, r4, r2
 800f6e4:	3b11      	subs	r3, #17
 800f6e6:	f023 0303 	bic.w	r3, r3, #3
 800f6ea:	3211      	adds	r2, #17
 800f6ec:	42a2      	cmp	r2, r4
 800f6ee:	bf88      	it	hi
 800f6f0:	2300      	movhi	r3, #0
 800f6f2:	4418      	add	r0, r3
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	4288      	cmp	r0, r1
 800f6f8:	d305      	bcc.n	800f706 <__copybits+0x40>
 800f6fa:	bd70      	pop	{r4, r5, r6, pc}
 800f6fc:	f853 6b04 	ldr.w	r6, [r3], #4
 800f700:	f845 6f04 	str.w	r6, [r5, #4]!
 800f704:	e7eb      	b.n	800f6de <__copybits+0x18>
 800f706:	f840 3b04 	str.w	r3, [r0], #4
 800f70a:	e7f4      	b.n	800f6f6 <__copybits+0x30>

0800f70c <__any_on>:
 800f70c:	f100 0214 	add.w	r2, r0, #20
 800f710:	6900      	ldr	r0, [r0, #16]
 800f712:	114b      	asrs	r3, r1, #5
 800f714:	4298      	cmp	r0, r3
 800f716:	b510      	push	{r4, lr}
 800f718:	db11      	blt.n	800f73e <__any_on+0x32>
 800f71a:	dd0a      	ble.n	800f732 <__any_on+0x26>
 800f71c:	f011 011f 	ands.w	r1, r1, #31
 800f720:	d007      	beq.n	800f732 <__any_on+0x26>
 800f722:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f726:	fa24 f001 	lsr.w	r0, r4, r1
 800f72a:	fa00 f101 	lsl.w	r1, r0, r1
 800f72e:	428c      	cmp	r4, r1
 800f730:	d10b      	bne.n	800f74a <__any_on+0x3e>
 800f732:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f736:	4293      	cmp	r3, r2
 800f738:	d803      	bhi.n	800f742 <__any_on+0x36>
 800f73a:	2000      	movs	r0, #0
 800f73c:	bd10      	pop	{r4, pc}
 800f73e:	4603      	mov	r3, r0
 800f740:	e7f7      	b.n	800f732 <__any_on+0x26>
 800f742:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f746:	2900      	cmp	r1, #0
 800f748:	d0f5      	beq.n	800f736 <__any_on+0x2a>
 800f74a:	2001      	movs	r0, #1
 800f74c:	e7f6      	b.n	800f73c <__any_on+0x30>

0800f74e <_calloc_r>:
 800f74e:	b513      	push	{r0, r1, r4, lr}
 800f750:	434a      	muls	r2, r1
 800f752:	4611      	mov	r1, r2
 800f754:	9201      	str	r2, [sp, #4]
 800f756:	f000 f859 	bl	800f80c <_malloc_r>
 800f75a:	4604      	mov	r4, r0
 800f75c:	b118      	cbz	r0, 800f766 <_calloc_r+0x18>
 800f75e:	9a01      	ldr	r2, [sp, #4]
 800f760:	2100      	movs	r1, #0
 800f762:	f7fc faf5 	bl	800bd50 <memset>
 800f766:	4620      	mov	r0, r4
 800f768:	b002      	add	sp, #8
 800f76a:	bd10      	pop	{r4, pc}

0800f76c <_free_r>:
 800f76c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f76e:	2900      	cmp	r1, #0
 800f770:	d048      	beq.n	800f804 <_free_r+0x98>
 800f772:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f776:	9001      	str	r0, [sp, #4]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	f1a1 0404 	sub.w	r4, r1, #4
 800f77e:	bfb8      	it	lt
 800f780:	18e4      	addlt	r4, r4, r3
 800f782:	f000 fea9 	bl	80104d8 <__malloc_lock>
 800f786:	4a20      	ldr	r2, [pc, #128]	; (800f808 <_free_r+0x9c>)
 800f788:	9801      	ldr	r0, [sp, #4]
 800f78a:	6813      	ldr	r3, [r2, #0]
 800f78c:	4615      	mov	r5, r2
 800f78e:	b933      	cbnz	r3, 800f79e <_free_r+0x32>
 800f790:	6063      	str	r3, [r4, #4]
 800f792:	6014      	str	r4, [r2, #0]
 800f794:	b003      	add	sp, #12
 800f796:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f79a:	f000 bea3 	b.w	80104e4 <__malloc_unlock>
 800f79e:	42a3      	cmp	r3, r4
 800f7a0:	d90b      	bls.n	800f7ba <_free_r+0x4e>
 800f7a2:	6821      	ldr	r1, [r4, #0]
 800f7a4:	1862      	adds	r2, r4, r1
 800f7a6:	4293      	cmp	r3, r2
 800f7a8:	bf04      	itt	eq
 800f7aa:	681a      	ldreq	r2, [r3, #0]
 800f7ac:	685b      	ldreq	r3, [r3, #4]
 800f7ae:	6063      	str	r3, [r4, #4]
 800f7b0:	bf04      	itt	eq
 800f7b2:	1852      	addeq	r2, r2, r1
 800f7b4:	6022      	streq	r2, [r4, #0]
 800f7b6:	602c      	str	r4, [r5, #0]
 800f7b8:	e7ec      	b.n	800f794 <_free_r+0x28>
 800f7ba:	461a      	mov	r2, r3
 800f7bc:	685b      	ldr	r3, [r3, #4]
 800f7be:	b10b      	cbz	r3, 800f7c4 <_free_r+0x58>
 800f7c0:	42a3      	cmp	r3, r4
 800f7c2:	d9fa      	bls.n	800f7ba <_free_r+0x4e>
 800f7c4:	6811      	ldr	r1, [r2, #0]
 800f7c6:	1855      	adds	r5, r2, r1
 800f7c8:	42a5      	cmp	r5, r4
 800f7ca:	d10b      	bne.n	800f7e4 <_free_r+0x78>
 800f7cc:	6824      	ldr	r4, [r4, #0]
 800f7ce:	4421      	add	r1, r4
 800f7d0:	1854      	adds	r4, r2, r1
 800f7d2:	42a3      	cmp	r3, r4
 800f7d4:	6011      	str	r1, [r2, #0]
 800f7d6:	d1dd      	bne.n	800f794 <_free_r+0x28>
 800f7d8:	681c      	ldr	r4, [r3, #0]
 800f7da:	685b      	ldr	r3, [r3, #4]
 800f7dc:	6053      	str	r3, [r2, #4]
 800f7de:	4421      	add	r1, r4
 800f7e0:	6011      	str	r1, [r2, #0]
 800f7e2:	e7d7      	b.n	800f794 <_free_r+0x28>
 800f7e4:	d902      	bls.n	800f7ec <_free_r+0x80>
 800f7e6:	230c      	movs	r3, #12
 800f7e8:	6003      	str	r3, [r0, #0]
 800f7ea:	e7d3      	b.n	800f794 <_free_r+0x28>
 800f7ec:	6825      	ldr	r5, [r4, #0]
 800f7ee:	1961      	adds	r1, r4, r5
 800f7f0:	428b      	cmp	r3, r1
 800f7f2:	bf04      	itt	eq
 800f7f4:	6819      	ldreq	r1, [r3, #0]
 800f7f6:	685b      	ldreq	r3, [r3, #4]
 800f7f8:	6063      	str	r3, [r4, #4]
 800f7fa:	bf04      	itt	eq
 800f7fc:	1949      	addeq	r1, r1, r5
 800f7fe:	6021      	streq	r1, [r4, #0]
 800f800:	6054      	str	r4, [r2, #4]
 800f802:	e7c7      	b.n	800f794 <_free_r+0x28>
 800f804:	b003      	add	sp, #12
 800f806:	bd30      	pop	{r4, r5, pc}
 800f808:	20000f04 	.word	0x20000f04

0800f80c <_malloc_r>:
 800f80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f80e:	1ccd      	adds	r5, r1, #3
 800f810:	f025 0503 	bic.w	r5, r5, #3
 800f814:	3508      	adds	r5, #8
 800f816:	2d0c      	cmp	r5, #12
 800f818:	bf38      	it	cc
 800f81a:	250c      	movcc	r5, #12
 800f81c:	2d00      	cmp	r5, #0
 800f81e:	4606      	mov	r6, r0
 800f820:	db01      	blt.n	800f826 <_malloc_r+0x1a>
 800f822:	42a9      	cmp	r1, r5
 800f824:	d903      	bls.n	800f82e <_malloc_r+0x22>
 800f826:	230c      	movs	r3, #12
 800f828:	6033      	str	r3, [r6, #0]
 800f82a:	2000      	movs	r0, #0
 800f82c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f82e:	f000 fe53 	bl	80104d8 <__malloc_lock>
 800f832:	4921      	ldr	r1, [pc, #132]	; (800f8b8 <_malloc_r+0xac>)
 800f834:	680a      	ldr	r2, [r1, #0]
 800f836:	4614      	mov	r4, r2
 800f838:	b99c      	cbnz	r4, 800f862 <_malloc_r+0x56>
 800f83a:	4f20      	ldr	r7, [pc, #128]	; (800f8bc <_malloc_r+0xb0>)
 800f83c:	683b      	ldr	r3, [r7, #0]
 800f83e:	b923      	cbnz	r3, 800f84a <_malloc_r+0x3e>
 800f840:	4621      	mov	r1, r4
 800f842:	4630      	mov	r0, r6
 800f844:	f000 fb20 	bl	800fe88 <_sbrk_r>
 800f848:	6038      	str	r0, [r7, #0]
 800f84a:	4629      	mov	r1, r5
 800f84c:	4630      	mov	r0, r6
 800f84e:	f000 fb1b 	bl	800fe88 <_sbrk_r>
 800f852:	1c43      	adds	r3, r0, #1
 800f854:	d123      	bne.n	800f89e <_malloc_r+0x92>
 800f856:	230c      	movs	r3, #12
 800f858:	6033      	str	r3, [r6, #0]
 800f85a:	4630      	mov	r0, r6
 800f85c:	f000 fe42 	bl	80104e4 <__malloc_unlock>
 800f860:	e7e3      	b.n	800f82a <_malloc_r+0x1e>
 800f862:	6823      	ldr	r3, [r4, #0]
 800f864:	1b5b      	subs	r3, r3, r5
 800f866:	d417      	bmi.n	800f898 <_malloc_r+0x8c>
 800f868:	2b0b      	cmp	r3, #11
 800f86a:	d903      	bls.n	800f874 <_malloc_r+0x68>
 800f86c:	6023      	str	r3, [r4, #0]
 800f86e:	441c      	add	r4, r3
 800f870:	6025      	str	r5, [r4, #0]
 800f872:	e004      	b.n	800f87e <_malloc_r+0x72>
 800f874:	6863      	ldr	r3, [r4, #4]
 800f876:	42a2      	cmp	r2, r4
 800f878:	bf0c      	ite	eq
 800f87a:	600b      	streq	r3, [r1, #0]
 800f87c:	6053      	strne	r3, [r2, #4]
 800f87e:	4630      	mov	r0, r6
 800f880:	f000 fe30 	bl	80104e4 <__malloc_unlock>
 800f884:	f104 000b 	add.w	r0, r4, #11
 800f888:	1d23      	adds	r3, r4, #4
 800f88a:	f020 0007 	bic.w	r0, r0, #7
 800f88e:	1ac2      	subs	r2, r0, r3
 800f890:	d0cc      	beq.n	800f82c <_malloc_r+0x20>
 800f892:	1a1b      	subs	r3, r3, r0
 800f894:	50a3      	str	r3, [r4, r2]
 800f896:	e7c9      	b.n	800f82c <_malloc_r+0x20>
 800f898:	4622      	mov	r2, r4
 800f89a:	6864      	ldr	r4, [r4, #4]
 800f89c:	e7cc      	b.n	800f838 <_malloc_r+0x2c>
 800f89e:	1cc4      	adds	r4, r0, #3
 800f8a0:	f024 0403 	bic.w	r4, r4, #3
 800f8a4:	42a0      	cmp	r0, r4
 800f8a6:	d0e3      	beq.n	800f870 <_malloc_r+0x64>
 800f8a8:	1a21      	subs	r1, r4, r0
 800f8aa:	4630      	mov	r0, r6
 800f8ac:	f000 faec 	bl	800fe88 <_sbrk_r>
 800f8b0:	3001      	adds	r0, #1
 800f8b2:	d1dd      	bne.n	800f870 <_malloc_r+0x64>
 800f8b4:	e7cf      	b.n	800f856 <_malloc_r+0x4a>
 800f8b6:	bf00      	nop
 800f8b8:	20000f04 	.word	0x20000f04
 800f8bc:	20000f08 	.word	0x20000f08

0800f8c0 <_realloc_r>:
 800f8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8c2:	4607      	mov	r7, r0
 800f8c4:	4614      	mov	r4, r2
 800f8c6:	460e      	mov	r6, r1
 800f8c8:	b921      	cbnz	r1, 800f8d4 <_realloc_r+0x14>
 800f8ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f8ce:	4611      	mov	r1, r2
 800f8d0:	f7ff bf9c 	b.w	800f80c <_malloc_r>
 800f8d4:	b922      	cbnz	r2, 800f8e0 <_realloc_r+0x20>
 800f8d6:	f7ff ff49 	bl	800f76c <_free_r>
 800f8da:	4625      	mov	r5, r4
 800f8dc:	4628      	mov	r0, r5
 800f8de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8e0:	f000 fe06 	bl	80104f0 <_malloc_usable_size_r>
 800f8e4:	42a0      	cmp	r0, r4
 800f8e6:	d20f      	bcs.n	800f908 <_realloc_r+0x48>
 800f8e8:	4621      	mov	r1, r4
 800f8ea:	4638      	mov	r0, r7
 800f8ec:	f7ff ff8e 	bl	800f80c <_malloc_r>
 800f8f0:	4605      	mov	r5, r0
 800f8f2:	2800      	cmp	r0, #0
 800f8f4:	d0f2      	beq.n	800f8dc <_realloc_r+0x1c>
 800f8f6:	4631      	mov	r1, r6
 800f8f8:	4622      	mov	r2, r4
 800f8fa:	f7fc fa1b 	bl	800bd34 <memcpy>
 800f8fe:	4631      	mov	r1, r6
 800f900:	4638      	mov	r0, r7
 800f902:	f7ff ff33 	bl	800f76c <_free_r>
 800f906:	e7e9      	b.n	800f8dc <_realloc_r+0x1c>
 800f908:	4635      	mov	r5, r6
 800f90a:	e7e7      	b.n	800f8dc <_realloc_r+0x1c>

0800f90c <__ssputs_r>:
 800f90c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f910:	688e      	ldr	r6, [r1, #8]
 800f912:	429e      	cmp	r6, r3
 800f914:	4682      	mov	sl, r0
 800f916:	460c      	mov	r4, r1
 800f918:	4690      	mov	r8, r2
 800f91a:	461f      	mov	r7, r3
 800f91c:	d838      	bhi.n	800f990 <__ssputs_r+0x84>
 800f91e:	898a      	ldrh	r2, [r1, #12]
 800f920:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f924:	d032      	beq.n	800f98c <__ssputs_r+0x80>
 800f926:	6825      	ldr	r5, [r4, #0]
 800f928:	6909      	ldr	r1, [r1, #16]
 800f92a:	eba5 0901 	sub.w	r9, r5, r1
 800f92e:	6965      	ldr	r5, [r4, #20]
 800f930:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f934:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f938:	3301      	adds	r3, #1
 800f93a:	444b      	add	r3, r9
 800f93c:	106d      	asrs	r5, r5, #1
 800f93e:	429d      	cmp	r5, r3
 800f940:	bf38      	it	cc
 800f942:	461d      	movcc	r5, r3
 800f944:	0553      	lsls	r3, r2, #21
 800f946:	d531      	bpl.n	800f9ac <__ssputs_r+0xa0>
 800f948:	4629      	mov	r1, r5
 800f94a:	f7ff ff5f 	bl	800f80c <_malloc_r>
 800f94e:	4606      	mov	r6, r0
 800f950:	b950      	cbnz	r0, 800f968 <__ssputs_r+0x5c>
 800f952:	230c      	movs	r3, #12
 800f954:	f8ca 3000 	str.w	r3, [sl]
 800f958:	89a3      	ldrh	r3, [r4, #12]
 800f95a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f95e:	81a3      	strh	r3, [r4, #12]
 800f960:	f04f 30ff 	mov.w	r0, #4294967295
 800f964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f968:	6921      	ldr	r1, [r4, #16]
 800f96a:	464a      	mov	r2, r9
 800f96c:	f7fc f9e2 	bl	800bd34 <memcpy>
 800f970:	89a3      	ldrh	r3, [r4, #12]
 800f972:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f97a:	81a3      	strh	r3, [r4, #12]
 800f97c:	6126      	str	r6, [r4, #16]
 800f97e:	6165      	str	r5, [r4, #20]
 800f980:	444e      	add	r6, r9
 800f982:	eba5 0509 	sub.w	r5, r5, r9
 800f986:	6026      	str	r6, [r4, #0]
 800f988:	60a5      	str	r5, [r4, #8]
 800f98a:	463e      	mov	r6, r7
 800f98c:	42be      	cmp	r6, r7
 800f98e:	d900      	bls.n	800f992 <__ssputs_r+0x86>
 800f990:	463e      	mov	r6, r7
 800f992:	4632      	mov	r2, r6
 800f994:	6820      	ldr	r0, [r4, #0]
 800f996:	4641      	mov	r1, r8
 800f998:	f000 fd84 	bl	80104a4 <memmove>
 800f99c:	68a3      	ldr	r3, [r4, #8]
 800f99e:	6822      	ldr	r2, [r4, #0]
 800f9a0:	1b9b      	subs	r3, r3, r6
 800f9a2:	4432      	add	r2, r6
 800f9a4:	60a3      	str	r3, [r4, #8]
 800f9a6:	6022      	str	r2, [r4, #0]
 800f9a8:	2000      	movs	r0, #0
 800f9aa:	e7db      	b.n	800f964 <__ssputs_r+0x58>
 800f9ac:	462a      	mov	r2, r5
 800f9ae:	f7ff ff87 	bl	800f8c0 <_realloc_r>
 800f9b2:	4606      	mov	r6, r0
 800f9b4:	2800      	cmp	r0, #0
 800f9b6:	d1e1      	bne.n	800f97c <__ssputs_r+0x70>
 800f9b8:	6921      	ldr	r1, [r4, #16]
 800f9ba:	4650      	mov	r0, sl
 800f9bc:	f7ff fed6 	bl	800f76c <_free_r>
 800f9c0:	e7c7      	b.n	800f952 <__ssputs_r+0x46>
	...

0800f9c4 <_svfiprintf_r>:
 800f9c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9c8:	4698      	mov	r8, r3
 800f9ca:	898b      	ldrh	r3, [r1, #12]
 800f9cc:	061b      	lsls	r3, r3, #24
 800f9ce:	b09d      	sub	sp, #116	; 0x74
 800f9d0:	4607      	mov	r7, r0
 800f9d2:	460d      	mov	r5, r1
 800f9d4:	4614      	mov	r4, r2
 800f9d6:	d50e      	bpl.n	800f9f6 <_svfiprintf_r+0x32>
 800f9d8:	690b      	ldr	r3, [r1, #16]
 800f9da:	b963      	cbnz	r3, 800f9f6 <_svfiprintf_r+0x32>
 800f9dc:	2140      	movs	r1, #64	; 0x40
 800f9de:	f7ff ff15 	bl	800f80c <_malloc_r>
 800f9e2:	6028      	str	r0, [r5, #0]
 800f9e4:	6128      	str	r0, [r5, #16]
 800f9e6:	b920      	cbnz	r0, 800f9f2 <_svfiprintf_r+0x2e>
 800f9e8:	230c      	movs	r3, #12
 800f9ea:	603b      	str	r3, [r7, #0]
 800f9ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f9f0:	e0d1      	b.n	800fb96 <_svfiprintf_r+0x1d2>
 800f9f2:	2340      	movs	r3, #64	; 0x40
 800f9f4:	616b      	str	r3, [r5, #20]
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	9309      	str	r3, [sp, #36]	; 0x24
 800f9fa:	2320      	movs	r3, #32
 800f9fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fa00:	f8cd 800c 	str.w	r8, [sp, #12]
 800fa04:	2330      	movs	r3, #48	; 0x30
 800fa06:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fbb0 <_svfiprintf_r+0x1ec>
 800fa0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fa0e:	f04f 0901 	mov.w	r9, #1
 800fa12:	4623      	mov	r3, r4
 800fa14:	469a      	mov	sl, r3
 800fa16:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa1a:	b10a      	cbz	r2, 800fa20 <_svfiprintf_r+0x5c>
 800fa1c:	2a25      	cmp	r2, #37	; 0x25
 800fa1e:	d1f9      	bne.n	800fa14 <_svfiprintf_r+0x50>
 800fa20:	ebba 0b04 	subs.w	fp, sl, r4
 800fa24:	d00b      	beq.n	800fa3e <_svfiprintf_r+0x7a>
 800fa26:	465b      	mov	r3, fp
 800fa28:	4622      	mov	r2, r4
 800fa2a:	4629      	mov	r1, r5
 800fa2c:	4638      	mov	r0, r7
 800fa2e:	f7ff ff6d 	bl	800f90c <__ssputs_r>
 800fa32:	3001      	adds	r0, #1
 800fa34:	f000 80aa 	beq.w	800fb8c <_svfiprintf_r+0x1c8>
 800fa38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fa3a:	445a      	add	r2, fp
 800fa3c:	9209      	str	r2, [sp, #36]	; 0x24
 800fa3e:	f89a 3000 	ldrb.w	r3, [sl]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	f000 80a2 	beq.w	800fb8c <_svfiprintf_r+0x1c8>
 800fa48:	2300      	movs	r3, #0
 800fa4a:	f04f 32ff 	mov.w	r2, #4294967295
 800fa4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa52:	f10a 0a01 	add.w	sl, sl, #1
 800fa56:	9304      	str	r3, [sp, #16]
 800fa58:	9307      	str	r3, [sp, #28]
 800fa5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fa5e:	931a      	str	r3, [sp, #104]	; 0x68
 800fa60:	4654      	mov	r4, sl
 800fa62:	2205      	movs	r2, #5
 800fa64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa68:	4851      	ldr	r0, [pc, #324]	; (800fbb0 <_svfiprintf_r+0x1ec>)
 800fa6a:	f7f0 fbb9 	bl	80001e0 <memchr>
 800fa6e:	9a04      	ldr	r2, [sp, #16]
 800fa70:	b9d8      	cbnz	r0, 800faaa <_svfiprintf_r+0xe6>
 800fa72:	06d0      	lsls	r0, r2, #27
 800fa74:	bf44      	itt	mi
 800fa76:	2320      	movmi	r3, #32
 800fa78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa7c:	0711      	lsls	r1, r2, #28
 800fa7e:	bf44      	itt	mi
 800fa80:	232b      	movmi	r3, #43	; 0x2b
 800fa82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa86:	f89a 3000 	ldrb.w	r3, [sl]
 800fa8a:	2b2a      	cmp	r3, #42	; 0x2a
 800fa8c:	d015      	beq.n	800faba <_svfiprintf_r+0xf6>
 800fa8e:	9a07      	ldr	r2, [sp, #28]
 800fa90:	4654      	mov	r4, sl
 800fa92:	2000      	movs	r0, #0
 800fa94:	f04f 0c0a 	mov.w	ip, #10
 800fa98:	4621      	mov	r1, r4
 800fa9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa9e:	3b30      	subs	r3, #48	; 0x30
 800faa0:	2b09      	cmp	r3, #9
 800faa2:	d94e      	bls.n	800fb42 <_svfiprintf_r+0x17e>
 800faa4:	b1b0      	cbz	r0, 800fad4 <_svfiprintf_r+0x110>
 800faa6:	9207      	str	r2, [sp, #28]
 800faa8:	e014      	b.n	800fad4 <_svfiprintf_r+0x110>
 800faaa:	eba0 0308 	sub.w	r3, r0, r8
 800faae:	fa09 f303 	lsl.w	r3, r9, r3
 800fab2:	4313      	orrs	r3, r2
 800fab4:	9304      	str	r3, [sp, #16]
 800fab6:	46a2      	mov	sl, r4
 800fab8:	e7d2      	b.n	800fa60 <_svfiprintf_r+0x9c>
 800faba:	9b03      	ldr	r3, [sp, #12]
 800fabc:	1d19      	adds	r1, r3, #4
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	9103      	str	r1, [sp, #12]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	bfbb      	ittet	lt
 800fac6:	425b      	neglt	r3, r3
 800fac8:	f042 0202 	orrlt.w	r2, r2, #2
 800facc:	9307      	strge	r3, [sp, #28]
 800face:	9307      	strlt	r3, [sp, #28]
 800fad0:	bfb8      	it	lt
 800fad2:	9204      	strlt	r2, [sp, #16]
 800fad4:	7823      	ldrb	r3, [r4, #0]
 800fad6:	2b2e      	cmp	r3, #46	; 0x2e
 800fad8:	d10c      	bne.n	800faf4 <_svfiprintf_r+0x130>
 800fada:	7863      	ldrb	r3, [r4, #1]
 800fadc:	2b2a      	cmp	r3, #42	; 0x2a
 800fade:	d135      	bne.n	800fb4c <_svfiprintf_r+0x188>
 800fae0:	9b03      	ldr	r3, [sp, #12]
 800fae2:	1d1a      	adds	r2, r3, #4
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	9203      	str	r2, [sp, #12]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	bfb8      	it	lt
 800faec:	f04f 33ff 	movlt.w	r3, #4294967295
 800faf0:	3402      	adds	r4, #2
 800faf2:	9305      	str	r3, [sp, #20]
 800faf4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fbc0 <_svfiprintf_r+0x1fc>
 800faf8:	7821      	ldrb	r1, [r4, #0]
 800fafa:	2203      	movs	r2, #3
 800fafc:	4650      	mov	r0, sl
 800fafe:	f7f0 fb6f 	bl	80001e0 <memchr>
 800fb02:	b140      	cbz	r0, 800fb16 <_svfiprintf_r+0x152>
 800fb04:	2340      	movs	r3, #64	; 0x40
 800fb06:	eba0 000a 	sub.w	r0, r0, sl
 800fb0a:	fa03 f000 	lsl.w	r0, r3, r0
 800fb0e:	9b04      	ldr	r3, [sp, #16]
 800fb10:	4303      	orrs	r3, r0
 800fb12:	3401      	adds	r4, #1
 800fb14:	9304      	str	r3, [sp, #16]
 800fb16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb1a:	4826      	ldr	r0, [pc, #152]	; (800fbb4 <_svfiprintf_r+0x1f0>)
 800fb1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fb20:	2206      	movs	r2, #6
 800fb22:	f7f0 fb5d 	bl	80001e0 <memchr>
 800fb26:	2800      	cmp	r0, #0
 800fb28:	d038      	beq.n	800fb9c <_svfiprintf_r+0x1d8>
 800fb2a:	4b23      	ldr	r3, [pc, #140]	; (800fbb8 <_svfiprintf_r+0x1f4>)
 800fb2c:	bb1b      	cbnz	r3, 800fb76 <_svfiprintf_r+0x1b2>
 800fb2e:	9b03      	ldr	r3, [sp, #12]
 800fb30:	3307      	adds	r3, #7
 800fb32:	f023 0307 	bic.w	r3, r3, #7
 800fb36:	3308      	adds	r3, #8
 800fb38:	9303      	str	r3, [sp, #12]
 800fb3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb3c:	4433      	add	r3, r6
 800fb3e:	9309      	str	r3, [sp, #36]	; 0x24
 800fb40:	e767      	b.n	800fa12 <_svfiprintf_r+0x4e>
 800fb42:	fb0c 3202 	mla	r2, ip, r2, r3
 800fb46:	460c      	mov	r4, r1
 800fb48:	2001      	movs	r0, #1
 800fb4a:	e7a5      	b.n	800fa98 <_svfiprintf_r+0xd4>
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	3401      	adds	r4, #1
 800fb50:	9305      	str	r3, [sp, #20]
 800fb52:	4619      	mov	r1, r3
 800fb54:	f04f 0c0a 	mov.w	ip, #10
 800fb58:	4620      	mov	r0, r4
 800fb5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb5e:	3a30      	subs	r2, #48	; 0x30
 800fb60:	2a09      	cmp	r2, #9
 800fb62:	d903      	bls.n	800fb6c <_svfiprintf_r+0x1a8>
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d0c5      	beq.n	800faf4 <_svfiprintf_r+0x130>
 800fb68:	9105      	str	r1, [sp, #20]
 800fb6a:	e7c3      	b.n	800faf4 <_svfiprintf_r+0x130>
 800fb6c:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb70:	4604      	mov	r4, r0
 800fb72:	2301      	movs	r3, #1
 800fb74:	e7f0      	b.n	800fb58 <_svfiprintf_r+0x194>
 800fb76:	ab03      	add	r3, sp, #12
 800fb78:	9300      	str	r3, [sp, #0]
 800fb7a:	462a      	mov	r2, r5
 800fb7c:	4b0f      	ldr	r3, [pc, #60]	; (800fbbc <_svfiprintf_r+0x1f8>)
 800fb7e:	a904      	add	r1, sp, #16
 800fb80:	4638      	mov	r0, r7
 800fb82:	f7fc f98d 	bl	800bea0 <_printf_float>
 800fb86:	1c42      	adds	r2, r0, #1
 800fb88:	4606      	mov	r6, r0
 800fb8a:	d1d6      	bne.n	800fb3a <_svfiprintf_r+0x176>
 800fb8c:	89ab      	ldrh	r3, [r5, #12]
 800fb8e:	065b      	lsls	r3, r3, #25
 800fb90:	f53f af2c 	bmi.w	800f9ec <_svfiprintf_r+0x28>
 800fb94:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fb96:	b01d      	add	sp, #116	; 0x74
 800fb98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb9c:	ab03      	add	r3, sp, #12
 800fb9e:	9300      	str	r3, [sp, #0]
 800fba0:	462a      	mov	r2, r5
 800fba2:	4b06      	ldr	r3, [pc, #24]	; (800fbbc <_svfiprintf_r+0x1f8>)
 800fba4:	a904      	add	r1, sp, #16
 800fba6:	4638      	mov	r0, r7
 800fba8:	f7fc fc1e 	bl	800c3e8 <_printf_i>
 800fbac:	e7eb      	b.n	800fb86 <_svfiprintf_r+0x1c2>
 800fbae:	bf00      	nop
 800fbb0:	08010f64 	.word	0x08010f64
 800fbb4:	08010f6e 	.word	0x08010f6e
 800fbb8:	0800bea1 	.word	0x0800bea1
 800fbbc:	0800f90d 	.word	0x0800f90d
 800fbc0:	08010f6a 	.word	0x08010f6a

0800fbc4 <__sfputc_r>:
 800fbc4:	6893      	ldr	r3, [r2, #8]
 800fbc6:	3b01      	subs	r3, #1
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	b410      	push	{r4}
 800fbcc:	6093      	str	r3, [r2, #8]
 800fbce:	da08      	bge.n	800fbe2 <__sfputc_r+0x1e>
 800fbd0:	6994      	ldr	r4, [r2, #24]
 800fbd2:	42a3      	cmp	r3, r4
 800fbd4:	db01      	blt.n	800fbda <__sfputc_r+0x16>
 800fbd6:	290a      	cmp	r1, #10
 800fbd8:	d103      	bne.n	800fbe2 <__sfputc_r+0x1e>
 800fbda:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fbde:	f000 b975 	b.w	800fecc <__swbuf_r>
 800fbe2:	6813      	ldr	r3, [r2, #0]
 800fbe4:	1c58      	adds	r0, r3, #1
 800fbe6:	6010      	str	r0, [r2, #0]
 800fbe8:	7019      	strb	r1, [r3, #0]
 800fbea:	4608      	mov	r0, r1
 800fbec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fbf0:	4770      	bx	lr

0800fbf2 <__sfputs_r>:
 800fbf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbf4:	4606      	mov	r6, r0
 800fbf6:	460f      	mov	r7, r1
 800fbf8:	4614      	mov	r4, r2
 800fbfa:	18d5      	adds	r5, r2, r3
 800fbfc:	42ac      	cmp	r4, r5
 800fbfe:	d101      	bne.n	800fc04 <__sfputs_r+0x12>
 800fc00:	2000      	movs	r0, #0
 800fc02:	e007      	b.n	800fc14 <__sfputs_r+0x22>
 800fc04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc08:	463a      	mov	r2, r7
 800fc0a:	4630      	mov	r0, r6
 800fc0c:	f7ff ffda 	bl	800fbc4 <__sfputc_r>
 800fc10:	1c43      	adds	r3, r0, #1
 800fc12:	d1f3      	bne.n	800fbfc <__sfputs_r+0xa>
 800fc14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fc18 <_vfiprintf_r>:
 800fc18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc1c:	460d      	mov	r5, r1
 800fc1e:	b09d      	sub	sp, #116	; 0x74
 800fc20:	4614      	mov	r4, r2
 800fc22:	4698      	mov	r8, r3
 800fc24:	4606      	mov	r6, r0
 800fc26:	b118      	cbz	r0, 800fc30 <_vfiprintf_r+0x18>
 800fc28:	6983      	ldr	r3, [r0, #24]
 800fc2a:	b90b      	cbnz	r3, 800fc30 <_vfiprintf_r+0x18>
 800fc2c:	f000 fb36 	bl	801029c <__sinit>
 800fc30:	4b89      	ldr	r3, [pc, #548]	; (800fe58 <_vfiprintf_r+0x240>)
 800fc32:	429d      	cmp	r5, r3
 800fc34:	d11b      	bne.n	800fc6e <_vfiprintf_r+0x56>
 800fc36:	6875      	ldr	r5, [r6, #4]
 800fc38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc3a:	07d9      	lsls	r1, r3, #31
 800fc3c:	d405      	bmi.n	800fc4a <_vfiprintf_r+0x32>
 800fc3e:	89ab      	ldrh	r3, [r5, #12]
 800fc40:	059a      	lsls	r2, r3, #22
 800fc42:	d402      	bmi.n	800fc4a <_vfiprintf_r+0x32>
 800fc44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc46:	f000 fbc7 	bl	80103d8 <__retarget_lock_acquire_recursive>
 800fc4a:	89ab      	ldrh	r3, [r5, #12]
 800fc4c:	071b      	lsls	r3, r3, #28
 800fc4e:	d501      	bpl.n	800fc54 <_vfiprintf_r+0x3c>
 800fc50:	692b      	ldr	r3, [r5, #16]
 800fc52:	b9eb      	cbnz	r3, 800fc90 <_vfiprintf_r+0x78>
 800fc54:	4629      	mov	r1, r5
 800fc56:	4630      	mov	r0, r6
 800fc58:	f000 f998 	bl	800ff8c <__swsetup_r>
 800fc5c:	b1c0      	cbz	r0, 800fc90 <_vfiprintf_r+0x78>
 800fc5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc60:	07dc      	lsls	r4, r3, #31
 800fc62:	d50e      	bpl.n	800fc82 <_vfiprintf_r+0x6a>
 800fc64:	f04f 30ff 	mov.w	r0, #4294967295
 800fc68:	b01d      	add	sp, #116	; 0x74
 800fc6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc6e:	4b7b      	ldr	r3, [pc, #492]	; (800fe5c <_vfiprintf_r+0x244>)
 800fc70:	429d      	cmp	r5, r3
 800fc72:	d101      	bne.n	800fc78 <_vfiprintf_r+0x60>
 800fc74:	68b5      	ldr	r5, [r6, #8]
 800fc76:	e7df      	b.n	800fc38 <_vfiprintf_r+0x20>
 800fc78:	4b79      	ldr	r3, [pc, #484]	; (800fe60 <_vfiprintf_r+0x248>)
 800fc7a:	429d      	cmp	r5, r3
 800fc7c:	bf08      	it	eq
 800fc7e:	68f5      	ldreq	r5, [r6, #12]
 800fc80:	e7da      	b.n	800fc38 <_vfiprintf_r+0x20>
 800fc82:	89ab      	ldrh	r3, [r5, #12]
 800fc84:	0598      	lsls	r0, r3, #22
 800fc86:	d4ed      	bmi.n	800fc64 <_vfiprintf_r+0x4c>
 800fc88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc8a:	f000 fba6 	bl	80103da <__retarget_lock_release_recursive>
 800fc8e:	e7e9      	b.n	800fc64 <_vfiprintf_r+0x4c>
 800fc90:	2300      	movs	r3, #0
 800fc92:	9309      	str	r3, [sp, #36]	; 0x24
 800fc94:	2320      	movs	r3, #32
 800fc96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fc9a:	f8cd 800c 	str.w	r8, [sp, #12]
 800fc9e:	2330      	movs	r3, #48	; 0x30
 800fca0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fe64 <_vfiprintf_r+0x24c>
 800fca4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fca8:	f04f 0901 	mov.w	r9, #1
 800fcac:	4623      	mov	r3, r4
 800fcae:	469a      	mov	sl, r3
 800fcb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fcb4:	b10a      	cbz	r2, 800fcba <_vfiprintf_r+0xa2>
 800fcb6:	2a25      	cmp	r2, #37	; 0x25
 800fcb8:	d1f9      	bne.n	800fcae <_vfiprintf_r+0x96>
 800fcba:	ebba 0b04 	subs.w	fp, sl, r4
 800fcbe:	d00b      	beq.n	800fcd8 <_vfiprintf_r+0xc0>
 800fcc0:	465b      	mov	r3, fp
 800fcc2:	4622      	mov	r2, r4
 800fcc4:	4629      	mov	r1, r5
 800fcc6:	4630      	mov	r0, r6
 800fcc8:	f7ff ff93 	bl	800fbf2 <__sfputs_r>
 800fccc:	3001      	adds	r0, #1
 800fcce:	f000 80aa 	beq.w	800fe26 <_vfiprintf_r+0x20e>
 800fcd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fcd4:	445a      	add	r2, fp
 800fcd6:	9209      	str	r2, [sp, #36]	; 0x24
 800fcd8:	f89a 3000 	ldrb.w	r3, [sl]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	f000 80a2 	beq.w	800fe26 <_vfiprintf_r+0x20e>
 800fce2:	2300      	movs	r3, #0
 800fce4:	f04f 32ff 	mov.w	r2, #4294967295
 800fce8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fcec:	f10a 0a01 	add.w	sl, sl, #1
 800fcf0:	9304      	str	r3, [sp, #16]
 800fcf2:	9307      	str	r3, [sp, #28]
 800fcf4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fcf8:	931a      	str	r3, [sp, #104]	; 0x68
 800fcfa:	4654      	mov	r4, sl
 800fcfc:	2205      	movs	r2, #5
 800fcfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd02:	4858      	ldr	r0, [pc, #352]	; (800fe64 <_vfiprintf_r+0x24c>)
 800fd04:	f7f0 fa6c 	bl	80001e0 <memchr>
 800fd08:	9a04      	ldr	r2, [sp, #16]
 800fd0a:	b9d8      	cbnz	r0, 800fd44 <_vfiprintf_r+0x12c>
 800fd0c:	06d1      	lsls	r1, r2, #27
 800fd0e:	bf44      	itt	mi
 800fd10:	2320      	movmi	r3, #32
 800fd12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd16:	0713      	lsls	r3, r2, #28
 800fd18:	bf44      	itt	mi
 800fd1a:	232b      	movmi	r3, #43	; 0x2b
 800fd1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd20:	f89a 3000 	ldrb.w	r3, [sl]
 800fd24:	2b2a      	cmp	r3, #42	; 0x2a
 800fd26:	d015      	beq.n	800fd54 <_vfiprintf_r+0x13c>
 800fd28:	9a07      	ldr	r2, [sp, #28]
 800fd2a:	4654      	mov	r4, sl
 800fd2c:	2000      	movs	r0, #0
 800fd2e:	f04f 0c0a 	mov.w	ip, #10
 800fd32:	4621      	mov	r1, r4
 800fd34:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd38:	3b30      	subs	r3, #48	; 0x30
 800fd3a:	2b09      	cmp	r3, #9
 800fd3c:	d94e      	bls.n	800fddc <_vfiprintf_r+0x1c4>
 800fd3e:	b1b0      	cbz	r0, 800fd6e <_vfiprintf_r+0x156>
 800fd40:	9207      	str	r2, [sp, #28]
 800fd42:	e014      	b.n	800fd6e <_vfiprintf_r+0x156>
 800fd44:	eba0 0308 	sub.w	r3, r0, r8
 800fd48:	fa09 f303 	lsl.w	r3, r9, r3
 800fd4c:	4313      	orrs	r3, r2
 800fd4e:	9304      	str	r3, [sp, #16]
 800fd50:	46a2      	mov	sl, r4
 800fd52:	e7d2      	b.n	800fcfa <_vfiprintf_r+0xe2>
 800fd54:	9b03      	ldr	r3, [sp, #12]
 800fd56:	1d19      	adds	r1, r3, #4
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	9103      	str	r1, [sp, #12]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	bfbb      	ittet	lt
 800fd60:	425b      	neglt	r3, r3
 800fd62:	f042 0202 	orrlt.w	r2, r2, #2
 800fd66:	9307      	strge	r3, [sp, #28]
 800fd68:	9307      	strlt	r3, [sp, #28]
 800fd6a:	bfb8      	it	lt
 800fd6c:	9204      	strlt	r2, [sp, #16]
 800fd6e:	7823      	ldrb	r3, [r4, #0]
 800fd70:	2b2e      	cmp	r3, #46	; 0x2e
 800fd72:	d10c      	bne.n	800fd8e <_vfiprintf_r+0x176>
 800fd74:	7863      	ldrb	r3, [r4, #1]
 800fd76:	2b2a      	cmp	r3, #42	; 0x2a
 800fd78:	d135      	bne.n	800fde6 <_vfiprintf_r+0x1ce>
 800fd7a:	9b03      	ldr	r3, [sp, #12]
 800fd7c:	1d1a      	adds	r2, r3, #4
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	9203      	str	r2, [sp, #12]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	bfb8      	it	lt
 800fd86:	f04f 33ff 	movlt.w	r3, #4294967295
 800fd8a:	3402      	adds	r4, #2
 800fd8c:	9305      	str	r3, [sp, #20]
 800fd8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fe74 <_vfiprintf_r+0x25c>
 800fd92:	7821      	ldrb	r1, [r4, #0]
 800fd94:	2203      	movs	r2, #3
 800fd96:	4650      	mov	r0, sl
 800fd98:	f7f0 fa22 	bl	80001e0 <memchr>
 800fd9c:	b140      	cbz	r0, 800fdb0 <_vfiprintf_r+0x198>
 800fd9e:	2340      	movs	r3, #64	; 0x40
 800fda0:	eba0 000a 	sub.w	r0, r0, sl
 800fda4:	fa03 f000 	lsl.w	r0, r3, r0
 800fda8:	9b04      	ldr	r3, [sp, #16]
 800fdaa:	4303      	orrs	r3, r0
 800fdac:	3401      	adds	r4, #1
 800fdae:	9304      	str	r3, [sp, #16]
 800fdb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdb4:	482c      	ldr	r0, [pc, #176]	; (800fe68 <_vfiprintf_r+0x250>)
 800fdb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fdba:	2206      	movs	r2, #6
 800fdbc:	f7f0 fa10 	bl	80001e0 <memchr>
 800fdc0:	2800      	cmp	r0, #0
 800fdc2:	d03f      	beq.n	800fe44 <_vfiprintf_r+0x22c>
 800fdc4:	4b29      	ldr	r3, [pc, #164]	; (800fe6c <_vfiprintf_r+0x254>)
 800fdc6:	bb1b      	cbnz	r3, 800fe10 <_vfiprintf_r+0x1f8>
 800fdc8:	9b03      	ldr	r3, [sp, #12]
 800fdca:	3307      	adds	r3, #7
 800fdcc:	f023 0307 	bic.w	r3, r3, #7
 800fdd0:	3308      	adds	r3, #8
 800fdd2:	9303      	str	r3, [sp, #12]
 800fdd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fdd6:	443b      	add	r3, r7
 800fdd8:	9309      	str	r3, [sp, #36]	; 0x24
 800fdda:	e767      	b.n	800fcac <_vfiprintf_r+0x94>
 800fddc:	fb0c 3202 	mla	r2, ip, r2, r3
 800fde0:	460c      	mov	r4, r1
 800fde2:	2001      	movs	r0, #1
 800fde4:	e7a5      	b.n	800fd32 <_vfiprintf_r+0x11a>
 800fde6:	2300      	movs	r3, #0
 800fde8:	3401      	adds	r4, #1
 800fdea:	9305      	str	r3, [sp, #20]
 800fdec:	4619      	mov	r1, r3
 800fdee:	f04f 0c0a 	mov.w	ip, #10
 800fdf2:	4620      	mov	r0, r4
 800fdf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fdf8:	3a30      	subs	r2, #48	; 0x30
 800fdfa:	2a09      	cmp	r2, #9
 800fdfc:	d903      	bls.n	800fe06 <_vfiprintf_r+0x1ee>
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d0c5      	beq.n	800fd8e <_vfiprintf_r+0x176>
 800fe02:	9105      	str	r1, [sp, #20]
 800fe04:	e7c3      	b.n	800fd8e <_vfiprintf_r+0x176>
 800fe06:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe0a:	4604      	mov	r4, r0
 800fe0c:	2301      	movs	r3, #1
 800fe0e:	e7f0      	b.n	800fdf2 <_vfiprintf_r+0x1da>
 800fe10:	ab03      	add	r3, sp, #12
 800fe12:	9300      	str	r3, [sp, #0]
 800fe14:	462a      	mov	r2, r5
 800fe16:	4b16      	ldr	r3, [pc, #88]	; (800fe70 <_vfiprintf_r+0x258>)
 800fe18:	a904      	add	r1, sp, #16
 800fe1a:	4630      	mov	r0, r6
 800fe1c:	f7fc f840 	bl	800bea0 <_printf_float>
 800fe20:	4607      	mov	r7, r0
 800fe22:	1c78      	adds	r0, r7, #1
 800fe24:	d1d6      	bne.n	800fdd4 <_vfiprintf_r+0x1bc>
 800fe26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe28:	07d9      	lsls	r1, r3, #31
 800fe2a:	d405      	bmi.n	800fe38 <_vfiprintf_r+0x220>
 800fe2c:	89ab      	ldrh	r3, [r5, #12]
 800fe2e:	059a      	lsls	r2, r3, #22
 800fe30:	d402      	bmi.n	800fe38 <_vfiprintf_r+0x220>
 800fe32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fe34:	f000 fad1 	bl	80103da <__retarget_lock_release_recursive>
 800fe38:	89ab      	ldrh	r3, [r5, #12]
 800fe3a:	065b      	lsls	r3, r3, #25
 800fe3c:	f53f af12 	bmi.w	800fc64 <_vfiprintf_r+0x4c>
 800fe40:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe42:	e711      	b.n	800fc68 <_vfiprintf_r+0x50>
 800fe44:	ab03      	add	r3, sp, #12
 800fe46:	9300      	str	r3, [sp, #0]
 800fe48:	462a      	mov	r2, r5
 800fe4a:	4b09      	ldr	r3, [pc, #36]	; (800fe70 <_vfiprintf_r+0x258>)
 800fe4c:	a904      	add	r1, sp, #16
 800fe4e:	4630      	mov	r0, r6
 800fe50:	f7fc faca 	bl	800c3e8 <_printf_i>
 800fe54:	e7e4      	b.n	800fe20 <_vfiprintf_r+0x208>
 800fe56:	bf00      	nop
 800fe58:	08010f98 	.word	0x08010f98
 800fe5c:	08010fb8 	.word	0x08010fb8
 800fe60:	08010f78 	.word	0x08010f78
 800fe64:	08010f64 	.word	0x08010f64
 800fe68:	08010f6e 	.word	0x08010f6e
 800fe6c:	0800bea1 	.word	0x0800bea1
 800fe70:	0800fbf3 	.word	0x0800fbf3
 800fe74:	08010f6a 	.word	0x08010f6a

0800fe78 <nan>:
 800fe78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fe80 <nan+0x8>
 800fe7c:	4770      	bx	lr
 800fe7e:	bf00      	nop
 800fe80:	00000000 	.word	0x00000000
 800fe84:	7ff80000 	.word	0x7ff80000

0800fe88 <_sbrk_r>:
 800fe88:	b538      	push	{r3, r4, r5, lr}
 800fe8a:	4d06      	ldr	r5, [pc, #24]	; (800fea4 <_sbrk_r+0x1c>)
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	4604      	mov	r4, r0
 800fe90:	4608      	mov	r0, r1
 800fe92:	602b      	str	r3, [r5, #0]
 800fe94:	f7f7 fb96 	bl	80075c4 <_sbrk>
 800fe98:	1c43      	adds	r3, r0, #1
 800fe9a:	d102      	bne.n	800fea2 <_sbrk_r+0x1a>
 800fe9c:	682b      	ldr	r3, [r5, #0]
 800fe9e:	b103      	cbz	r3, 800fea2 <_sbrk_r+0x1a>
 800fea0:	6023      	str	r3, [r4, #0]
 800fea2:	bd38      	pop	{r3, r4, r5, pc}
 800fea4:	2000135c 	.word	0x2000135c

0800fea8 <strncmp>:
 800fea8:	b510      	push	{r4, lr}
 800feaa:	b16a      	cbz	r2, 800fec8 <strncmp+0x20>
 800feac:	3901      	subs	r1, #1
 800feae:	1884      	adds	r4, r0, r2
 800feb0:	f810 3b01 	ldrb.w	r3, [r0], #1
 800feb4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800feb8:	4293      	cmp	r3, r2
 800feba:	d103      	bne.n	800fec4 <strncmp+0x1c>
 800febc:	42a0      	cmp	r0, r4
 800febe:	d001      	beq.n	800fec4 <strncmp+0x1c>
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d1f5      	bne.n	800feb0 <strncmp+0x8>
 800fec4:	1a98      	subs	r0, r3, r2
 800fec6:	bd10      	pop	{r4, pc}
 800fec8:	4610      	mov	r0, r2
 800feca:	e7fc      	b.n	800fec6 <strncmp+0x1e>

0800fecc <__swbuf_r>:
 800fecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fece:	460e      	mov	r6, r1
 800fed0:	4614      	mov	r4, r2
 800fed2:	4605      	mov	r5, r0
 800fed4:	b118      	cbz	r0, 800fede <__swbuf_r+0x12>
 800fed6:	6983      	ldr	r3, [r0, #24]
 800fed8:	b90b      	cbnz	r3, 800fede <__swbuf_r+0x12>
 800feda:	f000 f9df 	bl	801029c <__sinit>
 800fede:	4b21      	ldr	r3, [pc, #132]	; (800ff64 <__swbuf_r+0x98>)
 800fee0:	429c      	cmp	r4, r3
 800fee2:	d12b      	bne.n	800ff3c <__swbuf_r+0x70>
 800fee4:	686c      	ldr	r4, [r5, #4]
 800fee6:	69a3      	ldr	r3, [r4, #24]
 800fee8:	60a3      	str	r3, [r4, #8]
 800feea:	89a3      	ldrh	r3, [r4, #12]
 800feec:	071a      	lsls	r2, r3, #28
 800feee:	d52f      	bpl.n	800ff50 <__swbuf_r+0x84>
 800fef0:	6923      	ldr	r3, [r4, #16]
 800fef2:	b36b      	cbz	r3, 800ff50 <__swbuf_r+0x84>
 800fef4:	6923      	ldr	r3, [r4, #16]
 800fef6:	6820      	ldr	r0, [r4, #0]
 800fef8:	1ac0      	subs	r0, r0, r3
 800fefa:	6963      	ldr	r3, [r4, #20]
 800fefc:	b2f6      	uxtb	r6, r6
 800fefe:	4283      	cmp	r3, r0
 800ff00:	4637      	mov	r7, r6
 800ff02:	dc04      	bgt.n	800ff0e <__swbuf_r+0x42>
 800ff04:	4621      	mov	r1, r4
 800ff06:	4628      	mov	r0, r5
 800ff08:	f000 f934 	bl	8010174 <_fflush_r>
 800ff0c:	bb30      	cbnz	r0, 800ff5c <__swbuf_r+0x90>
 800ff0e:	68a3      	ldr	r3, [r4, #8]
 800ff10:	3b01      	subs	r3, #1
 800ff12:	60a3      	str	r3, [r4, #8]
 800ff14:	6823      	ldr	r3, [r4, #0]
 800ff16:	1c5a      	adds	r2, r3, #1
 800ff18:	6022      	str	r2, [r4, #0]
 800ff1a:	701e      	strb	r6, [r3, #0]
 800ff1c:	6963      	ldr	r3, [r4, #20]
 800ff1e:	3001      	adds	r0, #1
 800ff20:	4283      	cmp	r3, r0
 800ff22:	d004      	beq.n	800ff2e <__swbuf_r+0x62>
 800ff24:	89a3      	ldrh	r3, [r4, #12]
 800ff26:	07db      	lsls	r3, r3, #31
 800ff28:	d506      	bpl.n	800ff38 <__swbuf_r+0x6c>
 800ff2a:	2e0a      	cmp	r6, #10
 800ff2c:	d104      	bne.n	800ff38 <__swbuf_r+0x6c>
 800ff2e:	4621      	mov	r1, r4
 800ff30:	4628      	mov	r0, r5
 800ff32:	f000 f91f 	bl	8010174 <_fflush_r>
 800ff36:	b988      	cbnz	r0, 800ff5c <__swbuf_r+0x90>
 800ff38:	4638      	mov	r0, r7
 800ff3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff3c:	4b0a      	ldr	r3, [pc, #40]	; (800ff68 <__swbuf_r+0x9c>)
 800ff3e:	429c      	cmp	r4, r3
 800ff40:	d101      	bne.n	800ff46 <__swbuf_r+0x7a>
 800ff42:	68ac      	ldr	r4, [r5, #8]
 800ff44:	e7cf      	b.n	800fee6 <__swbuf_r+0x1a>
 800ff46:	4b09      	ldr	r3, [pc, #36]	; (800ff6c <__swbuf_r+0xa0>)
 800ff48:	429c      	cmp	r4, r3
 800ff4a:	bf08      	it	eq
 800ff4c:	68ec      	ldreq	r4, [r5, #12]
 800ff4e:	e7ca      	b.n	800fee6 <__swbuf_r+0x1a>
 800ff50:	4621      	mov	r1, r4
 800ff52:	4628      	mov	r0, r5
 800ff54:	f000 f81a 	bl	800ff8c <__swsetup_r>
 800ff58:	2800      	cmp	r0, #0
 800ff5a:	d0cb      	beq.n	800fef4 <__swbuf_r+0x28>
 800ff5c:	f04f 37ff 	mov.w	r7, #4294967295
 800ff60:	e7ea      	b.n	800ff38 <__swbuf_r+0x6c>
 800ff62:	bf00      	nop
 800ff64:	08010f98 	.word	0x08010f98
 800ff68:	08010fb8 	.word	0x08010fb8
 800ff6c:	08010f78 	.word	0x08010f78

0800ff70 <__ascii_wctomb>:
 800ff70:	b149      	cbz	r1, 800ff86 <__ascii_wctomb+0x16>
 800ff72:	2aff      	cmp	r2, #255	; 0xff
 800ff74:	bf85      	ittet	hi
 800ff76:	238a      	movhi	r3, #138	; 0x8a
 800ff78:	6003      	strhi	r3, [r0, #0]
 800ff7a:	700a      	strbls	r2, [r1, #0]
 800ff7c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ff80:	bf98      	it	ls
 800ff82:	2001      	movls	r0, #1
 800ff84:	4770      	bx	lr
 800ff86:	4608      	mov	r0, r1
 800ff88:	4770      	bx	lr
	...

0800ff8c <__swsetup_r>:
 800ff8c:	4b32      	ldr	r3, [pc, #200]	; (8010058 <__swsetup_r+0xcc>)
 800ff8e:	b570      	push	{r4, r5, r6, lr}
 800ff90:	681d      	ldr	r5, [r3, #0]
 800ff92:	4606      	mov	r6, r0
 800ff94:	460c      	mov	r4, r1
 800ff96:	b125      	cbz	r5, 800ffa2 <__swsetup_r+0x16>
 800ff98:	69ab      	ldr	r3, [r5, #24]
 800ff9a:	b913      	cbnz	r3, 800ffa2 <__swsetup_r+0x16>
 800ff9c:	4628      	mov	r0, r5
 800ff9e:	f000 f97d 	bl	801029c <__sinit>
 800ffa2:	4b2e      	ldr	r3, [pc, #184]	; (801005c <__swsetup_r+0xd0>)
 800ffa4:	429c      	cmp	r4, r3
 800ffa6:	d10f      	bne.n	800ffc8 <__swsetup_r+0x3c>
 800ffa8:	686c      	ldr	r4, [r5, #4]
 800ffaa:	89a3      	ldrh	r3, [r4, #12]
 800ffac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ffb0:	0719      	lsls	r1, r3, #28
 800ffb2:	d42c      	bmi.n	801000e <__swsetup_r+0x82>
 800ffb4:	06dd      	lsls	r5, r3, #27
 800ffb6:	d411      	bmi.n	800ffdc <__swsetup_r+0x50>
 800ffb8:	2309      	movs	r3, #9
 800ffba:	6033      	str	r3, [r6, #0]
 800ffbc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ffc0:	81a3      	strh	r3, [r4, #12]
 800ffc2:	f04f 30ff 	mov.w	r0, #4294967295
 800ffc6:	e03e      	b.n	8010046 <__swsetup_r+0xba>
 800ffc8:	4b25      	ldr	r3, [pc, #148]	; (8010060 <__swsetup_r+0xd4>)
 800ffca:	429c      	cmp	r4, r3
 800ffcc:	d101      	bne.n	800ffd2 <__swsetup_r+0x46>
 800ffce:	68ac      	ldr	r4, [r5, #8]
 800ffd0:	e7eb      	b.n	800ffaa <__swsetup_r+0x1e>
 800ffd2:	4b24      	ldr	r3, [pc, #144]	; (8010064 <__swsetup_r+0xd8>)
 800ffd4:	429c      	cmp	r4, r3
 800ffd6:	bf08      	it	eq
 800ffd8:	68ec      	ldreq	r4, [r5, #12]
 800ffda:	e7e6      	b.n	800ffaa <__swsetup_r+0x1e>
 800ffdc:	0758      	lsls	r0, r3, #29
 800ffde:	d512      	bpl.n	8010006 <__swsetup_r+0x7a>
 800ffe0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ffe2:	b141      	cbz	r1, 800fff6 <__swsetup_r+0x6a>
 800ffe4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ffe8:	4299      	cmp	r1, r3
 800ffea:	d002      	beq.n	800fff2 <__swsetup_r+0x66>
 800ffec:	4630      	mov	r0, r6
 800ffee:	f7ff fbbd 	bl	800f76c <_free_r>
 800fff2:	2300      	movs	r3, #0
 800fff4:	6363      	str	r3, [r4, #52]	; 0x34
 800fff6:	89a3      	ldrh	r3, [r4, #12]
 800fff8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fffc:	81a3      	strh	r3, [r4, #12]
 800fffe:	2300      	movs	r3, #0
 8010000:	6063      	str	r3, [r4, #4]
 8010002:	6923      	ldr	r3, [r4, #16]
 8010004:	6023      	str	r3, [r4, #0]
 8010006:	89a3      	ldrh	r3, [r4, #12]
 8010008:	f043 0308 	orr.w	r3, r3, #8
 801000c:	81a3      	strh	r3, [r4, #12]
 801000e:	6923      	ldr	r3, [r4, #16]
 8010010:	b94b      	cbnz	r3, 8010026 <__swsetup_r+0x9a>
 8010012:	89a3      	ldrh	r3, [r4, #12]
 8010014:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010018:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801001c:	d003      	beq.n	8010026 <__swsetup_r+0x9a>
 801001e:	4621      	mov	r1, r4
 8010020:	4630      	mov	r0, r6
 8010022:	f000 f9ff 	bl	8010424 <__smakebuf_r>
 8010026:	89a0      	ldrh	r0, [r4, #12]
 8010028:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801002c:	f010 0301 	ands.w	r3, r0, #1
 8010030:	d00a      	beq.n	8010048 <__swsetup_r+0xbc>
 8010032:	2300      	movs	r3, #0
 8010034:	60a3      	str	r3, [r4, #8]
 8010036:	6963      	ldr	r3, [r4, #20]
 8010038:	425b      	negs	r3, r3
 801003a:	61a3      	str	r3, [r4, #24]
 801003c:	6923      	ldr	r3, [r4, #16]
 801003e:	b943      	cbnz	r3, 8010052 <__swsetup_r+0xc6>
 8010040:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010044:	d1ba      	bne.n	800ffbc <__swsetup_r+0x30>
 8010046:	bd70      	pop	{r4, r5, r6, pc}
 8010048:	0781      	lsls	r1, r0, #30
 801004a:	bf58      	it	pl
 801004c:	6963      	ldrpl	r3, [r4, #20]
 801004e:	60a3      	str	r3, [r4, #8]
 8010050:	e7f4      	b.n	801003c <__swsetup_r+0xb0>
 8010052:	2000      	movs	r0, #0
 8010054:	e7f7      	b.n	8010046 <__swsetup_r+0xba>
 8010056:	bf00      	nop
 8010058:	20000020 	.word	0x20000020
 801005c:	08010f98 	.word	0x08010f98
 8010060:	08010fb8 	.word	0x08010fb8
 8010064:	08010f78 	.word	0x08010f78

08010068 <__sflush_r>:
 8010068:	898a      	ldrh	r2, [r1, #12]
 801006a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801006e:	4605      	mov	r5, r0
 8010070:	0710      	lsls	r0, r2, #28
 8010072:	460c      	mov	r4, r1
 8010074:	d458      	bmi.n	8010128 <__sflush_r+0xc0>
 8010076:	684b      	ldr	r3, [r1, #4]
 8010078:	2b00      	cmp	r3, #0
 801007a:	dc05      	bgt.n	8010088 <__sflush_r+0x20>
 801007c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801007e:	2b00      	cmp	r3, #0
 8010080:	dc02      	bgt.n	8010088 <__sflush_r+0x20>
 8010082:	2000      	movs	r0, #0
 8010084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010088:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801008a:	2e00      	cmp	r6, #0
 801008c:	d0f9      	beq.n	8010082 <__sflush_r+0x1a>
 801008e:	2300      	movs	r3, #0
 8010090:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010094:	682f      	ldr	r7, [r5, #0]
 8010096:	602b      	str	r3, [r5, #0]
 8010098:	d032      	beq.n	8010100 <__sflush_r+0x98>
 801009a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801009c:	89a3      	ldrh	r3, [r4, #12]
 801009e:	075a      	lsls	r2, r3, #29
 80100a0:	d505      	bpl.n	80100ae <__sflush_r+0x46>
 80100a2:	6863      	ldr	r3, [r4, #4]
 80100a4:	1ac0      	subs	r0, r0, r3
 80100a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80100a8:	b10b      	cbz	r3, 80100ae <__sflush_r+0x46>
 80100aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80100ac:	1ac0      	subs	r0, r0, r3
 80100ae:	2300      	movs	r3, #0
 80100b0:	4602      	mov	r2, r0
 80100b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80100b4:	6a21      	ldr	r1, [r4, #32]
 80100b6:	4628      	mov	r0, r5
 80100b8:	47b0      	blx	r6
 80100ba:	1c43      	adds	r3, r0, #1
 80100bc:	89a3      	ldrh	r3, [r4, #12]
 80100be:	d106      	bne.n	80100ce <__sflush_r+0x66>
 80100c0:	6829      	ldr	r1, [r5, #0]
 80100c2:	291d      	cmp	r1, #29
 80100c4:	d82c      	bhi.n	8010120 <__sflush_r+0xb8>
 80100c6:	4a2a      	ldr	r2, [pc, #168]	; (8010170 <__sflush_r+0x108>)
 80100c8:	40ca      	lsrs	r2, r1
 80100ca:	07d6      	lsls	r6, r2, #31
 80100cc:	d528      	bpl.n	8010120 <__sflush_r+0xb8>
 80100ce:	2200      	movs	r2, #0
 80100d0:	6062      	str	r2, [r4, #4]
 80100d2:	04d9      	lsls	r1, r3, #19
 80100d4:	6922      	ldr	r2, [r4, #16]
 80100d6:	6022      	str	r2, [r4, #0]
 80100d8:	d504      	bpl.n	80100e4 <__sflush_r+0x7c>
 80100da:	1c42      	adds	r2, r0, #1
 80100dc:	d101      	bne.n	80100e2 <__sflush_r+0x7a>
 80100de:	682b      	ldr	r3, [r5, #0]
 80100e0:	b903      	cbnz	r3, 80100e4 <__sflush_r+0x7c>
 80100e2:	6560      	str	r0, [r4, #84]	; 0x54
 80100e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80100e6:	602f      	str	r7, [r5, #0]
 80100e8:	2900      	cmp	r1, #0
 80100ea:	d0ca      	beq.n	8010082 <__sflush_r+0x1a>
 80100ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80100f0:	4299      	cmp	r1, r3
 80100f2:	d002      	beq.n	80100fa <__sflush_r+0x92>
 80100f4:	4628      	mov	r0, r5
 80100f6:	f7ff fb39 	bl	800f76c <_free_r>
 80100fa:	2000      	movs	r0, #0
 80100fc:	6360      	str	r0, [r4, #52]	; 0x34
 80100fe:	e7c1      	b.n	8010084 <__sflush_r+0x1c>
 8010100:	6a21      	ldr	r1, [r4, #32]
 8010102:	2301      	movs	r3, #1
 8010104:	4628      	mov	r0, r5
 8010106:	47b0      	blx	r6
 8010108:	1c41      	adds	r1, r0, #1
 801010a:	d1c7      	bne.n	801009c <__sflush_r+0x34>
 801010c:	682b      	ldr	r3, [r5, #0]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d0c4      	beq.n	801009c <__sflush_r+0x34>
 8010112:	2b1d      	cmp	r3, #29
 8010114:	d001      	beq.n	801011a <__sflush_r+0xb2>
 8010116:	2b16      	cmp	r3, #22
 8010118:	d101      	bne.n	801011e <__sflush_r+0xb6>
 801011a:	602f      	str	r7, [r5, #0]
 801011c:	e7b1      	b.n	8010082 <__sflush_r+0x1a>
 801011e:	89a3      	ldrh	r3, [r4, #12]
 8010120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010124:	81a3      	strh	r3, [r4, #12]
 8010126:	e7ad      	b.n	8010084 <__sflush_r+0x1c>
 8010128:	690f      	ldr	r7, [r1, #16]
 801012a:	2f00      	cmp	r7, #0
 801012c:	d0a9      	beq.n	8010082 <__sflush_r+0x1a>
 801012e:	0793      	lsls	r3, r2, #30
 8010130:	680e      	ldr	r6, [r1, #0]
 8010132:	bf08      	it	eq
 8010134:	694b      	ldreq	r3, [r1, #20]
 8010136:	600f      	str	r7, [r1, #0]
 8010138:	bf18      	it	ne
 801013a:	2300      	movne	r3, #0
 801013c:	eba6 0807 	sub.w	r8, r6, r7
 8010140:	608b      	str	r3, [r1, #8]
 8010142:	f1b8 0f00 	cmp.w	r8, #0
 8010146:	dd9c      	ble.n	8010082 <__sflush_r+0x1a>
 8010148:	6a21      	ldr	r1, [r4, #32]
 801014a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801014c:	4643      	mov	r3, r8
 801014e:	463a      	mov	r2, r7
 8010150:	4628      	mov	r0, r5
 8010152:	47b0      	blx	r6
 8010154:	2800      	cmp	r0, #0
 8010156:	dc06      	bgt.n	8010166 <__sflush_r+0xfe>
 8010158:	89a3      	ldrh	r3, [r4, #12]
 801015a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801015e:	81a3      	strh	r3, [r4, #12]
 8010160:	f04f 30ff 	mov.w	r0, #4294967295
 8010164:	e78e      	b.n	8010084 <__sflush_r+0x1c>
 8010166:	4407      	add	r7, r0
 8010168:	eba8 0800 	sub.w	r8, r8, r0
 801016c:	e7e9      	b.n	8010142 <__sflush_r+0xda>
 801016e:	bf00      	nop
 8010170:	20400001 	.word	0x20400001

08010174 <_fflush_r>:
 8010174:	b538      	push	{r3, r4, r5, lr}
 8010176:	690b      	ldr	r3, [r1, #16]
 8010178:	4605      	mov	r5, r0
 801017a:	460c      	mov	r4, r1
 801017c:	b913      	cbnz	r3, 8010184 <_fflush_r+0x10>
 801017e:	2500      	movs	r5, #0
 8010180:	4628      	mov	r0, r5
 8010182:	bd38      	pop	{r3, r4, r5, pc}
 8010184:	b118      	cbz	r0, 801018e <_fflush_r+0x1a>
 8010186:	6983      	ldr	r3, [r0, #24]
 8010188:	b90b      	cbnz	r3, 801018e <_fflush_r+0x1a>
 801018a:	f000 f887 	bl	801029c <__sinit>
 801018e:	4b14      	ldr	r3, [pc, #80]	; (80101e0 <_fflush_r+0x6c>)
 8010190:	429c      	cmp	r4, r3
 8010192:	d11b      	bne.n	80101cc <_fflush_r+0x58>
 8010194:	686c      	ldr	r4, [r5, #4]
 8010196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d0ef      	beq.n	801017e <_fflush_r+0xa>
 801019e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80101a0:	07d0      	lsls	r0, r2, #31
 80101a2:	d404      	bmi.n	80101ae <_fflush_r+0x3a>
 80101a4:	0599      	lsls	r1, r3, #22
 80101a6:	d402      	bmi.n	80101ae <_fflush_r+0x3a>
 80101a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80101aa:	f000 f915 	bl	80103d8 <__retarget_lock_acquire_recursive>
 80101ae:	4628      	mov	r0, r5
 80101b0:	4621      	mov	r1, r4
 80101b2:	f7ff ff59 	bl	8010068 <__sflush_r>
 80101b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80101b8:	07da      	lsls	r2, r3, #31
 80101ba:	4605      	mov	r5, r0
 80101bc:	d4e0      	bmi.n	8010180 <_fflush_r+0xc>
 80101be:	89a3      	ldrh	r3, [r4, #12]
 80101c0:	059b      	lsls	r3, r3, #22
 80101c2:	d4dd      	bmi.n	8010180 <_fflush_r+0xc>
 80101c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80101c6:	f000 f908 	bl	80103da <__retarget_lock_release_recursive>
 80101ca:	e7d9      	b.n	8010180 <_fflush_r+0xc>
 80101cc:	4b05      	ldr	r3, [pc, #20]	; (80101e4 <_fflush_r+0x70>)
 80101ce:	429c      	cmp	r4, r3
 80101d0:	d101      	bne.n	80101d6 <_fflush_r+0x62>
 80101d2:	68ac      	ldr	r4, [r5, #8]
 80101d4:	e7df      	b.n	8010196 <_fflush_r+0x22>
 80101d6:	4b04      	ldr	r3, [pc, #16]	; (80101e8 <_fflush_r+0x74>)
 80101d8:	429c      	cmp	r4, r3
 80101da:	bf08      	it	eq
 80101dc:	68ec      	ldreq	r4, [r5, #12]
 80101de:	e7da      	b.n	8010196 <_fflush_r+0x22>
 80101e0:	08010f98 	.word	0x08010f98
 80101e4:	08010fb8 	.word	0x08010fb8
 80101e8:	08010f78 	.word	0x08010f78

080101ec <std>:
 80101ec:	2300      	movs	r3, #0
 80101ee:	b510      	push	{r4, lr}
 80101f0:	4604      	mov	r4, r0
 80101f2:	e9c0 3300 	strd	r3, r3, [r0]
 80101f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80101fa:	6083      	str	r3, [r0, #8]
 80101fc:	8181      	strh	r1, [r0, #12]
 80101fe:	6643      	str	r3, [r0, #100]	; 0x64
 8010200:	81c2      	strh	r2, [r0, #14]
 8010202:	6183      	str	r3, [r0, #24]
 8010204:	4619      	mov	r1, r3
 8010206:	2208      	movs	r2, #8
 8010208:	305c      	adds	r0, #92	; 0x5c
 801020a:	f7fb fda1 	bl	800bd50 <memset>
 801020e:	4b05      	ldr	r3, [pc, #20]	; (8010224 <std+0x38>)
 8010210:	6263      	str	r3, [r4, #36]	; 0x24
 8010212:	4b05      	ldr	r3, [pc, #20]	; (8010228 <std+0x3c>)
 8010214:	62a3      	str	r3, [r4, #40]	; 0x28
 8010216:	4b05      	ldr	r3, [pc, #20]	; (801022c <std+0x40>)
 8010218:	62e3      	str	r3, [r4, #44]	; 0x2c
 801021a:	4b05      	ldr	r3, [pc, #20]	; (8010230 <std+0x44>)
 801021c:	6224      	str	r4, [r4, #32]
 801021e:	6323      	str	r3, [r4, #48]	; 0x30
 8010220:	bd10      	pop	{r4, pc}
 8010222:	bf00      	nop
 8010224:	08010501 	.word	0x08010501
 8010228:	08010523 	.word	0x08010523
 801022c:	0801055b 	.word	0x0801055b
 8010230:	0801057f 	.word	0x0801057f

08010234 <_cleanup_r>:
 8010234:	4901      	ldr	r1, [pc, #4]	; (801023c <_cleanup_r+0x8>)
 8010236:	f000 b8af 	b.w	8010398 <_fwalk_reent>
 801023a:	bf00      	nop
 801023c:	08010175 	.word	0x08010175

08010240 <__sfmoreglue>:
 8010240:	b570      	push	{r4, r5, r6, lr}
 8010242:	1e4a      	subs	r2, r1, #1
 8010244:	2568      	movs	r5, #104	; 0x68
 8010246:	4355      	muls	r5, r2
 8010248:	460e      	mov	r6, r1
 801024a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801024e:	f7ff fadd 	bl	800f80c <_malloc_r>
 8010252:	4604      	mov	r4, r0
 8010254:	b140      	cbz	r0, 8010268 <__sfmoreglue+0x28>
 8010256:	2100      	movs	r1, #0
 8010258:	e9c0 1600 	strd	r1, r6, [r0]
 801025c:	300c      	adds	r0, #12
 801025e:	60a0      	str	r0, [r4, #8]
 8010260:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010264:	f7fb fd74 	bl	800bd50 <memset>
 8010268:	4620      	mov	r0, r4
 801026a:	bd70      	pop	{r4, r5, r6, pc}

0801026c <__sfp_lock_acquire>:
 801026c:	4801      	ldr	r0, [pc, #4]	; (8010274 <__sfp_lock_acquire+0x8>)
 801026e:	f000 b8b3 	b.w	80103d8 <__retarget_lock_acquire_recursive>
 8010272:	bf00      	nop
 8010274:	20001368 	.word	0x20001368

08010278 <__sfp_lock_release>:
 8010278:	4801      	ldr	r0, [pc, #4]	; (8010280 <__sfp_lock_release+0x8>)
 801027a:	f000 b8ae 	b.w	80103da <__retarget_lock_release_recursive>
 801027e:	bf00      	nop
 8010280:	20001368 	.word	0x20001368

08010284 <__sinit_lock_acquire>:
 8010284:	4801      	ldr	r0, [pc, #4]	; (801028c <__sinit_lock_acquire+0x8>)
 8010286:	f000 b8a7 	b.w	80103d8 <__retarget_lock_acquire_recursive>
 801028a:	bf00      	nop
 801028c:	20001363 	.word	0x20001363

08010290 <__sinit_lock_release>:
 8010290:	4801      	ldr	r0, [pc, #4]	; (8010298 <__sinit_lock_release+0x8>)
 8010292:	f000 b8a2 	b.w	80103da <__retarget_lock_release_recursive>
 8010296:	bf00      	nop
 8010298:	20001363 	.word	0x20001363

0801029c <__sinit>:
 801029c:	b510      	push	{r4, lr}
 801029e:	4604      	mov	r4, r0
 80102a0:	f7ff fff0 	bl	8010284 <__sinit_lock_acquire>
 80102a4:	69a3      	ldr	r3, [r4, #24]
 80102a6:	b11b      	cbz	r3, 80102b0 <__sinit+0x14>
 80102a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80102ac:	f7ff bff0 	b.w	8010290 <__sinit_lock_release>
 80102b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80102b4:	6523      	str	r3, [r4, #80]	; 0x50
 80102b6:	4b13      	ldr	r3, [pc, #76]	; (8010304 <__sinit+0x68>)
 80102b8:	4a13      	ldr	r2, [pc, #76]	; (8010308 <__sinit+0x6c>)
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80102be:	42a3      	cmp	r3, r4
 80102c0:	bf04      	itt	eq
 80102c2:	2301      	moveq	r3, #1
 80102c4:	61a3      	streq	r3, [r4, #24]
 80102c6:	4620      	mov	r0, r4
 80102c8:	f000 f820 	bl	801030c <__sfp>
 80102cc:	6060      	str	r0, [r4, #4]
 80102ce:	4620      	mov	r0, r4
 80102d0:	f000 f81c 	bl	801030c <__sfp>
 80102d4:	60a0      	str	r0, [r4, #8]
 80102d6:	4620      	mov	r0, r4
 80102d8:	f000 f818 	bl	801030c <__sfp>
 80102dc:	2200      	movs	r2, #0
 80102de:	60e0      	str	r0, [r4, #12]
 80102e0:	2104      	movs	r1, #4
 80102e2:	6860      	ldr	r0, [r4, #4]
 80102e4:	f7ff ff82 	bl	80101ec <std>
 80102e8:	68a0      	ldr	r0, [r4, #8]
 80102ea:	2201      	movs	r2, #1
 80102ec:	2109      	movs	r1, #9
 80102ee:	f7ff ff7d 	bl	80101ec <std>
 80102f2:	68e0      	ldr	r0, [r4, #12]
 80102f4:	2202      	movs	r2, #2
 80102f6:	2112      	movs	r1, #18
 80102f8:	f7ff ff78 	bl	80101ec <std>
 80102fc:	2301      	movs	r3, #1
 80102fe:	61a3      	str	r3, [r4, #24]
 8010300:	e7d2      	b.n	80102a8 <__sinit+0xc>
 8010302:	bf00      	nop
 8010304:	08010ac4 	.word	0x08010ac4
 8010308:	08010235 	.word	0x08010235

0801030c <__sfp>:
 801030c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801030e:	4607      	mov	r7, r0
 8010310:	f7ff ffac 	bl	801026c <__sfp_lock_acquire>
 8010314:	4b1e      	ldr	r3, [pc, #120]	; (8010390 <__sfp+0x84>)
 8010316:	681e      	ldr	r6, [r3, #0]
 8010318:	69b3      	ldr	r3, [r6, #24]
 801031a:	b913      	cbnz	r3, 8010322 <__sfp+0x16>
 801031c:	4630      	mov	r0, r6
 801031e:	f7ff ffbd 	bl	801029c <__sinit>
 8010322:	3648      	adds	r6, #72	; 0x48
 8010324:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010328:	3b01      	subs	r3, #1
 801032a:	d503      	bpl.n	8010334 <__sfp+0x28>
 801032c:	6833      	ldr	r3, [r6, #0]
 801032e:	b30b      	cbz	r3, 8010374 <__sfp+0x68>
 8010330:	6836      	ldr	r6, [r6, #0]
 8010332:	e7f7      	b.n	8010324 <__sfp+0x18>
 8010334:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010338:	b9d5      	cbnz	r5, 8010370 <__sfp+0x64>
 801033a:	4b16      	ldr	r3, [pc, #88]	; (8010394 <__sfp+0x88>)
 801033c:	60e3      	str	r3, [r4, #12]
 801033e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010342:	6665      	str	r5, [r4, #100]	; 0x64
 8010344:	f000 f847 	bl	80103d6 <__retarget_lock_init_recursive>
 8010348:	f7ff ff96 	bl	8010278 <__sfp_lock_release>
 801034c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010350:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010354:	6025      	str	r5, [r4, #0]
 8010356:	61a5      	str	r5, [r4, #24]
 8010358:	2208      	movs	r2, #8
 801035a:	4629      	mov	r1, r5
 801035c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010360:	f7fb fcf6 	bl	800bd50 <memset>
 8010364:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010368:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801036c:	4620      	mov	r0, r4
 801036e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010370:	3468      	adds	r4, #104	; 0x68
 8010372:	e7d9      	b.n	8010328 <__sfp+0x1c>
 8010374:	2104      	movs	r1, #4
 8010376:	4638      	mov	r0, r7
 8010378:	f7ff ff62 	bl	8010240 <__sfmoreglue>
 801037c:	4604      	mov	r4, r0
 801037e:	6030      	str	r0, [r6, #0]
 8010380:	2800      	cmp	r0, #0
 8010382:	d1d5      	bne.n	8010330 <__sfp+0x24>
 8010384:	f7ff ff78 	bl	8010278 <__sfp_lock_release>
 8010388:	230c      	movs	r3, #12
 801038a:	603b      	str	r3, [r7, #0]
 801038c:	e7ee      	b.n	801036c <__sfp+0x60>
 801038e:	bf00      	nop
 8010390:	08010ac4 	.word	0x08010ac4
 8010394:	ffff0001 	.word	0xffff0001

08010398 <_fwalk_reent>:
 8010398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801039c:	4606      	mov	r6, r0
 801039e:	4688      	mov	r8, r1
 80103a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80103a4:	2700      	movs	r7, #0
 80103a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80103aa:	f1b9 0901 	subs.w	r9, r9, #1
 80103ae:	d505      	bpl.n	80103bc <_fwalk_reent+0x24>
 80103b0:	6824      	ldr	r4, [r4, #0]
 80103b2:	2c00      	cmp	r4, #0
 80103b4:	d1f7      	bne.n	80103a6 <_fwalk_reent+0xe>
 80103b6:	4638      	mov	r0, r7
 80103b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103bc:	89ab      	ldrh	r3, [r5, #12]
 80103be:	2b01      	cmp	r3, #1
 80103c0:	d907      	bls.n	80103d2 <_fwalk_reent+0x3a>
 80103c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80103c6:	3301      	adds	r3, #1
 80103c8:	d003      	beq.n	80103d2 <_fwalk_reent+0x3a>
 80103ca:	4629      	mov	r1, r5
 80103cc:	4630      	mov	r0, r6
 80103ce:	47c0      	blx	r8
 80103d0:	4307      	orrs	r7, r0
 80103d2:	3568      	adds	r5, #104	; 0x68
 80103d4:	e7e9      	b.n	80103aa <_fwalk_reent+0x12>

080103d6 <__retarget_lock_init_recursive>:
 80103d6:	4770      	bx	lr

080103d8 <__retarget_lock_acquire_recursive>:
 80103d8:	4770      	bx	lr

080103da <__retarget_lock_release_recursive>:
 80103da:	4770      	bx	lr

080103dc <__swhatbuf_r>:
 80103dc:	b570      	push	{r4, r5, r6, lr}
 80103de:	460e      	mov	r6, r1
 80103e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103e4:	2900      	cmp	r1, #0
 80103e6:	b096      	sub	sp, #88	; 0x58
 80103e8:	4614      	mov	r4, r2
 80103ea:	461d      	mov	r5, r3
 80103ec:	da07      	bge.n	80103fe <__swhatbuf_r+0x22>
 80103ee:	2300      	movs	r3, #0
 80103f0:	602b      	str	r3, [r5, #0]
 80103f2:	89b3      	ldrh	r3, [r6, #12]
 80103f4:	061a      	lsls	r2, r3, #24
 80103f6:	d410      	bmi.n	801041a <__swhatbuf_r+0x3e>
 80103f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80103fc:	e00e      	b.n	801041c <__swhatbuf_r+0x40>
 80103fe:	466a      	mov	r2, sp
 8010400:	f000 f8e4 	bl	80105cc <_fstat_r>
 8010404:	2800      	cmp	r0, #0
 8010406:	dbf2      	blt.n	80103ee <__swhatbuf_r+0x12>
 8010408:	9a01      	ldr	r2, [sp, #4]
 801040a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801040e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010412:	425a      	negs	r2, r3
 8010414:	415a      	adcs	r2, r3
 8010416:	602a      	str	r2, [r5, #0]
 8010418:	e7ee      	b.n	80103f8 <__swhatbuf_r+0x1c>
 801041a:	2340      	movs	r3, #64	; 0x40
 801041c:	2000      	movs	r0, #0
 801041e:	6023      	str	r3, [r4, #0]
 8010420:	b016      	add	sp, #88	; 0x58
 8010422:	bd70      	pop	{r4, r5, r6, pc}

08010424 <__smakebuf_r>:
 8010424:	898b      	ldrh	r3, [r1, #12]
 8010426:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010428:	079d      	lsls	r5, r3, #30
 801042a:	4606      	mov	r6, r0
 801042c:	460c      	mov	r4, r1
 801042e:	d507      	bpl.n	8010440 <__smakebuf_r+0x1c>
 8010430:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010434:	6023      	str	r3, [r4, #0]
 8010436:	6123      	str	r3, [r4, #16]
 8010438:	2301      	movs	r3, #1
 801043a:	6163      	str	r3, [r4, #20]
 801043c:	b002      	add	sp, #8
 801043e:	bd70      	pop	{r4, r5, r6, pc}
 8010440:	ab01      	add	r3, sp, #4
 8010442:	466a      	mov	r2, sp
 8010444:	f7ff ffca 	bl	80103dc <__swhatbuf_r>
 8010448:	9900      	ldr	r1, [sp, #0]
 801044a:	4605      	mov	r5, r0
 801044c:	4630      	mov	r0, r6
 801044e:	f7ff f9dd 	bl	800f80c <_malloc_r>
 8010452:	b948      	cbnz	r0, 8010468 <__smakebuf_r+0x44>
 8010454:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010458:	059a      	lsls	r2, r3, #22
 801045a:	d4ef      	bmi.n	801043c <__smakebuf_r+0x18>
 801045c:	f023 0303 	bic.w	r3, r3, #3
 8010460:	f043 0302 	orr.w	r3, r3, #2
 8010464:	81a3      	strh	r3, [r4, #12]
 8010466:	e7e3      	b.n	8010430 <__smakebuf_r+0xc>
 8010468:	4b0d      	ldr	r3, [pc, #52]	; (80104a0 <__smakebuf_r+0x7c>)
 801046a:	62b3      	str	r3, [r6, #40]	; 0x28
 801046c:	89a3      	ldrh	r3, [r4, #12]
 801046e:	6020      	str	r0, [r4, #0]
 8010470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010474:	81a3      	strh	r3, [r4, #12]
 8010476:	9b00      	ldr	r3, [sp, #0]
 8010478:	6163      	str	r3, [r4, #20]
 801047a:	9b01      	ldr	r3, [sp, #4]
 801047c:	6120      	str	r0, [r4, #16]
 801047e:	b15b      	cbz	r3, 8010498 <__smakebuf_r+0x74>
 8010480:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010484:	4630      	mov	r0, r6
 8010486:	f000 f8b3 	bl	80105f0 <_isatty_r>
 801048a:	b128      	cbz	r0, 8010498 <__smakebuf_r+0x74>
 801048c:	89a3      	ldrh	r3, [r4, #12]
 801048e:	f023 0303 	bic.w	r3, r3, #3
 8010492:	f043 0301 	orr.w	r3, r3, #1
 8010496:	81a3      	strh	r3, [r4, #12]
 8010498:	89a0      	ldrh	r0, [r4, #12]
 801049a:	4305      	orrs	r5, r0
 801049c:	81a5      	strh	r5, [r4, #12]
 801049e:	e7cd      	b.n	801043c <__smakebuf_r+0x18>
 80104a0:	08010235 	.word	0x08010235

080104a4 <memmove>:
 80104a4:	4288      	cmp	r0, r1
 80104a6:	b510      	push	{r4, lr}
 80104a8:	eb01 0402 	add.w	r4, r1, r2
 80104ac:	d902      	bls.n	80104b4 <memmove+0x10>
 80104ae:	4284      	cmp	r4, r0
 80104b0:	4623      	mov	r3, r4
 80104b2:	d807      	bhi.n	80104c4 <memmove+0x20>
 80104b4:	1e43      	subs	r3, r0, #1
 80104b6:	42a1      	cmp	r1, r4
 80104b8:	d008      	beq.n	80104cc <memmove+0x28>
 80104ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80104be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80104c2:	e7f8      	b.n	80104b6 <memmove+0x12>
 80104c4:	4402      	add	r2, r0
 80104c6:	4601      	mov	r1, r0
 80104c8:	428a      	cmp	r2, r1
 80104ca:	d100      	bne.n	80104ce <memmove+0x2a>
 80104cc:	bd10      	pop	{r4, pc}
 80104ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80104d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80104d6:	e7f7      	b.n	80104c8 <memmove+0x24>

080104d8 <__malloc_lock>:
 80104d8:	4801      	ldr	r0, [pc, #4]	; (80104e0 <__malloc_lock+0x8>)
 80104da:	f7ff bf7d 	b.w	80103d8 <__retarget_lock_acquire_recursive>
 80104de:	bf00      	nop
 80104e0:	20001364 	.word	0x20001364

080104e4 <__malloc_unlock>:
 80104e4:	4801      	ldr	r0, [pc, #4]	; (80104ec <__malloc_unlock+0x8>)
 80104e6:	f7ff bf78 	b.w	80103da <__retarget_lock_release_recursive>
 80104ea:	bf00      	nop
 80104ec:	20001364 	.word	0x20001364

080104f0 <_malloc_usable_size_r>:
 80104f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80104f4:	1f18      	subs	r0, r3, #4
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	bfbc      	itt	lt
 80104fa:	580b      	ldrlt	r3, [r1, r0]
 80104fc:	18c0      	addlt	r0, r0, r3
 80104fe:	4770      	bx	lr

08010500 <__sread>:
 8010500:	b510      	push	{r4, lr}
 8010502:	460c      	mov	r4, r1
 8010504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010508:	f000 f894 	bl	8010634 <_read_r>
 801050c:	2800      	cmp	r0, #0
 801050e:	bfab      	itete	ge
 8010510:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010512:	89a3      	ldrhlt	r3, [r4, #12]
 8010514:	181b      	addge	r3, r3, r0
 8010516:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801051a:	bfac      	ite	ge
 801051c:	6563      	strge	r3, [r4, #84]	; 0x54
 801051e:	81a3      	strhlt	r3, [r4, #12]
 8010520:	bd10      	pop	{r4, pc}

08010522 <__swrite>:
 8010522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010526:	461f      	mov	r7, r3
 8010528:	898b      	ldrh	r3, [r1, #12]
 801052a:	05db      	lsls	r3, r3, #23
 801052c:	4605      	mov	r5, r0
 801052e:	460c      	mov	r4, r1
 8010530:	4616      	mov	r6, r2
 8010532:	d505      	bpl.n	8010540 <__swrite+0x1e>
 8010534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010538:	2302      	movs	r3, #2
 801053a:	2200      	movs	r2, #0
 801053c:	f000 f868 	bl	8010610 <_lseek_r>
 8010540:	89a3      	ldrh	r3, [r4, #12]
 8010542:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010546:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801054a:	81a3      	strh	r3, [r4, #12]
 801054c:	4632      	mov	r2, r6
 801054e:	463b      	mov	r3, r7
 8010550:	4628      	mov	r0, r5
 8010552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010556:	f000 b817 	b.w	8010588 <_write_r>

0801055a <__sseek>:
 801055a:	b510      	push	{r4, lr}
 801055c:	460c      	mov	r4, r1
 801055e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010562:	f000 f855 	bl	8010610 <_lseek_r>
 8010566:	1c43      	adds	r3, r0, #1
 8010568:	89a3      	ldrh	r3, [r4, #12]
 801056a:	bf15      	itete	ne
 801056c:	6560      	strne	r0, [r4, #84]	; 0x54
 801056e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010572:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010576:	81a3      	strheq	r3, [r4, #12]
 8010578:	bf18      	it	ne
 801057a:	81a3      	strhne	r3, [r4, #12]
 801057c:	bd10      	pop	{r4, pc}

0801057e <__sclose>:
 801057e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010582:	f000 b813 	b.w	80105ac <_close_r>
	...

08010588 <_write_r>:
 8010588:	b538      	push	{r3, r4, r5, lr}
 801058a:	4d07      	ldr	r5, [pc, #28]	; (80105a8 <_write_r+0x20>)
 801058c:	4604      	mov	r4, r0
 801058e:	4608      	mov	r0, r1
 8010590:	4611      	mov	r1, r2
 8010592:	2200      	movs	r2, #0
 8010594:	602a      	str	r2, [r5, #0]
 8010596:	461a      	mov	r2, r3
 8010598:	f7f6 ffc3 	bl	8007522 <_write>
 801059c:	1c43      	adds	r3, r0, #1
 801059e:	d102      	bne.n	80105a6 <_write_r+0x1e>
 80105a0:	682b      	ldr	r3, [r5, #0]
 80105a2:	b103      	cbz	r3, 80105a6 <_write_r+0x1e>
 80105a4:	6023      	str	r3, [r4, #0]
 80105a6:	bd38      	pop	{r3, r4, r5, pc}
 80105a8:	2000135c 	.word	0x2000135c

080105ac <_close_r>:
 80105ac:	b538      	push	{r3, r4, r5, lr}
 80105ae:	4d06      	ldr	r5, [pc, #24]	; (80105c8 <_close_r+0x1c>)
 80105b0:	2300      	movs	r3, #0
 80105b2:	4604      	mov	r4, r0
 80105b4:	4608      	mov	r0, r1
 80105b6:	602b      	str	r3, [r5, #0]
 80105b8:	f7f6 ffcf 	bl	800755a <_close>
 80105bc:	1c43      	adds	r3, r0, #1
 80105be:	d102      	bne.n	80105c6 <_close_r+0x1a>
 80105c0:	682b      	ldr	r3, [r5, #0]
 80105c2:	b103      	cbz	r3, 80105c6 <_close_r+0x1a>
 80105c4:	6023      	str	r3, [r4, #0]
 80105c6:	bd38      	pop	{r3, r4, r5, pc}
 80105c8:	2000135c 	.word	0x2000135c

080105cc <_fstat_r>:
 80105cc:	b538      	push	{r3, r4, r5, lr}
 80105ce:	4d07      	ldr	r5, [pc, #28]	; (80105ec <_fstat_r+0x20>)
 80105d0:	2300      	movs	r3, #0
 80105d2:	4604      	mov	r4, r0
 80105d4:	4608      	mov	r0, r1
 80105d6:	4611      	mov	r1, r2
 80105d8:	602b      	str	r3, [r5, #0]
 80105da:	f7f6 ffca 	bl	8007572 <_fstat>
 80105de:	1c43      	adds	r3, r0, #1
 80105e0:	d102      	bne.n	80105e8 <_fstat_r+0x1c>
 80105e2:	682b      	ldr	r3, [r5, #0]
 80105e4:	b103      	cbz	r3, 80105e8 <_fstat_r+0x1c>
 80105e6:	6023      	str	r3, [r4, #0]
 80105e8:	bd38      	pop	{r3, r4, r5, pc}
 80105ea:	bf00      	nop
 80105ec:	2000135c 	.word	0x2000135c

080105f0 <_isatty_r>:
 80105f0:	b538      	push	{r3, r4, r5, lr}
 80105f2:	4d06      	ldr	r5, [pc, #24]	; (801060c <_isatty_r+0x1c>)
 80105f4:	2300      	movs	r3, #0
 80105f6:	4604      	mov	r4, r0
 80105f8:	4608      	mov	r0, r1
 80105fa:	602b      	str	r3, [r5, #0]
 80105fc:	f7f6 ffc9 	bl	8007592 <_isatty>
 8010600:	1c43      	adds	r3, r0, #1
 8010602:	d102      	bne.n	801060a <_isatty_r+0x1a>
 8010604:	682b      	ldr	r3, [r5, #0]
 8010606:	b103      	cbz	r3, 801060a <_isatty_r+0x1a>
 8010608:	6023      	str	r3, [r4, #0]
 801060a:	bd38      	pop	{r3, r4, r5, pc}
 801060c:	2000135c 	.word	0x2000135c

08010610 <_lseek_r>:
 8010610:	b538      	push	{r3, r4, r5, lr}
 8010612:	4d07      	ldr	r5, [pc, #28]	; (8010630 <_lseek_r+0x20>)
 8010614:	4604      	mov	r4, r0
 8010616:	4608      	mov	r0, r1
 8010618:	4611      	mov	r1, r2
 801061a:	2200      	movs	r2, #0
 801061c:	602a      	str	r2, [r5, #0]
 801061e:	461a      	mov	r2, r3
 8010620:	f7f6 ffc2 	bl	80075a8 <_lseek>
 8010624:	1c43      	adds	r3, r0, #1
 8010626:	d102      	bne.n	801062e <_lseek_r+0x1e>
 8010628:	682b      	ldr	r3, [r5, #0]
 801062a:	b103      	cbz	r3, 801062e <_lseek_r+0x1e>
 801062c:	6023      	str	r3, [r4, #0]
 801062e:	bd38      	pop	{r3, r4, r5, pc}
 8010630:	2000135c 	.word	0x2000135c

08010634 <_read_r>:
 8010634:	b538      	push	{r3, r4, r5, lr}
 8010636:	4d07      	ldr	r5, [pc, #28]	; (8010654 <_read_r+0x20>)
 8010638:	4604      	mov	r4, r0
 801063a:	4608      	mov	r0, r1
 801063c:	4611      	mov	r1, r2
 801063e:	2200      	movs	r2, #0
 8010640:	602a      	str	r2, [r5, #0]
 8010642:	461a      	mov	r2, r3
 8010644:	f7f6 ff50 	bl	80074e8 <_read>
 8010648:	1c43      	adds	r3, r0, #1
 801064a:	d102      	bne.n	8010652 <_read_r+0x1e>
 801064c:	682b      	ldr	r3, [r5, #0]
 801064e:	b103      	cbz	r3, 8010652 <_read_r+0x1e>
 8010650:	6023      	str	r3, [r4, #0]
 8010652:	bd38      	pop	{r3, r4, r5, pc}
 8010654:	2000135c 	.word	0x2000135c

08010658 <_init>:
 8010658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801065a:	bf00      	nop
 801065c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801065e:	bc08      	pop	{r3}
 8010660:	469e      	mov	lr, r3
 8010662:	4770      	bx	lr

08010664 <_fini>:
 8010664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010666:	bf00      	nop
 8010668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801066a:	bc08      	pop	{r3}
 801066c:	469e      	mov	lr, r3
 801066e:	4770      	bx	lr
